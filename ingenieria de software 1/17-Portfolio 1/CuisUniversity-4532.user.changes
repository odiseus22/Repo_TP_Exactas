

----QUIT----(9 March 2021 14:58:42) CuisUniversity-4532.image priorSource: 13044060!

----STARTUP---- (9 March 2021 14:58:43) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-4532.image!


----QUIT----(9 March 2021 14:58:43) CuisUniversity-4532.image priorSource: 16885479!

----STARTUP---- (17 May 2021 20:24:06) as /media/Datos/Cuis/Ej-Portfolio1/linux64/CuisUniversity-4532.image!


----End fileIn of /media/Datos/Cuis/Ej-Portfolio1/linux64/17-Portfolio 1/Portfolio-Ejercicio.st----!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'G.L.S. 5/17/2021 20:26:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'G.L.S. 5/17/2021 20:26:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'G.L.S. 5/17/2021 20:26:46'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'G.L.S. 5/17/2021 20:26:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'G.L.S. 5/17/2021 20:26:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'G.L.S. 5/17/2021 20:26:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'G.L.S. 5/17/2021 20:26:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'G.L.S. 5/17/2021 20:26:46'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'G.L.S. 5/17/2021 20:26:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'G.L.S. 5/17/2021 20:26:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'G.L.S. 5/17/2021 20:26:53'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'G.L.S. 5/17/2021 20:26:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'G.L.S. 5/17/2021 20:26:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'G.L.S. 5/17/2021 20:26:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'G.L.S. 5/17/2021 20:26:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'G.L.S. 5/17/2021 20:26:53'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'G.L.S. 5/17/2021 20:27:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'G.L.S. 5/17/2021 20:27:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'G.L.S. 5/17/2021 20:27:04'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'G.L.S. 5/17/2021 20:27:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'G.L.S. 5/17/2021 20:27:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'G.L.S. 5/17/2021 20:27:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'G.L.S. 5/17/2021 20:27:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'G.L.S. 5/17/2021 20:27:04'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'G.L.S. 5/17/2021 20:27:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'G.L.S. 5/17/2021 20:27:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'G.L.S. 5/17/2021 20:27:16'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'G.L.S. 5/17/2021 20:27:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'G.L.S. 5/17/2021 20:27:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'G.L.S. 5/17/2021 20:27:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'G.L.S. 5/17/2021 20:27:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'G.L.S. 5/17/2021 20:27:16'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'G.L.S. 5/17/2021 20:27:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'G.L.S. 5/17/2021 20:27:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'G.L.S. 5/17/2021 20:27:26'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'G.L.S. 5/17/2021 20:27:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'G.L.S. 5/17/2021 20:27:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'G.L.S. 5/17/2021 20:27:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'G.L.S. 5/17/2021 20:27:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'G.L.S. 5/17/2021 20:27:26'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'G.L.S. 5/17/2021 20:27:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'G.L.S. 5/17/2021 20:27:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'G.L.S. 5/17/2021 20:27:34'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'G.L.S. 5/17/2021 20:27:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'G.L.S. 5/17/2021 20:27:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'G.L.S. 5/17/2021 20:27:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'G.L.S. 5/17/2021 20:27:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'G.L.S. 5/17/2021 20:27:34'!
FAILURE!
!Behavior method!
initialize
	(transactions _ [
	(OrderedCollection
		cover: (30 to: 46)
		declaredAt: (30 to: 46)) new ] valueCoveringAll:
		{48 to: 50})
		cover: (14 to: 25)
		declaredAt: (14 to: 25).! !
!Behavior method!
balance
	^ [
	(transactions
		cover: (12 to: 23)
		declaredAt: (12 to: 23))
		sum: [ :aTransaction |
			[
			(aTransaction
				cover: (48 to: 59)
				declaredAt: (33 to: 44)) value ] valueCoveringAll:
				{61 to: 65} ]
		ifEmpty: [
			0 coverAll:
				{80 to: 80} ]] valueCoveringAll:
		{25 to: 28. 69 to: 76}.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'G.L.S. 5/17/2021 20:27:39'!
PASSED!
!Behavior method!
register: aValue on: account
	| transaction |
	(transaction _ [
	(self coverAll:
		{66 to: 69}) for:
		(aValue
			cover: (76 to: 81)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{71 to: 74})
		cover: (51 to: 61)
		declaredAt: (34 to: 44).
	[
	(account
		cover: (85 to: 91)
		declaredAt: (22 to: 28)) register:
		(transaction
			cover: (103 to: 113)
			declaredAt: (34 to: 44)) ] valueCoveringAll:
		{93 to: 101}.
	^ transaction
		cover: (122 to: 132)
		declaredAt: (34 to: 44).! !
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
register: aTransaction
	[
	(transactions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) add:
		(aTransaction
			cover: (44 to: 55)
			declaredAt: (11 to: 22)) ] valueCoveringAll:
		{39 to: 42}.! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'G.L.S. 5/17/2021 20:27:39'!
PASSED!
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
value
	^ value
		cover: (11 to: 15)
		declaredAt: (11 to: 15).! !

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'G.L.S. 5/17/2021 20:27:39'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'G.L.S. 5/17/2021 20:27:39'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(transactions
		cover: (33 to: 44)
		declaredAt: (33 to: 44)) includes:
		(aTransaction
			cover: (56 to: 67)
			declaredAt: (16 to: 27)) ] valueCoveringAll:
		{46 to: 54}.! !

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'G.L.S. 5/17/2021 20:27:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'G.L.S. 5/17/2021 20:27:39'!
PASSED!
!Behavior method!
transactions
	^ [
	(transactions
		cover: (19 to: 30)
		declaredAt: (19 to: 30)) copy ] valueCoveringAll:
		{32 to: 35}.! !

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'G.L.S. 5/17/2021 20:27:39'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'G.L.S. 5/17/2021 20:27:39'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'G.L.S. 5/17/2021 20:28:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'G.L.S. 5/17/2021 20:28:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'G.L.S. 5/17/2021 20:28:28'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'G.L.S. 5/17/2021 20:28:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'G.L.S. 5/17/2021 20:28:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'G.L.S. 5/17/2021 20:28:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'G.L.S. 5/17/2021 20:28:28'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'G.L.S. 5/17/2021 20:28:28'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'G.L.S. 5/17/2021 20:28:42'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'G.L.S. 5/17/2021 20:28:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'G.L.S. 5/17/2021 20:28:50'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'G.L.S. 5/17/2021 20:29:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'G.L.S. 5/17/2021 20:29:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'G.L.S. 5/17/2021 20:29:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'G.L.S. 5/17/2021 20:29:19'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'G.L.S. 5/17/2021 20:29:19'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'G.L.S. 5/17/2021 20:30:36'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'G.L.S. 5/17/2021 20:30:36'!
FAILURE!
!Withdraw methodsFor: 'value' stamp: 'G.L.S. 5/17/2021 20:34:41' prior: 50859505 overrides: 50859433!
value

	^ value * (-1)! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'G.L.S. 5/17/2021 20:35:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'G.L.S. 5/17/2021 20:35:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'G.L.S. 5/17/2021 20:35:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'G.L.S. 5/17/2021 20:35:06'!
FAILURE!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'G.L.S. 5/17/2021 20:35:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'G.L.S. 5/17/2021 20:35:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'G.L.S. 5/17/2021 20:35:06'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'G.L.S. 5/17/2021 20:35:06'!
FAILURE!
!Withdraw methodsFor: 'value' stamp: 'G.L.S. 5/17/2021 20:35:20' prior: 50859936 overrides: 50859433!
value

	^ value! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'G.L.S. 5/17/2021 20:40:05' prior: 50859549!
balance

	"^transactions sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ]"
	
	|deposits withdraws|
	
	deposits := (transactions select: [:aTransaction | aTransaction class = Deposit]) sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ].
	withdraws := (transactions select: [:aTransaction | aTransaction class = Withdraw]) sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ].
	
	^ deposits - withdraws! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'G.L.S. 5/17/2021 20:40:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'G.L.S. 5/17/2021 20:40:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'G.L.S. 5/17/2021 20:40:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'G.L.S. 5/17/2021 20:40:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'G.L.S. 5/17/2021 20:40:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'G.L.S. 5/17/2021 20:40:09'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'G.L.S. 5/17/2021 20:40:09'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'G.L.S. 5/17/2021 20:40:41' prior: 50859975!
balance

	"^transactions sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ]"
	
	|totalDepositsValue withdraws|
	
	totalDepositsValue := (transactions select: [:aTransaction | aTransaction class = Deposit]) sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ].
	withdraws := (transactions select: [:aTransaction | aTransaction class = Withdraw]) sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ].
	
	^ totalDepositsValue - withdraws! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'G.L.S. 5/17/2021 20:40:53' prior: 50860019!
balance

	"^transactions sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ]"
	
	|totalDepositsValue totalWithdrawsValue|
	
	totalDepositsValue := (transactions select: [:aTransaction | aTransaction class = Deposit]) sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ].
	totalWithdrawsValue := (transactions select: [:aTransaction | aTransaction class = Withdraw]) sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ].
	
	^ totalDepositsValue - totalWithdrawsValue! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'G.L.S. 5/17/2021 20:40:56' prior: 50860037!
balance

	"^transactions sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ]"
	
	|totalDepositsValue totalWithdrawsValue|
	
	totalDepositsValue := (transactions select: [:aTransaction | aTransaction class = Deposit]) sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ].
	totalWithdrawsValue := (transactions select: [:aTransaction | aTransaction class = Withdraw]) sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ].
	
	^ totalDepositsValue - totalWithdrawsValue.! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'G.L.S. 5/17/2021 20:41:01' prior: 50860056!
balance
	
	|totalDepositsValue totalWithdrawsValue|
	
	totalDepositsValue := (transactions select: [:aTransaction | aTransaction class = Deposit]) sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ].
	totalWithdrawsValue := (transactions select: [:aTransaction | aTransaction class = Withdraw]) sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ].
	
	^ totalDepositsValue - totalWithdrawsValue.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'G.L.S. 5/17/2021 20:41:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'G.L.S. 5/17/2021 20:41:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'G.L.S. 5/17/2021 20:41:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'G.L.S. 5/17/2021 20:41:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'G.L.S. 5/17/2021 20:41:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'G.L.S. 5/17/2021 20:41:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'G.L.S. 5/17/2021 20:41:05'!
PASSED!

TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'G.L.S. 5/17/2021 20:42:51'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Object subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'G.L.S. 5/17/2021 20:43:06'!
Object subclass: #Portfolio
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/17/2021 20:44:12'!
test01! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/17/2021 20:52:22' prior: 50860141!
test01

	|portfolioTester|
	
	portfolioTester := Portfolio new.! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/17/2021 20:53:44' prior: 50860145!
test01

	|portfolioTester|
	
	portfolioTester := Portfolio new.
	
	self assert: 0 equals: portfolioTester balance.! !

!testRun: #PortfolioTest #test01 stamp: 'G.L.S. 5/17/2021 20:53:47'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/17/2021 20:54:04'!
balance
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/17/2021 20:54:26' prior: 50860159!
balance
	^0.! !

!testRun: #PortfolioTest #test01 stamp: 'G.L.S. 5/17/2021 20:54:28'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'G.L.S. 5/17/2021 20:54:28'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/17/2021 20:57:56'!
test02

	|portfolioTester|
	
	portfolioTester := Portfolio new.
	
	self assert: 0 equals: portfolioTester balance.! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/17/2021 20:58:14' prior: 50860172!
test02

	|portfolioTester account|
	
	portfolioTester := Portfolio new.
	
	account := ReceptiveAccount 
	
	self assert: 0 equals: portfolioTester balance.! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/17/2021 20:58:42' prior: 50860179!
test02

	|portfolioTester account|
	
	portfolioTester := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	self assert: 0 equals: portfolioTester balance.! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/17/2021 20:58:51' prior: 50860187!
test02

	|portfolioTester account|
	
	portfolioTester := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	self assert: 100 equals: portfolioTester balance.! !

!testRun: #PortfolioTest #test02 stamp: 'G.L.S. 5/17/2021 20:58:54'!
FAILURE!

!testRun: #PortfolioTest #test02 stamp: 'G.L.S. 5/17/2021 20:59:00'!
FAILURE!

!testRun: #PortfolioTest #test02 stamp: 'G.L.S. 5/17/2021 20:59:38'!
FAILURE!

!testRun: #PortfolioTest #test02 stamp: 'G.L.S. 5/17/2021 20:59:41'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'G.L.S. 5/17/2021 20:59:41'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'G.L.S. 5/17/2021 20:59:41'!
FAILURE!

!testRun: #PortfolioTest #test02 stamp: 'G.L.S. 5/17/2021 20:59:41'!
FAILURE!

!testRun: #PortfolioTest #test02 stamp: 'G.L.S. 5/17/2021 20:59:46'!
FAILURE!

!testRun: #PortfolioTest #test02 stamp: 'G.L.S. 5/17/2021 21:00:10'!
FAILURE!
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/17/2021 21:01:20' prior: 50860196!
test02

	|portfolioTester account|
	
	portfolioTester := Portfolio new.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	portfolioTester addAccount: account.
	
	self assert: 100 equals: portfolioTester balance.! !

!testRun: #PortfolioTest #test02 stamp: 'G.L.S. 5/17/2021 21:01:25'!
ERROR!
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/17/2021 21:02:13'!
addAccount: aReceptiveAccount 
	self shouldBeImplemented.! !

Object subclass: #Portfolio
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'G.L.S. 5/17/2021 21:09:31'!
Object subclass: #Portfolio
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/17/2021 21:10:05' prior: 50860241!
addAccount: aReceptiveAccount 
	account := aReceptiveAccount! !
!Portfolio methodsFor: 'balance' stamp: 'G.L.S. 5/17/2021 21:42:59' prior: 50860164!
balance
	^account balance.! !

!testRun: #PortfolioTest #test02 stamp: 'G.L.S. 5/17/2021 21:43:03'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'G.L.S. 5/17/2021 21:43:07'!
ERROR!

!testRun: #PortfolioTest #test02 stamp: 'G.L.S. 5/17/2021 21:43:07'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'G.L.S. 5/17/2021 21:43:07'!
ERROR!
!Portfolio methodsFor: 'balance' stamp: 'G.L.S. 5/17/2021 21:45:16' prior: 50860263!
balance
	^account isNil ifTrue:[0] ifFalse:[account balance].! !

!testRun: #PortfolioTest #test01 stamp: 'G.L.S. 5/17/2021 21:45:29'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'G.L.S. 5/17/2021 21:45:29'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'G.L.S. 5/17/2021 21:45:40'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'G.L.S. 5/17/2021 21:45:40'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/17/2021 21:46:30'!
test03

	|portfolioTester account1 account2|
	
	portfolioTester := Portfolio new.
	
	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 100 on: account2.
	
	portfolioTester addAccount: account1.
	portfolioTester addAccount: account2.
	
	self assert: 200 equals: portfolioTester balance.! !

!testRun: #PortfolioTest #test03 stamp: 'G.L.S. 5/17/2021 21:46:36'!
FAILURE!

Object subclass: #Portfolio
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Object subclass: #Portfolio
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'G.L.S. 5/17/2021 21:49:26'!
Object subclass: #Portfolio
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'G.L.S. 5/17/2021 21:49:49'!
Object subclass: #Portfolio
	instanceVariableNames: 'accounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/17/2021 21:49:49' prior: 50860258!
addAccount: aReceptiveAccount 
	accounts := aReceptiveAccount! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/17/2021 21:49:49' prior: 50860277!
balance
	^accounts isNil ifTrue:[0] ifFalse:[accounts balance].! !
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/17/2021 21:49:58' prior: 50860333!
addAccount: aReceptiveAccount 
	accounts add: aReceptiveAccount! !
!Portfolio class methodsFor: 'initialization' stamp: 'G.L.S. 5/17/2021 21:50:40' overrides: 16783533!
new
	^Portfolio new initialize.! !
!Portfolio methodsFor: 'initialization' stamp: 'G.L.S. 5/17/2021 21:51:07' overrides: 16896425!
initialize
	accounts := OrderedCollection new.! !
!Portfolio class methodsFor: 'initialization' stamp: 'G.L.S. 5/17/2021 21:52:05' overrides: 16883149!
initialize
	^Portfolio new initialize.! !

!methodRemoval: Portfolio class #initialize stamp: 'G.L.S. 5/17/2021 21:52:14'!
initialize
	^Portfolio new initialize.!
!Portfolio class methodsFor: 'initialization' stamp: 'G.L.S. 5/17/2021 21:52:43'!
createNew

	^Portfolio new initialize.! !

!methodRemoval: Portfolio class #new stamp: 'G.L.S. 5/17/2021 21:52:48'!
new
	^Portfolio new initialize.!
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/17/2021 21:53:11' prior: 50860150!
test01

	|portfolioTester|
	
	portfolioTester := Portfolio createNew.
	
	self assert: 0 equals: portfolioTester balance.! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/17/2021 21:53:22' prior: 50860228!
test02

	|portfolioTester account|
	
	portfolioTester := Portfolio createNew .
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	portfolioTester addAccount: account.
	
	self assert: 100 equals: portfolioTester balance.! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/17/2021 21:53:24' prior: 50860384!
test02

	|portfolioTester account|
	
	portfolioTester := Portfolio createNew.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	portfolioTester addAccount: account.
	
	self assert: 100 equals: portfolioTester balance.! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/17/2021 21:53:33' prior: 50860292!
test03

	|portfolioTester account1 account2|
	
	portfolioTester := Portfolio createNew.
	
	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 100 on: account2.
	
	portfolioTester addAccount: account1.
	portfolioTester addAccount: account2.
	
	self assert: 200 equals: portfolioTester balance.! !
!Portfolio methodsFor: 'balance' stamp: 'G.L.S. 5/17/2021 21:55:06' prior: 50860339!
balance
	^accounts sum: [:aPortfolioElement | aPortfolioElement balance] ifEmpty: [0].! !

!testRun: #PortfolioTest #test01 stamp: 'G.L.S. 5/17/2021 21:55:10'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'G.L.S. 5/17/2021 21:55:10'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'G.L.S. 5/17/2021 21:55:10'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'G.L.S. 5/17/2021 21:58:03' prior: 50860075!
balance
	
	"|totalDepositsValue totalWithdrawsValue|
	
	totalDepositsValue := (transactions select: [:aTransaction | aTransaction class = Deposit]) sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ].
	totalWithdrawsValue := (transactions select: [:aTransaction | aTransaction class = Withdraw]) sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ].
	
	^ totalDepositsValue - totalWithdrawsValue."
	
	|total|
	
	total := 0.
	
	transactions do: [:aTransaction | aTransaction xxx: total].
	
	^total.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'G.L.S. 5/17/2021 21:59:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'G.L.S. 5/17/2021 21:59:20'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'G.L.S. 5/17/2021 21:59:20'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'G.L.S. 5/17/2021 21:59:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'G.L.S. 5/17/2021 21:59:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'G.L.S. 5/17/2021 21:59:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'G.L.S. 5/17/2021 21:59:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'G.L.S. 5/17/2021 21:59:26'!
ERROR!
!AccountTransaction methodsFor: 'private' stamp: 'G.L.S. 5/17/2021 21:59:56'!
xxx: aSmallInteger 
	self shouldBeImplemented.! !
!AccountTransaction methodsFor: 'private' stamp: 'G.L.S. 5/17/2021 22:00:27' prior: 50860484!
xxx: aTotal
	self subclassResponsibility.! !

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'G.L.S. 5/17/2021 22:00:28'!
ERROR!
!Deposit methodsFor: 'nil' stamp: 'G.L.S. 5/17/2021 22:00:57' overrides: 50860489!
xxx: aTotal! !
!Withdraw methodsFor: 'private' stamp: 'G.L.S. 5/17/2021 22:01:47' overrides: 50860489!
xxx: aTotal! !
!Deposit methodsFor: 'private' stamp: 'G.L.S. 5/17/2021 22:01:57' prior: 50860497 overrides: 50860489!
xxx: aTotal
	
	! !
!Deposit methodsFor: 'private' stamp: 'G.L.S. 5/17/2021 22:02:05' prior: 50860505 overrides: 50860489!
xxx: aTotal! !
!Deposit methodsFor: 'private' stamp: 'G.L.S. 5/17/2021 22:02:28' prior: 50860509 overrides: 50860489!
xxx: aTotal
	
	^aTotal + value.! !
!Withdraw methodsFor: 'private' stamp: 'G.L.S. 5/17/2021 22:02:50' prior: 50860501 overrides: 50860489!
xxx: aTotal
	
	^aTotal - value.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'G.L.S. 5/17/2021 22:03:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'G.L.S. 5/17/2021 22:03:05'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'G.L.S. 5/17/2021 22:03:05'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'G.L.S. 5/17/2021 22:03:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'G.L.S. 5/17/2021 22:03:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'G.L.S. 5/17/2021 22:03:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'G.L.S. 5/17/2021 22:03:05'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'G.L.S. 5/17/2021 22:03:11'!
FAILURE!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'G.L.S. 5/17/2021 22:03:11'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'G.L.S. 5/17/2021 22:03:29' prior: 50860434!
balance
	
	"|totalDepositsValue totalWithdrawsValue|
	
	totalDepositsValue := (transactions select: [:aTransaction | aTransaction class = Deposit]) sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ].
	totalWithdrawsValue := (transactions select: [:aTransaction | aTransaction class = Withdraw]) sum: [ :aTransaction | aTransaction value ] ifEmpty: [ 0 ].
	
	^ totalDepositsValue - totalWithdrawsValue."
	
	|total|
	
	total := 0.
	
	transactions do: [:aTransaction | total := aTransaction xxx: total].
	
	^total.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'G.L.S. 5/17/2021 22:03:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'G.L.S. 5/17/2021 22:03:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'G.L.S. 5/17/2021 22:03:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'G.L.S. 5/17/2021 22:03:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'G.L.S. 5/17/2021 22:03:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'G.L.S. 5/17/2021 22:03:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'G.L.S. 5/17/2021 22:03:51'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'G.L.S. 5/17/2021 22:04:13' prior: 50860558!
balance
	
	|total|
	
	total := 0.
	
	transactions do: [:aTransaction | total := aTransaction xxx: total].
	
	^total.! !

----QUIT----(17 May 2021 22:04:42) CuisUniversity-4532.image priorSource: 16885703!

----STARTUP---- (20 May 2021 20:12:52) as /media/Datos/Cuis/Ej-Portfolio1/linux64/CuisUniversity-4532.image!


!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'G.L.S. 5/20/2021 20:14:54'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'G.L.S. 5/20/2021 20:14:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'G.L.S. 5/20/2021 20:14:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'G.L.S. 5/20/2021 20:14:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'G.L.S. 5/20/2021 20:14:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'G.L.S. 5/20/2021 20:14:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'G.L.S. 5/20/2021 20:14:55'!
PASSED!
!AccountTransaction methodsFor: 'private' stamp: 'G.L.S. 5/20/2021 20:16:36'!
performOperationOnBalance: aTotal
	self subclassResponsibility.! !
!Withdraw methodsFor: 'private' stamp: 'G.L.S. 5/20/2021 20:16:36' overrides: 50860645!
performOperationOnBalance: aTotal
	
	^aTotal - value.! !
!Deposit methodsFor: 'private' stamp: 'G.L.S. 5/20/2021 20:16:36' overrides: 50860645!
performOperationOnBalance: aTotal
	
	^aTotal + value.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/20/2021 20:16:36' prior: 50860605!
balance
	
	|total|
	
	total := 0.
	
	transactions do: [:aTransaction | total := aTransaction performOperationOnBalance: total].
	
	^total.! !

!methodRemoval: AccountTransaction #xxx: stamp: 'G.L.S. 5/20/2021 20:16:36'!
xxx: aTotal
	self subclassResponsibility.!

!methodRemoval: Withdraw #xxx: stamp: 'G.L.S. 5/20/2021 20:16:37'!
xxx: aTotal
	
	^aTotal - value.!

!methodRemoval: Deposit #xxx: stamp: 'G.L.S. 5/20/2021 20:16:37'!
xxx: aTotal
	
	^aTotal + value.!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'G.L.S. 5/20/2021 20:16:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'G.L.S. 5/20/2021 20:16:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'G.L.S. 5/20/2021 20:16:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'G.L.S. 5/20/2021 20:16:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'G.L.S. 5/20/2021 20:16:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'G.L.S. 5/20/2021 20:16:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'G.L.S. 5/20/2021 20:16:41'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'G.L.S. 5/20/2021 20:17:04'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/20/2021 20:21:00'!
test04

	|portfolioTester portfolioTester2 account1 account2|
	
	portfolioTester := Portfolio createNew.
	
	portfolioTester2 := Portfolio createNew.
	
	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 100 on: account2.
	
	portfolioTester addAccount: account1.
	portfolioTester2 addAccount: account2.
	
	portfolioTester addAccount: portfolioTester2.
	
	self assert: 200 equals: portfolioTester balance.! !

!testRun: #PortfolioTest #test04 stamp: 'G.L.S. 5/20/2021 20:21:50'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'G.L.S. 5/20/2021 20:21:50'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'G.L.S. 5/20/2021 20:21:50'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'G.L.S. 5/20/2021 20:21:50'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'G.L.S. 5/20/2021 20:21:50'!
PASSED!

!methodRemoval: PortfolioTest #test04 stamp: 'G.L.S. 5/20/2021 20:22:10'!
test04

	|portfolioTester portfolioTester2 account1 account2|
	
	portfolioTester := Portfolio createNew.
	
	portfolioTester2 := Portfolio createNew.
	
	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 100 on: account2.
	
	portfolioTester addAccount: account1.
	portfolioTester2 addAccount: account2.
	
	portfolioTester addAccount: portfolioTester2.
	
	self assert: 200 equals: portfolioTester balance.!
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/20/2021 20:27:13'!
test04

	|portfolioTester|
	
	portfolioTester := Portfolio createNew.
	
	self assert: 0 equals: portfolioTester transactions.! !

pepe := ReceptiveAccount  new.!

pepe transactions .!

pepe transactions isEmpty .!

pepe transactions isEmpty.!

pepe transactions = OrderedCollection new.!
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/20/2021 20:28:53' prior: 50860756!
test04

	|portfolioTester|
	
	portfolioTester := Portfolio createNew.
	
	self assert: OrderedCollection new equals: portfolioTester transactions.! !

!testRun: #PortfolioTest #test04 stamp: 'G.L.S. 5/20/2021 20:29:07'!
ERROR!
!Portfolio methodsFor: 'transactions' stamp: 'G.L.S. 5/20/2021 20:29:35'!
transactions
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'transactions' stamp: 'G.L.S. 5/20/2021 20:29:49' prior: 50860778!
transactions
	^OrderedCollection new.! !

!testRun: #PortfolioTest #test04 stamp: 'G.L.S. 5/20/2021 20:29:55'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'G.L.S. 5/20/2021 20:29:55'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'G.L.S. 5/20/2021 20:29:55'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'G.L.S. 5/20/2021 20:29:55'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'G.L.S. 5/20/2021 20:29:55'!
PASSED!

Deposit register: 100 on: pepe.!

pepe transactions.!

pepe transactions includes: [:aTransaction | ]!

pepe transactions includes: (Deposit)!
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/20/2021 20:32:05'!
test05

	|portfolioTester account|
	
	portfolioTester := Portfolio createNew.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	portfolioTester addAccount: account.
	
	self assert: 100 equals: portfolioTester balance.! !

----End fileIn of /media/Datos/Cuis/Ej-Portfolio1/linux64/Packages/TerseGuide.pck.st----!

pepe transactions!

pepe transactions select: [:t | t value = 100 and: [t class = Deposit ]].!

pepe transactions select: [:t | t value = 100 and: [t class = Deposit ]] isEmpty.!

(pepe transactions select: [:t | t value = 100 and: [t class = Deposit ]]) isEmpty.!

pepe := ReceptiveAccount  new.!

pepe := ReceptiveAccount  new.!

Withdraw register: 100 on: pepe.!

(pepe transactions select: [:t | t value = 100 and: [t class = Deposit ]]) isEmpty.!

pepe hasRegistered: Deposit.!

pepe hasRegistered: Withdraw .!

pepe hasRegistered: (Withdraw for: 100).!

pepe := ReceptiveAccount  new.!

Withdraw register: 100 on: pepe.!

pepe hasRegistered: (Withdraw for: 100).!

(Withdraw for: 100)!

(Withdraw for: 100)!

pepe!

pepe hasRegistered: (Withdraw for: 100).!

pepe hasRegistered: (Withdraw for: 100).!

pepe hasRegistered: (Withdraw for: 100).!

^ transactions includes: aTransaction!

aTransaction !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/20/2021 20:43:39' prior: 50860804!
test05

	|portfolioTester account deposit|
	
	portfolioTester := Portfolio createNew.
	
	account := ReceptiveAccount  new.
	deposit := Deposit register: 100 on: account.
	
	portfolioTester addAccount: account.
	
	self assert: (portfolioTester hasRegistered: deposit).! !

!testRun: #PortfolioTest #test05 stamp: 'G.L.S. 5/20/2021 20:43:49'!
ERROR!
!Portfolio methodsFor: 'Registrations' stamp: 'G.L.S. 5/20/2021 20:44:17'!
hasRegistered: aDeposit 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'Registrations' stamp: 'G.L.S. 5/20/2021 20:44:29' prior: 50863783!
hasRegistered: aDeposit 
	^true.! !

!testRun: #PortfolioTest #test05 stamp: 'G.L.S. 5/20/2021 20:44:33'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'G.L.S. 5/20/2021 20:44:33'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'G.L.S. 5/20/2021 20:44:33'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'G.L.S. 5/20/2021 20:44:33'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'G.L.S. 5/20/2021 20:44:33'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'G.L.S. 5/20/2021 20:44:33'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/20/2021 20:45:42'!
test06

	|portfolioTester account1 account2 withdraw|
	
	portfolioTester := Portfolio createNew.
	
	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	
	account2 := ReceptiveAccount  new.
	withdraw := Withdraw register: 100 on: account2.
	
	portfolioTester addAccount: account1.
	
	self deny: (portfolioTester hasRegistered: withdraw).! !

!testRun: #PortfolioTest #test06 stamp: 'G.L.S. 5/20/2021 20:45:46'!
FAILURE!
!Portfolio methodsFor: 'Registrations' stamp: 'G.L.S. 5/20/2021 20:47:28' prior: 50863788!
hasRegistered: aDeposit 
	^true.! !

!methodRemoval: PortfolioTest #test06 stamp: 'G.L.S. 5/20/2021 20:49:45'!
test06

	|portfolioTester account1 account2 withdraw|
	
	portfolioTester := Portfolio createNew.
	
	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	
	account2 := ReceptiveAccount  new.
	withdraw := Withdraw register: 100 on: account2.
	
	portfolioTester addAccount: account1.
	
	self deny: (portfolioTester hasRegistered: withdraw).!

!methodRemoval: PortfolioTest #test05 stamp: 'G.L.S. 5/20/2021 20:49:58'!
test05

	|portfolioTester account deposit|
	
	portfolioTester := Portfolio createNew.
	
	account := ReceptiveAccount  new.
	deposit := Deposit register: 100 on: account.
	
	portfolioTester addAccount: account.
	
	self assert: (portfolioTester hasRegistered: deposit).!

!testRun: #PortfolioTest #test04 stamp: 'G.L.S. 5/20/2021 20:50:02'!
PASSED!
!Portfolio methodsFor: 'Registrations' stamp: 'G.L.S. 5/20/2021 20:50:10' prior: 50863824!
hasRegistered: aDeposit 
	! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/20/2021 20:50:27'!
test05

	|portfolioTester|
	
	portfolioTester := Portfolio createNew.
	
	self assert: OrderedCollection new equals: portfolioTester transactions.! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/20/2021 20:50:56' prior: 50863859!
test05

	|portfolioTester account|
	
	portfolioTester := Portfolio createNew.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	portfolioTester addAccount: account.
	
	self assert: 100 equals: portfolioTester balance.! !

pepe transactions !

pepe transactions size.!
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/20/2021 20:51:38' prior: 50863867!
test05

	|portfolioTester account|
	
	portfolioTester := Portfolio createNew.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	portfolioTester addAccount: account.
	
	self assert: 1 equals: portfolioTester transactions size.! !

!testRun: #PortfolioTest #test05 stamp: 'G.L.S. 5/20/2021 20:51:56'!
FAILURE!
!Portfolio methodsFor: 'transactions' stamp: 'G.L.S. 5/20/2021 20:54:05' prior: 50860783!
transactions
	^(OrderedCollection new) add: 1.! !

!testRun: #PortfolioTest #test01 stamp: 'G.L.S. 5/20/2021 20:54:09'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'G.L.S. 5/20/2021 20:54:09'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'G.L.S. 5/20/2021 20:54:09'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'G.L.S. 5/20/2021 20:54:09'!
FAILURE!

!testRun: #PortfolioTest #test05 stamp: 'G.L.S. 5/20/2021 20:54:09'!
ERROR!

!testRun: #PortfolioTest #test04 stamp: 'G.L.S. 5/20/2021 20:54:30'!
FAILURE!

!testRun: #PortfolioTest #test04 stamp: 'G.L.S. 5/20/2021 20:54:30'!
FAILURE!

!testRun: #PortfolioTest #test05 stamp: 'G.L.S. 5/20/2021 20:54:36'!
ERROR!

!testRun: #PortfolioTest #test05 stamp: 'G.L.S. 5/20/2021 20:54:36'!
ERROR!
!Portfolio methodsFor: 'transactions' stamp: 'G.L.S. 5/20/2021 20:54:52' prior: 50863893!
transactions
	^OrderedCollection new.! !

carlos _ OrderedCollection new.!

pepe2 _ 	OrderedCollection new.!

pepe2 _ 	OrderedCollection new.!

pepe2 addAll: #(1 2 3 4 5 6).!

pepe2.!

carlos addAll: pepe2.!

carlos addAll: pepe2.!

carlos addAll: pepe2.!

carlos.!

carlos _ OrderedCollection new.!

carlos addAll: pepe2.!

carlos.!
!Portfolio methodsFor: 'transactions' stamp: 'G.L.S. 5/20/2021 20:58:31' prior: 50863920!
transactions
	|totalTransactions|
	
	totalTransactions := OrderedCollection new.
	
	accounts do: [:anAccount | totalTransactions addAll: anAccount transactions].
	
	^totalTransactions .! !
!Portfolio methodsFor: 'transactions' stamp: 'G.L.S. 5/20/2021 20:58:37' prior: 50863934!
transactions
	|totalTransactions|
	
	totalTransactions := OrderedCollection new.
	
	accounts do: [:anAccount | totalTransactions addAll: anAccount transactions].
	
	^totalTransactions.! !

!testRun: #PortfolioTest #test05 stamp: 'G.L.S. 5/20/2021 21:00:45'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'G.L.S. 5/20/2021 21:00:49'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'G.L.S. 5/20/2021 21:00:49'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'G.L.S. 5/20/2021 21:00:49'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'G.L.S. 5/20/2021 21:00:49'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'G.L.S. 5/20/2021 21:00:49'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/20/2021 21:01:50'!
test06

	|portfolioTester account|
	
	portfolioTester := Portfolio createNew.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	portfolioTester addAccount: account.
	
	self assert: account transactions equals: portfolioTester transactions.! !

!testRun: #PortfolioTest #test06 stamp: 'G.L.S. 5/20/2021 21:01:52'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'G.L.S. 5/20/2021 21:01:52'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'G.L.S. 5/20/2021 21:01:52'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'G.L.S. 5/20/2021 21:01:52'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'G.L.S. 5/20/2021 21:01:52'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'G.L.S. 5/20/2021 21:01:52'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'G.L.S. 5/20/2021 21:01:52'!
PASSED!

!methodRemoval: PortfolioTest #test06 stamp: 'G.L.S. 5/20/2021 21:01:59'!
test06

	|portfolioTester account|
	
	portfolioTester := Portfolio createNew.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	portfolioTester addAccount: account.
	
	self assert: account transactions equals: portfolioTester transactions.!
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/20/2021 21:02:16'!
test06

	|portfolioTester account|
	
	portfolioTester := Portfolio createNew.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	Deposit register: 100 on: account.
	Deposit register: 100 on: account.
	Deposit register: 100 on: account.
	
	portfolioTester addAccount: account.
	
	self assert: 1 equals: portfolioTester transactions size.! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/20/2021 21:02:19' prior: 50864005!
test06

	|portfolioTester account|
	
	portfolioTester := Portfolio createNew.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	Deposit register: 100 on: account.
	Deposit register: 100 on: account.
	Deposit register: 100 on: account.
	
	portfolioTester addAccount: account.
	
	self assert: 4 equals: portfolioTester transactions size.! !

!testRun: #PortfolioTest #test06 stamp: 'G.L.S. 5/20/2021 21:02:22'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'G.L.S. 5/20/2021 21:02:22'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'G.L.S. 5/20/2021 21:02:22'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'G.L.S. 5/20/2021 21:02:22'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'G.L.S. 5/20/2021 21:02:22'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'G.L.S. 5/20/2021 21:02:22'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'G.L.S. 5/20/2021 21:02:22'!
PASSED!

!methodRemoval: PortfolioTest #test06 stamp: 'G.L.S. 5/20/2021 21:02:29'!
test06

	|portfolioTester account|
	
	portfolioTester := Portfolio createNew.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	Deposit register: 100 on: account.
	Deposit register: 100 on: account.
	Deposit register: 100 on: account.
	
	portfolioTester addAccount: account.
	
	self assert: 4 equals: portfolioTester transactions size.!
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/20/2021 21:02:48'!
test06

	|portfolioTester account|
	
	portfolioTester := Portfolio createNew.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	Deposit register: 100 on: account.
	Deposit register: 100 on: account.
	Deposit register: 100 on: account.
	
	portfolioTester addAccount: account.
	
	self assert: 1 equals: portfolioTester transactions size.! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/20/2021 21:03:01' prior: 50864065!
test06

	|portfolioTester account|
	
	portfolioTester := Portfolio createNew.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	Deposit register: 100 on: account.
	Deposit register: 100 on: account.
	Deposit register: 100 on: account.
	
	portfolioTester addAccount: account.
	
	self assert: account transactions equals: portfolioTester transactions.! !

!testRun: #PortfolioTest #test06 stamp: 'G.L.S. 5/20/2021 21:03:03'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'G.L.S. 5/20/2021 21:03:03'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'G.L.S. 5/20/2021 21:03:03'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'G.L.S. 5/20/2021 21:03:03'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'G.L.S. 5/20/2021 21:03:03'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'G.L.S. 5/20/2021 21:03:03'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'G.L.S. 5/20/2021 21:03:03'!
PASSED!

!methodRemoval: PortfolioTest #test06 stamp: 'G.L.S. 5/20/2021 21:03:08'!
test06

	|portfolioTester account|
	
	portfolioTester := Portfolio createNew.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	Deposit register: 100 on: account.
	Deposit register: 100 on: account.
	Deposit register: 100 on: account.
	
	portfolioTester addAccount: account.
	
	self assert: account transactions equals: portfolioTester transactions.!
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/20/2021 21:03:30' prior: 50863879!
test05

	|portfolioTester account|
	
	portfolioTester := Portfolio createNew.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	portfolioTester addAccount: account.
	
	self assert: account transactions equals: portfolioTester transactions.! !

!testRun: #PortfolioTest #test05 stamp: 'G.L.S. 5/20/2021 21:03:40'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'G.L.S. 5/20/2021 21:03:40'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'G.L.S. 5/20/2021 21:03:40'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'G.L.S. 5/20/2021 21:03:40'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'G.L.S. 5/20/2021 21:03:40'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'G.L.S. 5/20/2021 21:03:40'!
PASSED!

----QUIT----(20 May 2021 21:55:31) CuisUniversity-4532.image priorSource: 16926743!

----STARTUP---- (23 May 2021 18:41:13) as /media/Datos/Cuis/Ej-Portfolio1/linux64/CuisUniversity-4532.image!


----QUIT----(23 May 2021 18:42:25) CuisUniversity-4532.image priorSource: 17040032!

----STARTUP---- (23 May 2021 18:42:29) as /media/Datos/Cuis/Ej-Portfolio1/linux64/CuisUniversity-4532.image!


!testRun: #PortfolioTest #test05 stamp: 'G.L.S. 5/23/2021 18:42:54'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'G.L.S. 5/23/2021 18:42:54'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'G.L.S. 5/23/2021 18:42:54'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'G.L.S. 5/23/2021 18:42:54'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'G.L.S. 5/23/2021 18:42:54'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'G.L.S. 5/23/2021 18:42:54'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/23/2021 18:44:11'!
test06

	|portfolioTester account deposit|
	
	portfolioTester := Portfolio createNew.
	
	account := ReceptiveAccount  new.
	deposit := Deposit register: 100 on: account.
	
	portfolioTester addAccount: account.
	
	self assert: true equals: (portfolioTester hasRegistered: deposit).! !

!testRun: #PortfolioTest #test05 stamp: 'G.L.S. 5/23/2021 18:44:44'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'G.L.S. 5/23/2021 18:48:14'!
FAILURE!
!Portfolio methodsFor: 'Registrations' stamp: 'G.L.S. 5/23/2021 18:48:39' prior: 50863855!
hasRegistered: aDeposit
	^true
	! !

!testRun: #PortfolioTest #test06 stamp: 'G.L.S. 5/23/2021 18:48:42'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'G.L.S. 5/23/2021 18:48:42'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'G.L.S. 5/23/2021 18:48:42'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'G.L.S. 5/23/2021 18:48:42'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'G.L.S. 5/23/2021 18:48:42'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'G.L.S. 5/23/2021 18:48:42'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'G.L.S. 5/23/2021 18:48:42'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/23/2021 18:49:35'!
test07

	|portfolioTester account account2 deposit|
	
	portfolioTester := Portfolio createNew.
	
	account := ReceptiveAccount  new.
	account2 := ReceptiveAccount  new.
	deposit := Deposit register: 100 on: account2.
	
	portfolioTester addAccount: account.
	
	self deny: (portfolioTester hasRegistered: deposit).! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/23/2021 18:49:44' prior: 50864179!
test06

	|portfolioTester account deposit|
	
	portfolioTester := Portfolio createNew.
	
	account := ReceptiveAccount  new.
	deposit := Deposit register: 100 on: account.
	
	portfolioTester addAccount: account.
	
	self assert: (portfolioTester hasRegistered: deposit).! !

!testRun: #PortfolioTest #test06 stamp: 'G.L.S. 5/23/2021 18:49:46'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'G.L.S. 5/23/2021 18:49:46'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'G.L.S. 5/23/2021 18:49:46'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'G.L.S. 5/23/2021 18:49:46'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'G.L.S. 5/23/2021 18:49:46'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'G.L.S. 5/23/2021 18:49:46'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'G.L.S. 5/23/2021 18:49:46'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'G.L.S. 5/23/2021 18:49:46'!
FAILURE!

!testRun: #PortfolioTest #test07 stamp: 'G.L.S. 5/23/2021 18:49:46'!
FAILURE!

!testRun: #PortfolioTest #test06 stamp: 'G.L.S. 5/23/2021 18:50:01'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'G.L.S. 5/23/2021 18:50:09'!
FAILURE!

pepe!

pepe _ OrderedCollection new.!

pepe add:3.!

pepe add:3.!

pepe add:3.!

pepe add:3.!

pepe add:3.!

pepe add:3.!

pepe add:3.!

pepe add:3.!

pepe add:3.!

pepe add:2.!

pepe anySatisfy: [:elem | elem even].!

pepe _ OrderedCollection new.!

pepe _ OrderedCollection new.!

pepe _ OrderedCollection new.!

pepe _ OrderedCollection new.!

pepe _ OrderedCollection new.!

pepe _ OrderedCollection new.!

pepe _ OrderedCollection new.!

pepe _ OrderedCollection new.!

pepe _ OrderedCollection new.!

pepe _ OrderedCollection new.!

pepe add:3.!

pepe add:3.!

pepe add:3.!

pepe add:3.!

pepe add:3.!

pepe add:3.!

pepe add:3.!

pepe add:3.!

pepe add:3.!

pepe add:3.!

pepe anySatisfy: [:elem | elem even].!
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 18:53:02' prior: 50860345!
addAccount: aReceptiveAccount
	accounts add: aReceptiveAccount! !
!Portfolio methodsFor: 'Registrations' stamp: 'G.L.S. 5/23/2021 18:57:19' prior: 50864196!
hasRegistered: aTransaction
	^ accounts anySatisfy: [:aPortfolioElement | aPortfolioElement hasRegistered: aTransaction].
	! !

!testRun: #PortfolioTest #test07 stamp: 'G.L.S. 5/23/2021 18:57:23'!
PASSED!

!testRun: #PortfolioTest #test01 stamp: 'G.L.S. 5/23/2021 18:57:23'!
PASSED!

!testRun: #PortfolioTest #test02 stamp: 'G.L.S. 5/23/2021 18:57:23'!
PASSED!

!testRun: #PortfolioTest #test03 stamp: 'G.L.S. 5/23/2021 18:57:23'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'G.L.S. 5/23/2021 18:57:23'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'G.L.S. 5/23/2021 18:57:23'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'G.L.S. 5/23/2021 18:57:23'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'G.L.S. 5/23/2021 18:57:23'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/23/2021 18:58:39'!
test01BalanceOfEmptyPortfolioEquals0

	|portfolioTester|
	
	portfolioTester := Portfolio createNew.
	
	self assert: 0 equals: portfolioTester balance.! !

!methodRemoval: PortfolioTest #test01 stamp: 'G.L.S. 5/23/2021 18:58:48'!
test01

	|portfolioTester|
	
	portfolioTester := Portfolio createNew.
	
	self assert: 0 equals: portfolioTester balance.!
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/23/2021 18:59:25'!
test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance

	|portfolioTester account|
	
	portfolioTester := Portfolio createNew.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	portfolioTester addAccount: account.
	
	self assert: 100 equals: portfolioTester balance.! !
!RedTest methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/23/2021 18:59:25' prior: 50854522!
test08WhenATestIsAddedIsNotDoingTDD
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false.' in: #TestSomething.
		self runTest: #test01 class: #TestSomething.
		self compileMethod: 'test02 self assert: false.' in: #TestSomething. ].
		
	result _ tddGuru run.
		
	self assert: tddGuru currentState equals: NotDoingTDD.
	self assert: result hasErrorWithDescription: (TDDGuru testAddedErrorMessage: #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance class: #TestSomething).! !
!MoreThanOneTestWrittenTest methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/23/2021 18:59:25' prior: 50853458!
test05WhenAMethodIsRemovedIsNotDoingTDD
	| result |
	
	self newClassNamed: #ModelClass subclassOf: Object.
	self compileMethod: 'm1 ^ 1' in: #ModelClass.

	self logChangesWhile: [
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false' in: #TestClassA.
		self compileMethod: 'test02 self assert: false' in: #TestClassA.
		self removeMethodWithSelector: #m1 from:  #ModelClass.
	].

	result := tddGuru run.
	
	self assertCurrentStateIs: NotDoingTDD.
	self assert: result hasNErrors: 1. 
	self assert: result hasErrorWithDescription: (TDDGuru testAddedWhileWritingAnother: #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance class: #TestClassA).! !
!MoreThanOneTestWrittenTest methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/23/2021 18:59:25' prior: 50853371!
test01WhenAClassIsRemovedIsNotDoingTDD
	| result |	
	
	self newClassNamed: #Something subclassOf: Object.

	self logChangesWhile: [
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false' in: #TestClassA.
		self compileMethod: 'test02 self assert: false' in: #TestClassA.
		self removeClass: #Something.
	].

	result := tddGuru run.
	
	self assert: result hasNErrors: 1.
	self assert: result hasErrorWithDescription: (TDDGuru testAddedWhileWritingAnother: #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance class: #TestClassA).
	self assertCurrentStateIs: NotDoingTDD.
	! !
!MoreThanOneTestWrittenTest methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/23/2021 18:59:25' prior: 50853412!
test03WhenTheFirstOfTheTestsIsRemovedIsBackToWritingAFailingTest
	| result |

	self logChangesWhile: [
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false' in: #TestClassA.
		self compileMethod: 'test02 self assert: false' in: #TestClassA.
		self removeMethodWithSelector: #test01 from:  #TestClassA.
	].

	result := tddGuru run.
	
	self assertHasNoErrors: result.
	self assertCurrentStateIs: WritingAFailingTest.
	self assert: tddGuru currentState currentTest selector equals: #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance
	! !
!MoreThanOneTestWrittenTest methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/23/2021 18:59:25' prior: 50853504!
test07WhenAModelClassIsAddedIsNotDoingTDD
	| result |

	self logChangesWhile: [
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false' in: #TestClassA.
		self compileMethod: 'test02 self assert: false' in: #TestClassA.
		self newClassNamed: #ModelClass subclassOf: Object.
	].

	result := tddGuru run.
	
	self assertCurrentStateIs: NotDoingTDD.
	self assert: result hasNErrors: 1. 
	self assert: result hasErrorWithDescription: (TDDGuru testAddedWhileWritingAnother: #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance class: #TestClassA).
	! !
!MoreThanOneTestWrittenTest methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/23/2021 18:59:25' prior: 50853649!
test14WhenOneOfTheTestsPassesTwoErrorsAreReported
	| result |
	
	self logChangesWhile: [
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: true' in: #TestClassA.
		self compileMethod: 'test02 self assert: true' in: #TestClassA.
		self runTest: #test01 class: #TestClassA.
	].

	result := tddGuru run.
	
	self assertCurrentStateIs: MoreThanOneTestWritten.
	self assert: result hasNErrors: 2.
	self assert: result hasErrorWithDescription: (TDDGuru testDidNotFail: #test01 class: #TestClassA).
	self assert: result hasErrorWithDescription: (TDDGuru testAddedWhileWritingAnother: #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance class: #TestClassA)! !
!RefactorTest methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/23/2021 18:59:25' prior: 50854909!
test13WhenATestIsRemovedIsNoLongerTakenIntoAccount
	| result |
	
	self newClassNamed: #TestClassA subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true' in: #TestClassA.
	self compileMethod: 'test02 self assert: true' in: #TestClassA.
	tddGuru initialTestClasses: { self classNamed: #TestClassA }.
	
	tddGuru initialState: Refactor new.
	
	self logChangesWhile: [ 
		self removeMethodWithSelector: #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance from: #TestClassA.
		self runTest: #test01 class: #TestClassA ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Green.! !
!MoreThanOneTestWrittenTest methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/23/2021 18:59:26' prior: 50853481!
test06WhenAModelMethodIsChangedIsNotDoingTDD
	| result |
	
	self newClassNamed: #ModelClass subclassOf: Object.
	self compileMethod: 'm1 ^ 1' in: #ModelClass.

	self logChangesWhile: [
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false' in: #TestClassA.
		self compileMethod: 'test02 self assert: false' in: #TestClassA.
		self compileMethod: 'm1 ^ 2' in: #ModelClass.
	].

	result := tddGuru run.
	
	self assertCurrentStateIs: NotDoingTDD.
	self assert: result hasNErrors: 1. 
	self assert: result hasErrorWithDescription: (TDDGuru testAddedWhileWritingAnother: #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance class: #TestClassA).! !
!MoreThanOneTestWrittenTest methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/23/2021 18:59:26' prior: 50853546!
test09WhenATestIsAddedIsNotDoingTDD
	| result |
	
	self logChangesWhile: [
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false' in: #TestClassA.
		self compileMethod: 'test02 self assert: false' in: #TestClassA.
		self compileMethod: 'test03 self assert: false' in: #TestClassA.
	].

	result := tddGuru run.
	
	self assertCurrentStateIs: NotDoingTDD.
	self assert: result hasNErrors: 1.
	self assert: result hasErrorWithDescription: (TDDGuru testAddedWhileWritingAnother: #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance class: #TestClassA)! !
!MoreThanOneTestWrittenTest methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/23/2021 18:59:26' prior: 50853629!
test13WhenATestFailsAnErrorIsReportedAndGoesToRed
	| result |
	
	self logChangesWhile: [
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false' in: #TestClassA.
		self compileMethod: 'test02 self assert: false' in: #TestClassA.
		self runTest: #test01 class: #TestClassA
	].

	result := tddGuru run.
	
	self assertCurrentStateIs: Red.
	self assert: result hasNErrors: 1.
	self assert: result hasErrorWithDescription: (TDDGuru testAddedWhileWritingAnother: #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance class: #TestClassA)! !
!GreenTest methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/23/2021 18:59:26' prior: 50853302!
test12WhenATestIsRemovedThenIsRefactoring
	| result |
	
	self newClassNamed: #TestClass subclassOf: TestCase.
	self compileMethod: 'test01 self assert: false' in: #TestClass.
	self compileMethod: 'test02 self assert: false' in: #TestClass.
	tddGuru initialState: Green new.
	tddGuru initialTestClasses: { self classNamed: #TestClass }.
	
	self logChangesWhile: [ self removeMethodWithSelector: #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance from: #TestClass ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Refactor.! !
!MoreThanOneTestWrittenTest methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/23/2021 18:59:26' prior: 50853524!
test08WhenAModelMethodIsAddedIsNotDoingTDD
	| result |
	
	self newClassNamed: #ModelClass subclassOf: Object.

	self logChangesWhile: [
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false' in: #TestClassA.
		self compileMethod: 'test02 self assert: false' in: #TestClassA.
		self compileMethod: 'm1 ^ 1' in: #ModelClass	
	].

	result := tddGuru run.
	
	self assertCurrentStateIs: NotDoingTDD.
	self assert: result hasNErrors: 1.
	self assert: result hasErrorWithDescription: (TDDGuru testAddedWhileWritingAnother: #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance class: #TestClassA)
	! !
!RedTest methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/23/2021 18:59:26' prior: 50854492!
test07WhenAllTestsPassThenIsInGreen
	| result |
	self newClassNamed: #ModelClass subclassOf: Object.
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: (ModelClass new m1) equals: 1.' in: #TestSomething.
		self runTest: #test01 class: #TestSomething.
		self compileMethod: 'm1 ^ 1' in: #ModelClass.
		self runTest: #test01 class: #TestSomething.
		self compileMethod: 'test02 self assert: (ModelClass new m2) equals: 2.' in: #TestSomething.
		self runTest: #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance class: #TestSomething.
		self compileMethod: 'm1 ^ 2' in: #ModelClass.
		self compileMethod: 'm2 ^ 2' in: #ModelClass.
		self runAllTestsOf: #TestSomething.
		self compileMethod: 'm1 ^ 1' in: #ModelClass.
		self runAllTestsOf: #TestSomething ].

	result _ tddGuru run.
	
	self assertHasNoErrors: result.
	self assertCurrentStateIs: Green.! !
!MoreThanOneTestWrittenTest methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/23/2021 18:59:26' prior: 50853432!
test04WhenAnotherTestIsRemovedIsNotDoingTDD
	| result |
	
	self newClassNamed: #TestClassA subclassOf: TestCase.
	self compileMethod: 'test01 self assert: false' in: #TestClassA.
	tddGuru initialTestClasses: { self classNamed: #TestClassA }.

	self logChangesWhile: [
		self newClassNamed: #TestClassB subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false' in: #TestClassB.
		self compileMethod: 'test02 self assert: false' in: #TestClassB.
		self removeMethodWithSelector: #test01 from:  #TestClassA.
	].

	result := tddGuru run.
	
	self assertCurrentStateIs: NotDoingTDD.
	self assert: result hasNErrors: 1. 
	self assert: result hasErrorWithDescription: (TDDGuru testAddedWhileWritingAnother:  #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance class: #TestClassB).! !
!RedTest methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/23/2021 18:59:26' prior: 50854541!
test09WhenATestIsRenamedAndAllTestsPassThenIsInGreen
	| result |
	self newClassNamed: #ModelClass subclassOf: Object.
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: (ModelClass new m1) equals: 1.' in: #TestSomething.
		self runTest: #test01 class: #TestSomething.
		self compileMethod: 'm1 ^ 1' in: #ModelClass.
		self runTest: #test01 class: #TestSomething.
		self compileMethod: 'test02 self assert: (ModelClass new m2) equals: 2.' in: #TestSomething.
		self runTest: #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance class: #TestSomething.
		self compileMethod: 'test02A self assert: (ModelClass new m2) equals: 2.' in: #TestSomething.
		self removeMethodWithSelector: #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance from: #TestSomething.
		self compileMethod: 'm2 ^ 2' in: #ModelClass.
		self runAllTestsOf: #TestSomething ].

	result _ tddGuru run.
	
	self assertHasNoErrors: result.
	self assertCurrentStateIs: Green.! !
!MoreThanOneTestWrittenTest methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/23/2021 18:59:26' prior: 50853392!
test02WhenTheLastOfTheTestsIsRemovedIsBackToWritingAFailingTest
	| result |

	self logChangesWhile: [
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false' in: #TestClassA.
		self compileMethod: 'test02 self assert: false' in: #TestClassA.
		self removeMethodWithSelector: #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance from:  #TestClassA.
	].

	result := tddGuru run.
	
	self assertHasNoErrors: result.
	self assertCurrentStateIs: WritingAFailingTest.
	self assert: tddGuru currentState currentTest selector equals: #test01
	! !
!RedTest methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/23/2021 18:59:26' prior: 50854465!
test06WhenTheNewTestPassesButAnotherTestFailsThenIsStillInRed
	| result |
	
	self logChangesWhile: [ 
		self newClassNamed: #TestSomething subclassOf: TestCase.
		self compileMethod: 'test01 self assert: (ModelClass new m1) equals: 1.' in: #TestSomething.
		self runTest: #test01 class: #TestSomething.
		self newClassNamed: #ModelClass subclassOf: Object. 
		self compileMethod: 'm1 ^ 1' in: #ModelClass.
		self runTest: #test01 class: #TestSomething.
		self compileMethod: 'test02 self assert: (ModelClass new m1) equals: 2.' in: #TestSomething.
		self runTest: #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance class: #TestSomething.
		self compileMethod: 'm1 ^ 2' in: #ModelClass.
		self runAllTestsOf: #TestSomething ].
		
	result _ tddGuru run.
		
	self assertHasNoErrors: result.
	self assert: tddGuru currentState equals: Red.! !
!NotDoingTDDTest methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/23/2021 18:59:26' prior: 50853931!
test13WhenATestIsRemovedIsNoLongerTakenIntoAccount
	
	self newClassNamed: #TestClassA subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true' in: #TestClassA.
	self compileMethod: 'test02 self assert: false' in: #TestClassA.
	tddGuru initialState: NotDoingTDD new.
	tddGuru initialTestClasses: { self classNamed: #TestClassA }.
	
	self logChangesWhile: [ 
		self removeMethodWithSelector: #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance from: #TestClassA.
		self runAllTestsOf: #TestClassA ].
	
	tddGuru run.
	
	self assertCurrentStateIs: Green ! !
!RedTest methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/23/2021 18:59:26' prior: 50854641!
test13WhenAnotherTestIsChangedIsStillInRed
	| result |
	
	self newClassNamed: #TestSomething subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true.' in: #TestSomething.
	tddGuru initialTestClasses: { self classNamed: #TestSomething }.
		
	self logChangesWhile: [ 
		self compileMethod: 'test02 self assert: false.' in: #TestSomething. 
		self runTest: #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance class: #TestSomething.
		self compileMethod: 'test01 self assert: true.' in: #TestSomething. ].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: Red.
	self assertHasNoErrors: result.! !
!WritingAFailingTestTest methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/23/2021 18:59:26' prior: 50855398!
test12WhenADifferentTestIsChangedThenIsNotDoingTDD
	| result |
	
	self newClassNamed: #TestSomethingA subclassOf: TestCase.
	self compileMethod: 'test01 self assert: false' in: #TestSomethingA.
	self compileMethod: 'test02 self assert: false' in: #TestSomethingA.
	tddGuru initialState: (WritingAFailingTest currentTest: (UninstalledMethodReference selector: #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance class: #TestSomethingA)).
	tddGuru initialTestClasses: { self classNamed: #TestSomethingA}.
	
	self logChangesWhile: [ 	
		self compileMethod: 'test01 self assert: true' in: #TestSomethingA.
	].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: NotDoingTDD.
	self assert: result hasNErrors: 1.
	self assert: result hasErrorWithDescription: (TDDGuru testChangedWhileThisTestWasBeingWritten: #test01 in: #TestSomethingA)
	! !
!RedTest methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/23/2021 18:59:26' prior: 50854661!
test14WhenATestIsRemovedResultShouldHaveAnErrorAndIsNotDoingTDD
	| result |
	
	self newClassNamed: #TestSomething subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true.' in: #TestSomething.
	tddGuru initialTestClasses: { self classNamed: #TestSomething }.
		
	self logChangesWhile: [ 
		self compileMethod: 'test02 self assert: false.' in: #TestSomething. 
		self runTest: #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance class: #TestSomething.
		self removeMethodWithSelector: #test01 from: #TestSomething. ].
		
	result _ tddGuru run.
		
	self assertCurrentStateIs: NotDoingTDD.
	self assert: result hasErrorWithDescription: (TDDGuru testRemovedWhileInRed: #test01 class: #TestSomething)! !
!MoreThanOneTestWrittenTest methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/23/2021 18:59:26' prior: 50853566!
test10WhenATestClassIsAddedIsNotDoingTDD
	| result |
	
	self logChangesWhile: [
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: false' in: #TestClassA.
		self compileMethod: 'test02 self assert: false' in: #TestClassA.
		self newClassNamed: #TestClassB subclassOf: TestCase.
	].

	result := tddGuru run.
	
	self assertCurrentStateIs: NotDoingTDD.
	self assert: result hasNErrors: 1.
	self assert: result hasErrorWithDescription: (TDDGuru testAddedWhileWritingAnother: #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance class: #TestClassA)! !
!MoreThanOneTestWrittenTest methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/23/2021 18:59:26' prior: 50853699!
test16WhenOneOfTheTestsIsRenamedIsStillInThisState
	| result |
	
	self logChangesWhile: [
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: true' in: #TestClassA.
		self compileMethod: 'test02 self assert: true' in: #TestClassA.
		self compileMethod: 'test02bla self assert: true' in: #TestClassA.
		self removeMethodWithSelector: #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance from: #TestClassA.
	].

	result := tddGuru run.
	
	self assertCurrentStateIs: MoreThanOneTestWritten.
	self assertHasNoErrors: result.! !
!MoreThanOneTestWrittenTest methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/23/2021 18:59:26' prior: 50853673!
test15WhenAllOfTheTestsPassErrorsAreReportedAndGoesToGreen
	| result |
	
	self logChangesWhile: [
		self newClassNamed: #TestClassA subclassOf: TestCase.
		self compileMethod: 'test01 self assert: true' in: #TestClassA.
		self compileMethod: 'test02 self assert: true' in: #TestClassA.
		self runAllTestsOf: #TestClassA.
	].

	result := tddGuru run.
	
	self assertCurrentStateIs: Green.
	self assert: result hasNErrors: 3.
	self assert: result hasErrorWithDescription: (TDDGuru testDidNotFail: #test01 class: #TestClassA).
	self assert: result hasErrorWithDescription: (TDDGuru testDidNotFail: #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance class: #TestClassA).
	self assert: result hasErrorWithDescription: (TDDGuru testAddedWhileWritingAnother: #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance class: #TestClassA)! !

!methodRemoval: PortfolioTest #test02 stamp: 'G.L.S. 5/23/2021 18:59:26'!
test02

	|portfolioTester account|
	
	portfolioTester := Portfolio createNew.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	portfolioTester addAccount: account.
	
	self assert: 100 equals: portfolioTester balance.!
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/23/2021 19:00:26'!
test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts

	|portfolioTester account1 account2|
	
	portfolioTester := Portfolio createNew.
	
	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 100 on: account2.
	
	portfolioTester addAccount: account1.
	portfolioTester addAccount: account2.
	
	self assert: 200 equals: portfolioTester balance.! !
!MoreThanOneTestWrittenTest methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/23/2021 19:00:26' prior: 50853604!
test12WhenAnotherTestIsChangedIsNotDoingTDD
	| result |
	
	self newClassNamed: #TestClassA subclassOf: TestCase.
	tddGuru initialTestClasses: { self classNamed: #TestClassA }.
	self compileMethod: 'test01 self assert: false' in: #TestClassA.
	
	self logChangesWhile: [
		self compileMethod: 'test02 self assert: false' in: #TestClassA.
		self compileMethod: 'test03 self assert: false' in: #TestClassA.
		self compileMethod: 'test01 self assert: false' in: #TestClassA.
	].

	result := tddGuru run.
	
	self assertCurrentStateIs: NotDoingTDD.
	self assert: result hasNErrors: 1.
	self assert: result hasErrorWithDescription: (TDDGuru testAddedWhileWritingAnother: #test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts class: #TestClassA)! !
!MoreThanOneTestWrittenTest methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/23/2021 19:00:26' prior: 50853718!
test17WhenAnotherTestIsRenamedIsNotDoingTDD
	| result |
	
	self newClassNamed: #TestClassA subclassOf: TestCase.
	self compileMethod: 'test01 self assert: true' in: #TestClassA.
	tddGuru initialTestClasses: { self classNamed: #TestClassA }.
	
	self logChangesWhile: [
		self compileMethod: 'test02 self assert: true' in: #TestClassA.
		self compileMethod: 'test03 self assert: true' in: #TestClassA.
		self compileMethod: 'test01bla self assert: true' in: #TestClassA.
		self removeMethodWithSelector: #test01 from: #TestClassA.
	].

	result := tddGuru run.
	
	self assertCurrentStateIs: NotDoingTDD.
	self assert: result hasNErrors: 1.
	self assert: result hasErrorWithDescription: (TDDGuru testAddedWhileWritingAnother: #test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts class: #TestClassA)! !

!methodRemoval: PortfolioTest #test03 stamp: 'G.L.S. 5/23/2021 19:00:26'!
test03

	|portfolioTester account1 account2|
	
	portfolioTester := Portfolio createNew.
	
	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 100 on: account2.
	
	portfolioTester addAccount: account1.
	portfolioTester addAccount: account2.
	
	self assert: 200 equals: portfolioTester balance.!
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/23/2021 19:00:54' prior: 50864969!
test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts

	|portfolioTester account1 account2|
	
	portfolioTester := Portfolio createNew.
	
	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	
	account2 := ReceptiveAccount  new.
	Withdraw register: 50 on: account2.
	
	portfolioTester addAccount: account1.
	portfolioTester addAccount: account2.
	
	self assert: 150 equals: portfolioTester balance.! !

!testRun: #PortfolioTest #test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts stamp: 'G.L.S. 5/23/2021 19:00:56'!
FAILURE!
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/23/2021 19:01:09' prior: 50865058!
test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts

	|portfolioTester account1 account2|
	
	portfolioTester := Portfolio createNew.
	
	account1 := ReceptiveAccount  new.
	Deposit register: 100 on: account1.
	
	account2 := ReceptiveAccount  new.
	Withdraw register: 50 on: account2.
	
	portfolioTester addAccount: account1.
	portfolioTester addAccount: account2.
	
	self assert: 50 equals: portfolioTester balance.! !

!testRun: #PortfolioTest #test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts stamp: 'G.L.S. 5/23/2021 19:01:10'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfEmptyPortfolioEquals0 stamp: 'G.L.S. 5/23/2021 19:01:10'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance stamp: 'G.L.S. 5/23/2021 19:01:10'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts stamp: 'G.L.S. 5/23/2021 19:01:10'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'G.L.S. 5/23/2021 19:01:10'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'G.L.S. 5/23/2021 19:01:10'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'G.L.S. 5/23/2021 19:01:10'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'G.L.S. 5/23/2021 19:01:10'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/23/2021 19:01:34' prior: 50865080!
test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts

	|portfolioTester account1 account2|
	
	portfolioTester := Portfolio createNew.
	
	account1 := ReceptiveAccount  new.
	Deposit register: 200 on: account1.
	
	account2 := ReceptiveAccount  new.
	Withdraw register: 50 on: account2.
	
	portfolioTester addAccount: account1.
	portfolioTester addAccount: account2.
	
	self assert: 150 equals: portfolioTester balance.! !

!testRun: #PortfolioTest #test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts stamp: 'G.L.S. 5/23/2021 19:01:36'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfEmptyPortfolioEquals0 stamp: 'G.L.S. 5/23/2021 19:01:36'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance stamp: 'G.L.S. 5/23/2021 19:01:36'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts stamp: 'G.L.S. 5/23/2021 19:01:36'!
PASSED!

!testRun: #PortfolioTest #test04 stamp: 'G.L.S. 5/23/2021 19:01:36'!
PASSED!

!testRun: #PortfolioTest #test05 stamp: 'G.L.S. 5/23/2021 19:01:36'!
PASSED!

!testRun: #PortfolioTest #test06 stamp: 'G.L.S. 5/23/2021 19:01:36'!
PASSED!

!testRun: #PortfolioTest #test07 stamp: 'G.L.S. 5/23/2021 19:01:36'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/23/2021 19:02:29'!
test04EmptyPortfolioTransactionsAreAnEmptyCollection

	|portfolioTester|
	
	portfolioTester := Portfolio createNew.
	
	self assert: OrderedCollection new equals: portfolioTester transactions.! !

!methodRemoval: PortfolioTest #test04 stamp: 'G.L.S. 5/23/2021 19:02:29'!
test04

	|portfolioTester|
	
	portfolioTester := Portfolio createNew.
	
	self assert: OrderedCollection new equals: portfolioTester transactions.!
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/23/2021 19:03:17'!
test05TransactionsOfAPortfolioWithOneAccountEqualsTheAccountTransactions

	|portfolioTester account|
	
	portfolioTester := Portfolio createNew.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	portfolioTester addAccount: account.
	
	self assert: account transactions equals: portfolioTester transactions.! !

!methodRemoval: PortfolioTest #test05 stamp: 'G.L.S. 5/23/2021 19:03:17'!
test05

	|portfolioTester account|
	
	portfolioTester := Portfolio createNew.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	portfolioTester addAccount: account.
	
	self assert: account transactions equals: portfolioTester transactions.!
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/23/2021 19:05:47'!
test06hasRegisteredOnAPortfolioWithAnAccountOnAnExistingTransactionReturnsTrue

	|portfolioTester account deposit|
	
	portfolioTester := Portfolio createNew.
	
	account := ReceptiveAccount  new.
	deposit := Deposit register: 100 on: account.
	
	portfolioTester addAccount: account.
	
	self assert: (portfolioTester hasRegistered: deposit).! !

!methodRemoval: PortfolioTest #test06 stamp: 'G.L.S. 5/23/2021 19:05:47'!
test06

	|portfolioTester account deposit|
	
	portfolioTester := Portfolio createNew.
	
	account := ReceptiveAccount  new.
	deposit := Deposit register: 100 on: account.
	
	portfolioTester addAccount: account.
	
	self assert: (portfolioTester hasRegistered: deposit).!
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/23/2021 19:06:42'!
test07hasRegisteredDoesNotReturnTrueOnATransactionOfAnAccountNotInsideThePortfolio

	|portfolioTester account account2 deposit|
	
	portfolioTester := Portfolio createNew.
	
	account := ReceptiveAccount  new.
	account2 := ReceptiveAccount  new.
	deposit := Deposit register: 100 on: account2.
	
	portfolioTester addAccount: account.
	
	self deny: (portfolioTester hasRegistered: deposit).! !

!methodRemoval: PortfolioTest #test07 stamp: 'G.L.S. 5/23/2021 19:06:42'!
test07

	|portfolioTester account account2 deposit|
	
	portfolioTester := Portfolio createNew.
	
	account := ReceptiveAccount  new.
	account2 := ReceptiveAccount  new.
	deposit := Deposit register: 100 on: account2.
	
	portfolioTester addAccount: account.
	
	self deny: (portfolioTester hasRegistered: deposit).!
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/23/2021 19:15:39'!
test08

	|portfolioTester account|
	
	portfolioTester := Portfolio createNew.
	
	account := ReceptiveAccount  new.
	
	self should: [
			portfolioTester addAccount: account.
			portfolioTester addAccount: account.
			] 
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText  = Portfolio AccountAlreadyExistsError.
			].! !

!testRun: #PortfolioTest #test08 stamp: 'G.L.S. 5/23/2021 19:15:47'!
FAILURE!

!testRun: #PortfolioTest #test08 stamp: 'G.L.S. 5/23/2021 19:16:08'!
FAILURE!
!Portfolio class methodsFor: 'nil' stamp: 'G.L.S. 5/23/2021 19:17:03'!
AccountAlreadyExistsError
	^'La cuenta ya existe!!!!!!'! !
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 19:19:55' prior: 50864291!
addAccount: aReceptiveAccount
	
	(accounts anySatisfy: [:aPortfolioElement | aPortfolioElement = aReceptiveAccount]) ifTrue: [self error: self class AccountAlreadyExistsError].
	
	accounts add: aReceptiveAccount! !
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 19:19:58' prior: 50865282!
addAccount: aReceptiveAccount
	
	(accounts anySatisfy: [:aPortfolioElement | aPortfolioElement = aReceptiveAccount]) ifTrue: [self error: self class AccountAlreadyExistsError].
	accounts add: aReceptiveAccount! !

!testRun: #PortfolioTest #test08 stamp: 'G.L.S. 5/23/2021 19:20:23'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfEmptyPortfolioEquals0 stamp: 'G.L.S. 5/23/2021 19:20:23'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance stamp: 'G.L.S. 5/23/2021 19:20:23'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts stamp: 'G.L.S. 5/23/2021 19:20:23'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioTransactionsAreAnEmptyCollection stamp: 'G.L.S. 5/23/2021 19:20:23'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfAPortfolioWithOneAccountEqualsTheAccountTransactions stamp: 'G.L.S. 5/23/2021 19:20:23'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOnAPortfolioWithAnAccountOnAnExistingTransactionReturnsTrue stamp: 'G.L.S. 5/23/2021 19:20:23'!
PASSED!

!testRun: #PortfolioTest #test07hasRegisteredDoesNotReturnTrueOnATransactionOfAnAccountNotInsideThePortfolio stamp: 'G.L.S. 5/23/2021 19:20:23'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'G.L.S. 5/23/2021 19:20:23'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/23/2021 19:21:56'!
test09

	|portfolioTester account|
	
	portfolioTester := Portfolio createNew.
	
	account := ReceptiveAccount  new.
	
	self should: [
			portfolioTester addAccount: account.
			portfolioTester addAccount: account.
			] 
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText  = Portfolio AccountAlreadyExistsError.
			].! !

!methodRemoval: PortfolioTest #test09 stamp: 'G.L.S. 5/23/2021 19:25:48'!
test09

	|portfolioTester account|
	
	portfolioTester := Portfolio createNew.
	
	account := ReceptiveAccount  new.
	
	self should: [
			portfolioTester addAccount: account.
			portfolioTester addAccount: account.
			] 
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText  = Portfolio AccountAlreadyExistsError.
			].!
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 19:26:43'!
addPortfolioElement: aReceptiveAccount
	
	(accounts anySatisfy: [:aPortfolioElement | aPortfolioElement = aReceptiveAccount]) ifTrue: [self error: self class AccountAlreadyExistsError].
	accounts add: aReceptiveAccount! !
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 19:26:43' prior: 50865363!
addPortfolioElement: aReceptiveAccount
	
	(accounts anySatisfy: [:aPortfolioElement | aPortfolioElement = aReceptiveAccount]) ifTrue: [self error: self class AccountAlreadyExistsError].
	accounts add: aReceptiveAccount! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/23/2021 19:26:43' prior: 50865124!
test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts

	|portfolioTester account1 account2|
	
	portfolioTester := Portfolio createNew.
	
	account1 := ReceptiveAccount  new.
	Deposit register: 200 on: account1.
	
	account2 := ReceptiveAccount  new.
	Withdraw register: 50 on: account2.
	
	portfolioTester addPortfolioElement: account1.
	portfolioTester addPortfolioElement: account2.
	
	self assert: 150 equals: portfolioTester balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/23/2021 19:26:43' prior: 50865207!
test06hasRegisteredOnAPortfolioWithAnAccountOnAnExistingTransactionReturnsTrue

	|portfolioTester account deposit|
	
	portfolioTester := Portfolio createNew.
	
	account := ReceptiveAccount  new.
	deposit := Deposit register: 100 on: account.
	
	portfolioTester addPortfolioElement: account.
	
	self assert: (portfolioTester hasRegistered: deposit).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/23/2021 19:26:43' prior: 50865258!
test08

	|portfolioTester account|
	
	portfolioTester := Portfolio createNew.
	
	account := ReceptiveAccount  new.
	
	self should: [
			portfolioTester addPortfolioElement: account.
			portfolioTester addPortfolioElement: account.
			] 
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText  = Portfolio AccountAlreadyExistsError.
			].! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/23/2021 19:26:43' prior: 50865231!
test07hasRegisteredDoesNotReturnTrueOnATransactionOfAnAccountNotInsideThePortfolio

	|portfolioTester account account2 deposit|
	
	portfolioTester := Portfolio createNew.
	
	account := ReceptiveAccount  new.
	account2 := ReceptiveAccount  new.
	deposit := Deposit register: 100 on: account2.
	
	portfolioTester addPortfolioElement: account.
	
	self deny: (portfolioTester hasRegistered: deposit).! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/23/2021 19:26:43' prior: 50864336!
test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance

	|portfolioTester account|
	
	portfolioTester := Portfolio createNew.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	portfolioTester addPortfolioElement: account.
	
	self assert: 100 equals: portfolioTester balance.! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/23/2021 19:26:43' prior: 50865183!
test05TransactionsOfAPortfolioWithOneAccountEqualsTheAccountTransactions

	|portfolioTester account|
	
	portfolioTester := Portfolio createNew.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	portfolioTester addPortfolioElement: account.
	
	self assert: account transactions equals: portfolioTester transactions.! !

!methodRemoval: Portfolio #addAccount: stamp: 'G.L.S. 5/23/2021 19:26:43'!
addAccount: aReceptiveAccount
	
	(accounts anySatisfy: [:aPortfolioElement | aPortfolioElement = aReceptiveAccount]) ifTrue: [self error: self class AccountAlreadyExistsError].
	accounts add: aReceptiveAccount!

!testRun: #PortfolioTest #test08 stamp: 'G.L.S. 5/23/2021 19:26:56'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfEmptyPortfolioEquals0 stamp: 'G.L.S. 5/23/2021 19:27:00'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance stamp: 'G.L.S. 5/23/2021 19:27:00'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts stamp: 'G.L.S. 5/23/2021 19:27:00'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioTransactionsAreAnEmptyCollection stamp: 'G.L.S. 5/23/2021 19:27:00'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfAPortfolioWithOneAccountEqualsTheAccountTransactions stamp: 'G.L.S. 5/23/2021 19:27:00'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOnAPortfolioWithAnAccountOnAnExistingTransactionReturnsTrue stamp: 'G.L.S. 5/23/2021 19:27:00'!
PASSED!

!testRun: #PortfolioTest #test07hasRegisteredDoesNotReturnTrueOnATransactionOfAnAccountNotInsideThePortfolio stamp: 'G.L.S. 5/23/2021 19:27:00'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'G.L.S. 5/23/2021 19:27:00'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/23/2021 19:27:19'!
test09

	|portfolioTester account|
	
	portfolioTester := Portfolio createNew.
	
	account := ReceptiveAccount  new.
	
	self should: [
			portfolioTester addPortfolioElement: account.
			portfolioTester addPortfolioElement: account.
			] 
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText  = Portfolio AccountAlreadyExistsError.
			].! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/23/2021 19:28:29' prior: 50865518!
test09

	|portfolio portfolio2 account|
	
	portfolio := Portfolio createNew.
	portfolio2 := Portfolio createNew.
	
	account := ReceptiveAccount new.
	portfolio2 addPortfolioElement: account.
	
	self should: [
			portfolio addPortfolioElement: account.
			portfolio addPortfolioElement: account.
			] 
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText  = Portfolio AccountAlreadyExistsError.
			].! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/23/2021 19:28:52' prior: 50865417!
test08

	|portfolio account|
	
	portfolio := Portfolio createNew.
	
	account := ReceptiveAccount  new.
	
	self should: [
			portfolio addPortfolioElement: account.
			portfolio addPortfolioElement: account.
			] 
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText  = Portfolio AccountAlreadyExistsError.
			].! !

!testRun: #PortfolioTest #test08 stamp: 'G.L.S. 5/23/2021 19:29:01'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/23/2021 19:29:11' prior: 50865432!
test07hasRegisteredDoesNotReturnTrueOnATransactionOfAnAccountNotInsideThePortfolio

	|portfolio account account2 deposit|
	
	portfolio := Portfolio createNew.
	
	account := ReceptiveAccount  new.
	account2 := ReceptiveAccount  new.
	deposit := Deposit register: 100 on: account2.
	
	portfolio addPortfolioElement: account.
	
	self deny: (portfolio hasRegistered: deposit).! !

!testRun: #PortfolioTest #test07hasRegisteredDoesNotReturnTrueOnATransactionOfAnAccountNotInsideThePortfolio stamp: 'G.L.S. 5/23/2021 19:29:18'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfEmptyPortfolioEquals0 stamp: 'G.L.S. 5/23/2021 19:29:18'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance stamp: 'G.L.S. 5/23/2021 19:29:18'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts stamp: 'G.L.S. 5/23/2021 19:29:18'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioTransactionsAreAnEmptyCollection stamp: 'G.L.S. 5/23/2021 19:29:18'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfAPortfolioWithOneAccountEqualsTheAccountTransactions stamp: 'G.L.S. 5/23/2021 19:29:18'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOnAPortfolioWithAnAccountOnAnExistingTransactionReturnsTrue stamp: 'G.L.S. 5/23/2021 19:29:18'!
PASSED!

!testRun: #PortfolioTest #test07hasRegisteredDoesNotReturnTrueOnATransactionOfAnAccountNotInsideThePortfolio stamp: 'G.L.S. 5/23/2021 19:29:18'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'G.L.S. 5/23/2021 19:29:18'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'G.L.S. 5/23/2021 19:29:18'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'G.L.S. 5/23/2021 19:29:21'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/23/2021 19:29:33' prior: 50865533!
test09

	|portfolio portfolio2 account|
	
	portfolio := Portfolio createNew.
	portfolio2 := Portfolio createNew.
	
	account := ReceptiveAccount new.
	portfolio2 addPortfolioElement: account.
	
	self should: [
			portfolio addPortfolioElement: account.
			portfolio addPortfolioElement: portfolio2 .
			] 
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText  = Portfolio AccountAlreadyExistsError.
			].! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/23/2021 19:29:34' prior: 50865623!
test09

	|portfolio portfolio2 account|
	
	portfolio := Portfolio createNew.
	portfolio2 := Portfolio createNew.
	
	account := ReceptiveAccount new.
	portfolio2 addPortfolioElement: account.
	
	self should: [
			portfolio addPortfolioElement: account.
			portfolio addPortfolioElement: portfolio2.
			] 
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText  = Portfolio AccountAlreadyExistsError.
			].! !

!testRun: #PortfolioTest #test09 stamp: 'G.L.S. 5/23/2021 19:29:36'!
FAILURE!
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/23/2021 19:29:50' prior: 50865402!
test06hasRegisteredOnAPortfolioWithAnAccountOnAnExistingTransactionReturnsTrue

	|portfolio account deposit|
	
	portfolio := Portfolio createNew.
	
	account := ReceptiveAccount  new.
	deposit := Deposit register: 100 on: account.
	
	portfolio addPortfolioElement: account.
	
	self assert: (portfolio hasRegistered: deposit).! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/23/2021 19:30:03' prior: 50865461!
test05TransactionsOfAPortfolioWithOneAccountEqualsTheAccountTransactions

	|portfolio account|
	
	portfolio := Portfolio createNew.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	portfolio addPortfolioElement: account.
	
	self assert: account transactions equals: portfolio transactions.! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/23/2021 19:30:16' prior: 50865167!
test04EmptyPortfolioTransactionsAreAnEmptyCollection

	|portfolio|
	
	portfolio := Portfolio createNew.
	
	self assert: OrderedCollection new equals: portfolio transactions.! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/23/2021 19:30:32' prior: 50865384!
test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts

	|portfolio account1 account2|
	
	portfolio := Portfolio createNew.
	
	account1 := ReceptiveAccount  new.
	Deposit register: 200 on: account1.
	
	account2 := ReceptiveAccount  new.
	Withdraw register: 50 on: account2.
	
	portfolio addPortfolioElement: account1.
	portfolio addPortfolioElement: account2.
	
	self assert: 150 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/23/2021 19:30:46' prior: 50865448!
test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance

	|portfolio account|
	
	portfolio := Portfolio createNew.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	portfolio addPortfolioElement: account.
	
	self assert: 100 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/23/2021 19:31:06' prior: 50864322!
test01BalanceOfEmptyPortfolioEquals0

	|portfolio|
	
	portfolio := Portfolio createNew.
	
	self assert: 0 equals: portfolio balance.! !

!testRun: #PortfolioTest #test09 stamp: 'G.L.S. 5/23/2021 19:31:15'!
FAILURE!

!testRun: #PortfolioTest #test09 stamp: 'G.L.S. 5/23/2021 19:31:15'!
FAILURE!

pepe _ OrderedCollection new.!

pepe _ OrderedCollection new.!

pepe _ OrderedCollection new.!

pepe _ OrderedCollection new.!

pepe _ OrderedCollection new.!

pepe _ OrderedCollection new.!

pepe _ OrderedCollection new.!

pepe _ OrderedCollection new.!

pepe _ OrderedCollection new.!

pepe.!

pepe do: [:e | e].!

pepe do: [:e | 'pepe'].!

pepe do: [:e | 'pepe'].!
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 19:39:00' prior: 50865373!
addPortfolioElement: aReceptiveAccount
	
	(accounts anySatisfy: [:aPortfolioElement | aPortfolioElement = aReceptiveAccount]) ifTrue: [self error: self class AccountAlreadyExistsError].
	(accounts anySatisfy: [:aPortfolioElement | aPortfolioElement class = Portfolio]) ifTrue: [self error: self class AccountAlreadyExistsError].
	accounts add: aReceptiveAccount! !
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 19:39:05' prior: 50865748!
addPortfolioElement: aReceptiveAccount
	
	(accounts anySatisfy: [:aPortfolioElement | aPortfolioElement = aReceptiveAccount]) ifTrue: [self error: self class AccountAlreadyExistsError].
	(accounts anySatisfy: [:aPortfolioElement | aPortfolioElement class = Portfolio]) ifTrue: [self error: self class AccountAlreadyExistsError].
	accounts add: aReceptiveAccount.! !

!testRun: #PortfolioTest #test09 stamp: 'G.L.S. 5/23/2021 19:39:12'!
FAILURE!

!testRun: #PortfolioTest #test09 stamp: 'G.L.S. 5/23/2021 19:39:12'!
FAILURE!

!testRun: #PortfolioTest #test08 stamp: 'G.L.S. 5/23/2021 19:39:34'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'G.L.S. 5/23/2021 19:39:36'!
FAILURE!

!testRun: #PortfolioTest #test09 stamp: 'G.L.S. 5/23/2021 19:39:36'!
FAILURE!

aPortfolioElement class!
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 19:41:03' prior: 50865763!
addPortfolioElement: aReceptiveAccount
	
	(accounts anySatisfy: [:aPortfolioElement | aPortfolioElement = aReceptiveAccount]) ifTrue: [self error: self class AccountAlreadyExistsError].
	(aReceptiveAccount class = Portfolio) ifTrue: [self error: self class AccountAlreadyExistsError].
	accounts add: aReceptiveAccount.! !

!testRun: #PortfolioTest #test09 stamp: 'G.L.S. 5/23/2021 19:41:10'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfEmptyPortfolioEquals0 stamp: 'G.L.S. 5/23/2021 19:41:11'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance stamp: 'G.L.S. 5/23/2021 19:41:11'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts stamp: 'G.L.S. 5/23/2021 19:41:11'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioTransactionsAreAnEmptyCollection stamp: 'G.L.S. 5/23/2021 19:41:11'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfAPortfolioWithOneAccountEqualsTheAccountTransactions stamp: 'G.L.S. 5/23/2021 19:41:11'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOnAPortfolioWithAnAccountOnAnExistingTransactionReturnsTrue stamp: 'G.L.S. 5/23/2021 19:41:11'!
PASSED!

!testRun: #PortfolioTest #test07hasRegisteredDoesNotReturnTrueOnATransactionOfAnAccountNotInsideThePortfolio stamp: 'G.L.S. 5/23/2021 19:41:11'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'G.L.S. 5/23/2021 19:41:11'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'G.L.S. 5/23/2021 19:41:11'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/23/2021 19:44:45'!
test10

	|portfolio portfolio2 account account2 errorHappened|
	
	errorHappened := #No.
	
	portfolio := Portfolio createNew.
	portfolio2 := Portfolio createNew.
	
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	portfolio2 addPortfolioElement: account.
	
	self should: [
			portfolio addPortfolioElement: account2.
			portfolio addPortfolioElement: portfolio2.
			] 
		raise: Error
		withExceptionDo: [:anError|
			errorHappened := #Si.
			].
	
	self assert: #No equals: errorHappened.
! !

!testRun: #PortfolioTest #test10 stamp: 'G.L.S. 5/23/2021 19:44:56'!
FAILURE!
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 19:48:23' prior: 50865791!
addPortfolioElement: aReceptiveAccount
	
	(accounts anySatisfy: [:aPortfolioElement | aPortfolioElement = aReceptiveAccount]) ifTrue: [self error: self class AccountAlreadyExistsError].
	(accounts select:[:aPortfolioElement | aPortfolioElement class = Portfolio]) do: [].
	accounts add: aReceptiveAccount.! !
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 19:49:34'!
hasAccount: aReceptiveAccount

	^ (accounts anySatisfy: [:aPortfolioElement | aPortfolioElement = aReceptiveAccount]) ifTrue: [self error: self class AccountAlreadyExistsError]! !
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 19:49:34' prior: 50865863!
addPortfolioElement: aReceptiveAccount
	
	self hasAccount: aReceptiveAccount.
	(accounts select:[:aPortfolioElement | aPortfolioElement class = Portfolio]) do: [].
	accounts add: aReceptiveAccount.! !
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 19:49:58' prior: 50865876!
hasAccount: aReceptiveAccount

	^(accounts anySatisfy: [:aPortfolioElement | aPortfolioElement = aReceptiveAccount]).! !
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 19:50:18' prior: 50865885!
addPortfolioElement: aReceptiveAccount
	
	(self hasAccount: aReceptiveAccount) ifTrue: [self error: self class AccountAlreadyExistsError].
	(accounts select:[:aPortfolioElement | aPortfolioElement class = Portfolio]) do: [].
	accounts add: aReceptiveAccount.! !
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 19:51:53' prior: 50865902!
addPortfolioElement: aReceptiveAccount
	
	(self hasAccount: aReceptiveAccount) ifTrue: [self error: self class AccountAlreadyExistsError].
	((accounts select:[:aPortfolioElement | aPortfolioElement class = Portfolio]) anySatisfy: [:aPortfolio | aPortfolio hasAccount: aReceptiveAccount]) ifTrue: [self error: self class AccountAlreadyExistsError].
	
	accounts add: aReceptiveAccount.! !

!testRun: #PortfolioTest #test10 stamp: 'G.L.S. 5/23/2021 19:53:04'!
FAILURE!

!testRun: #PortfolioTest #test10 stamp: 'G.L.S. 5/23/2021 19:53:04'!
FAILURE!
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/23/2021 19:53:37' prior: 50865841!
test10

	|portfolio portfolio2 account account2 errorHappened|
	
	errorHappened := #No.
	
	portfolio := Portfolio createNew.
	portfolio2 := Portfolio createNew.
	
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	portfolio2 addPortfolioElement: account.
	
	[
		portfolio addPortfolioElement: account2.
		portfolio addPortfolioElement: portfolio2.
		] 
		on: Error
		do: [:anError|
			errorHappened := #Si.
			].
	
	self assert: #No equals: errorHappened.
! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/23/2021 19:53:49' prior: 50865934!
test10

	|portfolio portfolio2 account account2 errorHappened|
	
	errorHappened := #No.
	
	portfolio := Portfolio createNew.
	portfolio2 := Portfolio createNew.
	
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	portfolio2 addPortfolioElement: account.
	
	[portfolio addPortfolioElement: account2.
	portfolio addPortfolioElement: portfolio2.] 
		on: Error
		do: [:anError|
			errorHappened := #Si.
			].
	
	self assert: #No equals: errorHappened.
! !

!testRun: #PortfolioTest #test10 stamp: 'G.L.S. 5/23/2021 19:53:51'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfEmptyPortfolioEquals0 stamp: 'G.L.S. 5/23/2021 19:53:51'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance stamp: 'G.L.S. 5/23/2021 19:53:51'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts stamp: 'G.L.S. 5/23/2021 19:53:51'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioTransactionsAreAnEmptyCollection stamp: 'G.L.S. 5/23/2021 19:53:51'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfAPortfolioWithOneAccountEqualsTheAccountTransactions stamp: 'G.L.S. 5/23/2021 19:53:51'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOnAPortfolioWithAnAccountOnAnExistingTransactionReturnsTrue stamp: 'G.L.S. 5/23/2021 19:53:51'!
PASSED!

!testRun: #PortfolioTest #test07hasRegisteredDoesNotReturnTrueOnATransactionOfAnAccountNotInsideThePortfolio stamp: 'G.L.S. 5/23/2021 19:53:51'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'G.L.S. 5/23/2021 19:53:51'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'G.L.S. 5/23/2021 19:53:51'!
FAILURE!

!testRun: #PortfolioTest #test10 stamp: 'G.L.S. 5/23/2021 19:53:51'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'G.L.S. 5/23/2021 19:53:51'!
FAILURE!

!testRun: #PortfolioTest #test10 stamp: 'G.L.S. 5/23/2021 19:54:16'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfEmptyPortfolioEquals0 stamp: 'G.L.S. 5/23/2021 19:54:16'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance stamp: 'G.L.S. 5/23/2021 19:54:16'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts stamp: 'G.L.S. 5/23/2021 19:54:16'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioTransactionsAreAnEmptyCollection stamp: 'G.L.S. 5/23/2021 19:54:16'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfAPortfolioWithOneAccountEqualsTheAccountTransactions stamp: 'G.L.S. 5/23/2021 19:54:16'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOnAPortfolioWithAnAccountOnAnExistingTransactionReturnsTrue stamp: 'G.L.S. 5/23/2021 19:54:16'!
PASSED!

!testRun: #PortfolioTest #test07hasRegisteredDoesNotReturnTrueOnATransactionOfAnAccountNotInsideThePortfolio stamp: 'G.L.S. 5/23/2021 19:54:16'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'G.L.S. 5/23/2021 19:54:16'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'G.L.S. 5/23/2021 19:54:16'!
FAILURE!

!testRun: #PortfolioTest #test10 stamp: 'G.L.S. 5/23/2021 19:54:16'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'G.L.S. 5/23/2021 19:54:16'!
FAILURE!

!testRun: #PortfolioTest #test10 stamp: 'G.L.S. 5/23/2021 19:54:22'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'G.L.S. 5/23/2021 19:54:24'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'G.L.S. 5/23/2021 19:54:26'!
FAILURE!

!testRun: #PortfolioTest #test09 stamp: 'G.L.S. 5/23/2021 19:54:26'!
FAILURE!
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 19:56:55' prior: 50865914!
addPortfolioElement: aReceptiveAccount
	
	(accounts anySatisfy:[:aPortfolioElement | aPortfolioElement hasAccount: aReceptiveAccount]) ifTrue: [self error: self class AccountAlreadyExistsError].
	
	accounts add: aReceptiveAccount.
	
	"(self hasAccount: aReceptiveAccount) ifTrue: [self error: self class AccountAlreadyExistsError].
	((accounts select:[:aPortfolioElement | aPortfolioElement class = Portfolio]) anySatisfy: [:aPortfolio | aPortfolio hasAccount: aReceptiveAccount])"! !
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 19:58:06' prior: 50866065!
addPortfolioElement: aReceptiveAccount
	
	(accounts anySatisfy:[:aPortfolioElement | aPortfolioElement hasAccount: aReceptiveAccount]) ifTrue: [self error: self class AccountAlreadyExistsError].
	
	accounts add: aReceptiveAccount.
	
	"(self hasAccount: aReceptiveAccount) ifTrue: [self error: self class AccountAlreadyExistsError].
	((accounts select:[:aPortfolioElement | aPortfolioElement class = Portfolio]) anySatisfy: [:aPortfolio | aPortfolio hasAccount: aReceptiveAccount])"! !
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 19:58:39' prior: 50866084!
addPortfolioElement: aReceptiveAccount

	(self hasAccount: aReceptiveAccount) ifTrue: [self error: self class AccountAlreadyExistsError].
	
	accounts add: aReceptiveAccount.
	
	"(self hasAccount: aReceptiveAccount) ifTrue: [self error: self class AccountAlreadyExistsError].
	((accounts select:[:aPortfolioElement | aPortfolioElement class = Portfolio]) anySatisfy: [:aPortfolio | aPortfolio hasAccount: aReceptiveAccount])"! !
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 19:59:20' prior: 50866103!
addPortfolioElement: aReceptiveAccount

	(self hasAccount: aReceptiveAccount) ifTrue: [self error: self class AccountAlreadyExistsError].
	((accounts select:[:aPortfolioElement | aPortfolioElement class = Portfolio]) anySatisfy: [:aPortfolio | aPortfolio hasAccount: aReceptiveAccount]) ifTrue: [self error: self class AccountAlreadyExistsError].
	
	accounts add: aReceptiveAccount.
	
	"(self hasAccount: aReceptiveAccount) ifTrue: [self error: self class AccountAlreadyExistsError].
	((accounts select:[:aPortfolioElement | aPortfolioElement class = Portfolio]) anySatisfy: [:aPortfolio | aPortfolio hasAccount: aReceptiveAccount])"! !
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 20:00:45' prior: 50866120!
addPortfolioElement: aReceptiveAccount

	(self hasAccount: aReceptiveAccount) ifTrue: [self error: self class AccountAlreadyExistsError].
	((accounts select:[:aPortfolioElement | aPortfolioElement class = Portfolio]) anySatisfy: [:aPortfolio | aPortfolio hasAccount: aReceptiveAccount]) ifTrue: [self error: self class AccountAlreadyExistsError].
	
	(aReceptiveAccount class = Portfolio) ifTrue: []. 
	
	accounts add: aReceptiveAccount.
	
	"(self hasAccount: aReceptiveAccount) ifTrue: [self error: self class AccountAlreadyExistsError].
	((accounts select:[:aPortfolioElement | aPortfolioElement class = Portfolio]) anySatisfy: [:aPortfolio | aPortfolio hasAccount: aReceptiveAccount])"! !
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 20:02:41' prior: 50866143!
addPortfolioElement: aReceptiveAccount

	(self hasAccount: aReceptiveAccount) ifTrue: [self error: self class AccountAlreadyExistsError].
	((accounts select:[:aPortfolioElement | aPortfolioElement class = Portfolio]) anySatisfy: [:aPortfolio | aPortfolio hasAccount: aReceptiveAccount]) ifTrue: [self error: self class AccountAlreadyExistsError].
	
	(aReceptiveAccount class = Portfolio) ifTrue: []. 
	
	accounts add: aReceptiveAccount.! !
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 20:03:59' prior: 50865895!
hasAccount: aReceptiveAccount
	
	|portfolios|
	
	portfolios := accounts select: []
	
	^(accounts anySatisfy: [:aPortfolioElement | aPortfolioElement = aReceptiveAccount]).! !
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 20:04:23' prior: 50866185!
hasAccount: aReceptiveAccount
	
	|portfolios|
	
	portfolios := (accounts select:[:aPortfolioElement | aPortfolioElement class = Portfolio]).
	
	^(accounts anySatisfy: [:aPortfolioElement | aPortfolioElement = aReceptiveAccount]).! !
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 20:05:08' prior: 50866194!
hasAccount: aReceptiveAccount
	
	|portfolios|
	
	portfolios := (accounts select:[:aPortfolioElement | aPortfolioElement class = Portfolio]).
	
	^(accounts anySatisfy: [:aPortfolioElement | aPortfolioElement = aReceptiveAccount]) and: [portfolios anySatisfy: [:aPortfolio | aPortfolio hasAccount: aReceptiveAccount]].! !
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 20:05:26' prior: 50866205!
hasAccount: aReceptiveAccount
	
	|portfolios|
	
	portfolios := (accounts select:[:aPortfolioElement | aPortfolioElement class = Portfolio]).
	
	^(accounts anySatisfy: [:aPortfolioElement | aPortfolioElement = aReceptiveAccount]) or: [portfolios anySatisfy: [:aPortfolio | aPortfolio hasAccount: aReceptiveAccount]].! !
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 20:06:00' prior: 50866168!
addPortfolioElement: aReceptiveAccount

	(self hasAccount: aReceptiveAccount) ifTrue: [self error: self class AccountAlreadyExistsError].
	
	(aReceptiveAccount class = Portfolio) ifTrue: []. 
	
	accounts add: aReceptiveAccount.! !
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 20:09:17'!
allAccounts
	
	! !
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 20:09:40' prior: 50866231!
addPortfolioElement: aReceptiveAccount

	(self hasAccount: aReceptiveAccount) ifTrue: [self error: self class AccountAlreadyExistsError].
	
	"(aReceptiveAccount class = Portfolio) ifTrue: []."
	
	accounts add: aReceptiveAccount.! !

!testRun: #PortfolioTest #test01BalanceOfEmptyPortfolioEquals0 stamp: 'G.L.S. 5/23/2021 20:09:47'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance stamp: 'G.L.S. 5/23/2021 20:09:47'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts stamp: 'G.L.S. 5/23/2021 20:09:47'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioTransactionsAreAnEmptyCollection stamp: 'G.L.S. 5/23/2021 20:09:47'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfAPortfolioWithOneAccountEqualsTheAccountTransactions stamp: 'G.L.S. 5/23/2021 20:09:47'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOnAPortfolioWithAnAccountOnAnExistingTransactionReturnsTrue stamp: 'G.L.S. 5/23/2021 20:09:47'!
PASSED!

!testRun: #PortfolioTest #test07hasRegisteredDoesNotReturnTrueOnATransactionOfAnAccountNotInsideThePortfolio stamp: 'G.L.S. 5/23/2021 20:09:47'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'G.L.S. 5/23/2021 20:09:47'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'G.L.S. 5/23/2021 20:09:47'!
FAILURE!

!testRun: #PortfolioTest #test10 stamp: 'G.L.S. 5/23/2021 20:09:47'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'G.L.S. 5/23/2021 20:09:47'!
FAILURE!

!testRun: #PortfolioTest #test10 stamp: 'G.L.S. 5/23/2021 20:09:51'!
PASSED!
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 20:14:23' prior: 50866241!
allAccounts
	
	|totalAccounts|
	
	totalAccounts := OrderedCollection new.
	
	totalAccounts addAll: (accounts select:[:aPortfolioElement | aPortfolioElement class = ReceptiveAccount]).! !
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 20:15:13' prior: 50866298!
allAccounts
	
	|totalAccounts portfolios|
	
	totalAccounts := OrderedCollection new.
	portfolios  := (accounts select:[:aPortfolioElement | aPortfolioElement class = Portfolio]).
	totalAccounts addAll: (accounts select:[:aPortfolioElement | aPortfolioElement class = ReceptiveAccount]).! !
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 20:16:26' prior: 50866307!
allAccounts
	
	|totalAccounts portfolios|
	
	totalAccounts := OrderedCollection new.
	portfolios  := (accounts select:[:aPortfolioElement | aPortfolioElement class = Portfolio]).
	totalAccounts addAll: (accounts select:[:aPortfolioElement | aPortfolioElement class = ReceptiveAccount]).
	
	portfolios do: [:aPortfolio | totalAccounts addAll: aPortfolio allAccounts].
	
	^totalAccounts .! !
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 20:18:09' prior: 50866245!
addPortfolioElement: aReceptiveAccount

	(aReceptiveAccount class = Portfolio) ifTrue: [self allAccounts anySatisfy: [:anAccount | aReceptiveAccount hasAccount: anAccount]].
	(self hasAccount: aReceptiveAccount) ifTrue: [self error: self class AccountAlreadyExistsError].
	
	accounts add: aReceptiveAccount.! !

!testRun: #PortfolioTest #test10 stamp: 'G.L.S. 5/23/2021 20:18:25'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfEmptyPortfolioEquals0 stamp: 'G.L.S. 5/23/2021 20:18:28'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance stamp: 'G.L.S. 5/23/2021 20:18:28'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts stamp: 'G.L.S. 5/23/2021 20:18:28'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioTransactionsAreAnEmptyCollection stamp: 'G.L.S. 5/23/2021 20:18:28'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfAPortfolioWithOneAccountEqualsTheAccountTransactions stamp: 'G.L.S. 5/23/2021 20:18:28'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOnAPortfolioWithAnAccountOnAnExistingTransactionReturnsTrue stamp: 'G.L.S. 5/23/2021 20:18:28'!
PASSED!

!testRun: #PortfolioTest #test07hasRegisteredDoesNotReturnTrueOnATransactionOfAnAccountNotInsideThePortfolio stamp: 'G.L.S. 5/23/2021 20:18:28'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'G.L.S. 5/23/2021 20:18:28'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'G.L.S. 5/23/2021 20:18:28'!
FAILURE!

!testRun: #PortfolioTest #test10 stamp: 'G.L.S. 5/23/2021 20:18:28'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'G.L.S. 5/23/2021 20:18:28'!
FAILURE!

self allAccounts anySatisfy: [:anAccount | aReceptiveAccount hasAccount: anAccount]!
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 20:19:50' prior: 50866336!
addPortfolioElement: aReceptiveAccount

	(aReceptiveAccount class = Portfolio) ifTrue: [
		(self allAccounts anySatisfy: [:anAccount | aReceptiveAccount hasAccount: anAccount])
			ifTrue: [self error: self class AccountAlreadyExistsError]
		].
	
	(self hasAccount: aReceptiveAccount) ifTrue: [self error: self class AccountAlreadyExistsError].
	
	accounts add: aReceptiveAccount.! !

!testRun: #PortfolioTest #test09 stamp: 'G.L.S. 5/23/2021 20:19:54'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfEmptyPortfolioEquals0 stamp: 'G.L.S. 5/23/2021 20:19:58'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance stamp: 'G.L.S. 5/23/2021 20:19:58'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts stamp: 'G.L.S. 5/23/2021 20:19:58'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioTransactionsAreAnEmptyCollection stamp: 'G.L.S. 5/23/2021 20:19:58'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfAPortfolioWithOneAccountEqualsTheAccountTransactions stamp: 'G.L.S. 5/23/2021 20:19:58'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOnAPortfolioWithAnAccountOnAnExistingTransactionReturnsTrue stamp: 'G.L.S. 5/23/2021 20:19:58'!
PASSED!

!testRun: #PortfolioTest #test07hasRegisteredDoesNotReturnTrueOnATransactionOfAnAccountNotInsideThePortfolio stamp: 'G.L.S. 5/23/2021 20:19:58'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'G.L.S. 5/23/2021 20:19:58'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'G.L.S. 5/23/2021 20:19:58'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'G.L.S. 5/23/2021 20:19:58'!
PASSED!
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 20:28:39' prior: 50866218!
hasAccount: aReceptiveAccount
	
	"|portfolios|
	
	portfolios := (accounts select:[:aPortfolioElement | aPortfolioElement class = Portfolio]).
	
	^(accounts anySatisfy: [:aPortfolioElement | aPortfolioElement = aReceptiveAccount]) or: [portfolios anySatisfy: [:aPortfolio | aPortfolio hasAccount: aReceptiveAccount]]."
	
	^(accounts anySatisfy: [:aPortfolioElement | aPortfolioElement xxx: aReceptiveAccount])! !
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 20:30:37' prior: 50866320!
allAccounts
	
	|totalAccounts portfolios|
	
	totalAccounts := OrderedCollection new.
	portfolios  := (accounts select:[:aPortfolioElement | aPortfolioElement class = Portfolio]).
	totalAccounts addAll: (accounts select:[:aPortfolioElement | aPortfolioElement class = ReceptiveAccount]).
	
	portfolios do: [:aPortfolio | totalAccounts addAll: aPortfolio allAccounts].
	
	^totalAccounts.! !
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 20:40:46' prior: 50866449!
hasAccount: aReceptiveAccount
	
	"|portfolios|
	
	portfolios := (accounts select:[:aPortfolioElement | aPortfolioElement class = Portfolio]).
	
	^(accounts anySatisfy: [:aPortfolioElement | aPortfolioElement = aReceptiveAccount]) or: [portfolios anySatisfy: [:aPortfolio | aPortfolio hasAccount: aReceptiveAccount]]."
	
	^(accounts anySatisfy: [:aPortfolioElement | aPortfolioElement hasAccount: aReceptiveAccount]).! !
!ReceptiveAccount methodsFor: 'nil' stamp: 'G.L.S. 5/23/2021 20:41:05'!
hasAccount: aReceptiveAccount
	^self = aReceptiveAccount .! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/23/2021 20:41:06' prior: 50866497!
hasAccount: aReceptiveAccount
	^self = aReceptiveAccount.! !

!testRun: #PortfolioTest #test01BalanceOfEmptyPortfolioEquals0 stamp: 'G.L.S. 5/23/2021 20:41:15'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance stamp: 'G.L.S. 5/23/2021 20:41:15'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts stamp: 'G.L.S. 5/23/2021 20:41:15'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioTransactionsAreAnEmptyCollection stamp: 'G.L.S. 5/23/2021 20:41:15'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfAPortfolioWithOneAccountEqualsTheAccountTransactions stamp: 'G.L.S. 5/23/2021 20:41:15'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOnAPortfolioWithAnAccountOnAnExistingTransactionReturnsTrue stamp: 'G.L.S. 5/23/2021 20:41:15'!
PASSED!

!testRun: #PortfolioTest #test07hasRegisteredDoesNotReturnTrueOnATransactionOfAnAccountNotInsideThePortfolio stamp: 'G.L.S. 5/23/2021 20:41:15'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'G.L.S. 5/23/2021 20:41:15'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'G.L.S. 5/23/2021 20:41:15'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'G.L.S. 5/23/2021 20:41:15'!
PASSED!
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 20:41:27' prior: 50866481!
hasAccount: aReceptiveAccount
	
	^(accounts anySatisfy: [:aPortfolioElement | aPortfolioElement hasAccount: aReceptiveAccount]).! !

!testRun: #PortfolioTest #test01BalanceOfEmptyPortfolioEquals0 stamp: 'G.L.S. 5/23/2021 20:44:02'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance stamp: 'G.L.S. 5/23/2021 20:44:02'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts stamp: 'G.L.S. 5/23/2021 20:44:02'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioTransactionsAreAnEmptyCollection stamp: 'G.L.S. 5/23/2021 20:44:02'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfAPortfolioWithOneAccountEqualsTheAccountTransactions stamp: 'G.L.S. 5/23/2021 20:44:02'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOnAPortfolioWithAnAccountOnAnExistingTransactionReturnsTrue stamp: 'G.L.S. 5/23/2021 20:44:02'!
PASSED!

!testRun: #PortfolioTest #test07hasRegisteredDoesNotReturnTrueOnATransactionOfAnAccountNotInsideThePortfolio stamp: 'G.L.S. 5/23/2021 20:44:02'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'G.L.S. 5/23/2021 20:44:02'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'G.L.S. 5/23/2021 20:44:02'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'G.L.S. 5/23/2021 20:44:02'!
PASSED!
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 20:53:42' prior: 50866465!
allAccounts
	
	|totalAccounts portfolios|
	
	totalAccounts := OrderedCollection new.
	portfolios  := self portfolios.
	totalAccounts addAll: (accounts select:[:aPortfolioElement | aPortfolioElement class = ReceptiveAccount]).
	
	portfolios do: [:aPortfolio | totalAccounts addAll: aPortfolio allAccounts].
	
	^totalAccounts.! !
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 20:54:07'!
portfolios
	^(accounts select:[:aPortfolioElement | aPortfolioElement class = Portfolio]).! !
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 20:55:23' prior: 50866591!
allAccounts
	
	|totalAccounts |
	
	totalAccounts := OrderedCollection new.
	totalAccounts addAll: (accounts select:[:aPortfolioElement | aPortfolioElement class = ReceptiveAccount]).
	
	self portfolios do: [:aPortfolio | totalAccounts addAll: aPortfolio allAccounts].
	
	^totalAccounts.! !
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 20:55:29' prior: 50866610!
allAccounts
	
	|totalAccounts|
	
	totalAccounts := OrderedCollection new.
	totalAccounts addAll: (accounts select:[:aPortfolioElement | aPortfolioElement class = ReceptiveAccount]).
	
	self portfolios do: [:aPortfolio | totalAccounts addAll: aPortfolio allAccounts].
	
	^totalAccounts.! !

!testRun: #PortfolioTest #test01BalanceOfEmptyPortfolioEquals0 stamp: 'G.L.S. 5/23/2021 20:55:31'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance stamp: 'G.L.S. 5/23/2021 20:55:31'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts stamp: 'G.L.S. 5/23/2021 20:55:31'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioTransactionsAreAnEmptyCollection stamp: 'G.L.S. 5/23/2021 20:55:31'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfAPortfolioWithOneAccountEqualsTheAccountTransactions stamp: 'G.L.S. 5/23/2021 20:55:31'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOnAPortfolioWithAnAccountOnAnExistingTransactionReturnsTrue stamp: 'G.L.S. 5/23/2021 20:55:31'!
PASSED!

!testRun: #PortfolioTest #test07hasRegisteredDoesNotReturnTrueOnATransactionOfAnAccountNotInsideThePortfolio stamp: 'G.L.S. 5/23/2021 20:55:31'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'G.L.S. 5/23/2021 20:55:31'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'G.L.S. 5/23/2021 20:55:31'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'G.L.S. 5/23/2021 20:55:31'!
PASSED!
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 20:57:43' prior: 50866394!
addPortfolioElement: aReceptiveAccount

	"(aReceptiveAccount class = Portfolio) ifTrue: [
		(self allAccounts anySatisfy: [:anAccount | aReceptiveAccount hasAccount: anAccount])
			ifTrue: [self error: self class AccountAlreadyExistsError]
		]."
	
	(self hasAccount: aReceptiveAccount) ifTrue: [self error: self class AccountAlreadyExistsError].
	(self allAccounts anySatisfy: [:anAccount | aReceptiveAccount hasAccount: anAccount]) ifTrue: [self error: self class AccountAlreadyExistsError].
	
	accounts add: aReceptiveAccount.! !

!testRun: #PortfolioTest #test01BalanceOfEmptyPortfolioEquals0 stamp: 'G.L.S. 5/23/2021 20:59:40'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance stamp: 'G.L.S. 5/23/2021 20:59:40'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts stamp: 'G.L.S. 5/23/2021 20:59:40'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioTransactionsAreAnEmptyCollection stamp: 'G.L.S. 5/23/2021 20:59:40'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfAPortfolioWithOneAccountEqualsTheAccountTransactions stamp: 'G.L.S. 5/23/2021 20:59:40'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOnAPortfolioWithAnAccountOnAnExistingTransactionReturnsTrue stamp: 'G.L.S. 5/23/2021 20:59:40'!
PASSED!

!testRun: #PortfolioTest #test07hasRegisteredDoesNotReturnTrueOnATransactionOfAnAccountNotInsideThePortfolio stamp: 'G.L.S. 5/23/2021 20:59:40'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'G.L.S. 5/23/2021 20:59:40'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'G.L.S. 5/23/2021 20:59:40'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'G.L.S. 5/23/2021 20:59:40'!
PASSED!
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 21:00:03' prior: 50866673!
addPortfolioElement: aReceptiveAccount
	
	(self hasAccount: aReceptiveAccount) ifTrue: [self error: self class AccountAlreadyExistsError].
	(self allAccounts anySatisfy: [:anAccount | aReceptiveAccount hasAccount: anAccount]) ifTrue: [self error: self class AccountAlreadyExistsError].
	
	accounts add: aReceptiveAccount.! !
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 21:03:08' prior: 50866730!
addPortfolioElement: aReceptiveAccount
	
	"(self hasAccount: aReceptiveAccount) ifTrue: [self error: self class AccountAlreadyExistsError]."
	(self allAccounts anySatisfy: [:anAccount | aReceptiveAccount hasAccount: anAccount]) ifTrue: [self error: self class AccountAlreadyExistsError].
	
	accounts add: aReceptiveAccount.! !

!testRun: #PortfolioTest #test01BalanceOfEmptyPortfolioEquals0 stamp: 'G.L.S. 5/23/2021 21:03:10'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance stamp: 'G.L.S. 5/23/2021 21:03:10'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts stamp: 'G.L.S. 5/23/2021 21:03:10'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioTransactionsAreAnEmptyCollection stamp: 'G.L.S. 5/23/2021 21:03:10'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfAPortfolioWithOneAccountEqualsTheAccountTransactions stamp: 'G.L.S. 5/23/2021 21:03:10'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOnAPortfolioWithAnAccountOnAnExistingTransactionReturnsTrue stamp: 'G.L.S. 5/23/2021 21:03:10'!
PASSED!

!testRun: #PortfolioTest #test07hasRegisteredDoesNotReturnTrueOnATransactionOfAnAccountNotInsideThePortfolio stamp: 'G.L.S. 5/23/2021 21:03:10'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'G.L.S. 5/23/2021 21:03:10'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'G.L.S. 5/23/2021 21:03:10'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'G.L.S. 5/23/2021 21:03:10'!
PASSED!
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 21:04:16' prior: 50866744!
addPortfolioElement: aReceptiveAccount
	
	(self allAccounts anySatisfy: [:anAccount | aReceptiveAccount hasAccount: anAccount]) ifTrue: [self error: self class AccountAlreadyExistsError].
	
	accounts add: aReceptiveAccount.! !
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 21:05:44'!
hasorIsAccount: aReceptiveAccount
	
	^(accounts anySatisfy: [:aPortfolioElement | aPortfolioElement hasAccount: aReceptiveAccount]).! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/23/2021 21:05:44'!
hasorIsAccount: aReceptiveAccount
	^self = aReceptiveAccount.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/23/2021 21:05:44' prior: 50866795!
addPortfolioElement: aReceptiveAccount
	
	(self allAccounts anySatisfy: [:anAccount | aReceptiveAccount hasorIsAccount: anAccount]) ifTrue: [self error: self class AccountAlreadyExistsError].
	
	accounts add: aReceptiveAccount.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/23/2021 21:05:44' prior: 50866546!
hasAccount: aReceptiveAccount
	
	^(accounts anySatisfy: [:aPortfolioElement | aPortfolioElement hasorIsAccount: aReceptiveAccount]).! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/23/2021 21:05:44' prior: 50866805!
hasorIsAccount: aReceptiveAccount
	
	^(accounts anySatisfy: [:aPortfolioElement | aPortfolioElement hasorIsAccount: aReceptiveAccount]).! !

!methodRemoval: Portfolio #hasAccount: stamp: 'G.L.S. 5/23/2021 21:05:44'!
hasAccount: aReceptiveAccount
	
	^(accounts anySatisfy: [:aPortfolioElement | aPortfolioElement hasorIsAccount: aReceptiveAccount]).!

!methodRemoval: ReceptiveAccount #hasAccount: stamp: 'G.L.S. 5/23/2021 21:05:44'!
hasAccount: aReceptiveAccount
	^self = aReceptiveAccount.!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/23/2021 21:06:08'!
hasOrIsAccount: aReceptiveAccount
	^self = aReceptiveAccount.! !
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 21:06:08'!
hasOrIsAccount: aReceptiveAccount
	
	^(accounts anySatisfy: [:aPortfolioElement | aPortfolioElement hasorIsAccount: aReceptiveAccount]).! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/23/2021 21:06:08' prior: 50866837!
hasorIsAccount: aReceptiveAccount
	
	^(accounts anySatisfy: [:aPortfolioElement | aPortfolioElement hasOrIsAccount: aReceptiveAccount]).! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/23/2021 21:06:08' prior: 50866818!
addPortfolioElement: aReceptiveAccount
	
	(self allAccounts anySatisfy: [:anAccount | aReceptiveAccount hasOrIsAccount: anAccount]) ifTrue: [self error: self class AccountAlreadyExistsError].
	
	accounts add: aReceptiveAccount.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/23/2021 21:06:08' prior: 50866861!
hasOrIsAccount: aReceptiveAccount
	
	^(accounts anySatisfy: [:aPortfolioElement | aPortfolioElement hasOrIsAccount: aReceptiveAccount]).! !

!methodRemoval: ReceptiveAccount #hasorIsAccount: stamp: 'G.L.S. 5/23/2021 21:06:08'!
hasorIsAccount: aReceptiveAccount
	^self = aReceptiveAccount.!

!methodRemoval: Portfolio #hasorIsAccount: stamp: 'G.L.S. 5/23/2021 21:06:08'!
hasorIsAccount: aReceptiveAccount
	
	^(accounts anySatisfy: [:aPortfolioElement | aPortfolioElement hasOrIsAccount: aReceptiveAccount]).!
!Behavior method!
createNew
	^ [
	([
	(Portfolio
		cover: (14 to: 22)
		declaredAt: (14 to: 22)) new ] valueCoveringAll:
		{24 to: 26}) initialize ] valueCoveringAll:
		{28 to: 37}.! !
!Behavior method!
initialize
	(accounts _ [
	(OrderedCollection
		cover: (25 to: 41)
		declaredAt: (25 to: 41)) new ] valueCoveringAll:
		{43 to: 45})
		cover: (13 to: 20)
		declaredAt: (13 to: 20).! !
!Behavior method!
balance
	^ [
	(accounts
		cover: (11 to: 18)
		declaredAt: (11 to: 18))
		sum: [ :aPortfolioElement |
			[
			(aPortfolioElement
				cover: (47 to: 63)
				declaredAt: (27 to: 43)) balance ] valueCoveringAll:
				{65 to: 71} ]
		ifEmpty: [
			0 coverAll:
				{84 to: 84} ]] valueCoveringAll:
		{20 to: 23. 74 to: 81}.! !

!testRun: #PortfolioTest #test01BalanceOfEmptyPortfolioEquals0 stamp: 'G.L.S. 5/23/2021 21:06:25'!
PASSED!
!Behavior method!
initialize
	(transactions _ [
	(OrderedCollection
		cover: (30 to: 46)
		declaredAt: (30 to: 46)) new ] valueCoveringAll:
		{48 to: 50})
		cover: (14 to: 25)
		declaredAt: (14 to: 25).! !
!Behavior method!
register: aValue on: account
	| transaction |
	(transaction _ [
	(self coverAll:
		{66 to: 69}) for:
		(aValue
			cover: (76 to: 81)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{71 to: 74})
		cover: (51 to: 61)
		declaredAt: (34 to: 44).
	[
	(account
		cover: (85 to: 91)
		declaredAt: (22 to: 28)) register:
		(transaction
			cover: (103 to: 113)
			declaredAt: (34 to: 44)) ] valueCoveringAll:
		{93 to: 101}.
	^ transaction
		cover: (122 to: 132)
		declaredAt: (34 to: 44).! !
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
register: aTransaction
	[
	(transactions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) add:
		(aTransaction
			cover: (44 to: 55)
			declaredAt: (11 to: 22)) ] valueCoveringAll:
		{39 to: 42}.! !
!Behavior method!
addPortfolioElement: aReceptiveAccount
	[
	([
	([
	(self coverAll:
		{44 to: 47}) allAccounts ] valueCoveringAll:
		{49 to: 59}) anySatisfy: [ :anAccount |
		[
		(aReceptiveAccount
			cover: (87 to: 103)
			declaredAt: (22 to: 38)) hasOrIsAccount:
			(anAccount
				cover: (121 to: 129)
				declaredAt: (75 to: 83)) ] valueCoveringAll:
			{105 to: 119} ]] valueCoveringAll:
		{61 to: 71}) ifTrue: [
		[
		(self coverAll:
			{142 to: 145}) error:
			([
			([
			(self coverAll:
				{154 to: 157}) class ] valueCoveringAll:
				{159 to: 163}) AccountAlreadyExistsError ] valueCoveringAll:
				{165 to: 189}) ] valueCoveringAll:
			{147 to: 152} ]] valueCoveringAll:
		{133 to: 139}.
	[
	(accounts
		cover: (196 to: 203)
		declaredAt: (196 to: 203)) add:
		(aReceptiveAccount
			cover: (210 to: 226)
			declaredAt: (22 to: 38)) ] valueCoveringAll:
		{205 to: 208}.! !
!Behavior method!
allAccounts
	| totalAccounts |
	(totalAccounts _ [
	(OrderedCollection
		cover: (52 to: 68)
		declaredAt: (52 to: 68)) new ] valueCoveringAll:
		{70 to: 72})
		cover: (35 to: 47)
		declaredAt: (17 to: 29).
	[
	(totalAccounts
		cover: (76 to: 88)
		declaredAt: (17 to: 29)) addAll:
		([
		(accounts
			cover: (99 to: 106)
			declaredAt: (99 to: 106)) select: [ :aPortfolioElement |
			[
			([
			(aPortfolioElement
				cover: (137 to: 153)
				declaredAt: (117 to: 133)) class ] valueCoveringAll:
				{155 to: 159}) =
				(ReceptiveAccount
					cover: (163 to: 178)
					declaredAt: (163 to: 178)) ] valueCoveringAll:
				{161 to: 161} ]] valueCoveringAll:
			{108 to: 114}) ] valueCoveringAll:
		{90 to: 96}.
	[
	([
	(self coverAll:
		{186 to: 189}) portfolios ] valueCoveringAll:
		{191 to: 200}) do: [ :aPortfolio |
		[
		(totalAccounts
			cover: (221 to: 233)
			declaredAt: (17 to: 29)) addAll:
			([
			(aPortfolio
				cover: (243 to: 252)
				declaredAt: (208 to: 217)) allAccounts ] valueCoveringAll:
				{254 to: 264}) ] valueCoveringAll:
			{235 to: 241} ]] valueCoveringAll:
		{202 to: 204}.
	^ totalAccounts
		cover: (272 to: 284)
		declaredAt: (17 to: 29).! !
!Behavior method!
portfolios
	^ [
	(accounts
		cover: (15 to: 22)
		declaredAt: (15 to: 22)) select: [ :aPortfolioElement |
		[
		([
		(aPortfolioElement
			cover: (53 to: 69)
			declaredAt: (33 to: 49)) class ] valueCoveringAll:
			{71 to: 75}) =
			(Portfolio
				cover: (79 to: 87)
				declaredAt: (79 to: 87)) ] valueCoveringAll:
			{77 to: 77} ]] valueCoveringAll:
		{24 to: 30}.! !
!Behavior method!
balance
	| total |
	(total _ 0 coverAll:
		{32 to: 32})
		cover: (23 to: 27)
		declaredAt: (13 to: 17).
	[
	(transactions
		cover: (38 to: 49)
		declaredAt: (38 to: 49)) do: [ :aTransaction |
		(total _ [
		(aTransaction
			cover: (81 to: 92)
			declaredAt: (57 to: 68)) performOperationOnBalance:
			(total
				cover: (72 to: 76)
				declaredAt: (13 to: 17)) ] valueCoveringAll:
			{94 to: 119})
			cover: (121 to: 125)
			declaredAt: (13 to: 17) ]] valueCoveringAll:
		{51 to: 53}.
	^ total
		cover: (133 to: 137)
		declaredAt: (13 to: 17).! !
!Behavior method!
performOperationOnBalance: aTotal
	^ [
	(aTotal
		cover: (39 to: 44)
		declaredAt: (28 to: 33)) +
		(value
			cover: (48 to: 52)
			declaredAt: (48 to: 52)) ] valueCoveringAll:
		{46 to: 46}.! !

!testRun: #PortfolioTest #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance stamp: 'G.L.S. 5/23/2021 21:06:25'!
PASSED!
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
hasOrIsAccount: aReceptiveAccount
	^ [
	(self coverAll:
		{37 to: 40}) =
		(aReceptiveAccount
			cover: (44 to: 60)
			declaredAt: (17 to: 33)) ] valueCoveringAll:
		{42 to: 42}.! !
!Behavior method!
performOperationOnBalance: aTotal
	^ [
	(aTotal
		cover: (39 to: 44)
		declaredAt: (28 to: 33)) -
		(value
			cover: (48 to: 52)
			declaredAt: (48 to: 52)) ] valueCoveringAll:
		{46 to: 46}.! !

!testRun: #PortfolioTest #test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts stamp: 'G.L.S. 5/23/2021 21:06:25'!
PASSED!
!Behavior method!
transactions
	| totalTransactions |
	(totalTransactions _ [
	(OrderedCollection
		cover: (59 to: 75)
		declaredAt: (59 to: 75)) new ] valueCoveringAll:
		{77 to: 79})
		cover: (38 to: 54)
		declaredAt: (16 to: 32).
	[
	(accounts
		cover: (85 to: 92)
		declaredAt: (85 to: 92)) do: [ :anAccount |
		[
		(totalTransactions
			cover: (112 to: 128)
			declaredAt: (16 to: 32)) addAll:
			([
			(anAccount
				cover: (138 to: 146)
				declaredAt: (100 to: 108)) transactions ] valueCoveringAll:
				{148 to: 159}) ] valueCoveringAll:
			{130 to: 136} ]] valueCoveringAll:
		{94 to: 96}.
	^ totalTransactions
		cover: (167 to: 183)
		declaredAt: (16 to: 32).! !

!testRun: #PortfolioTest #test04EmptyPortfolioTransactionsAreAnEmptyCollection stamp: 'G.L.S. 5/23/2021 21:06:25'!
PASSED!
!Behavior method!
transactions
	^ [
	(transactions
		cover: (19 to: 30)
		declaredAt: (19 to: 30)) copy ] valueCoveringAll:
		{32 to: 35}.! !

!testRun: #PortfolioTest #test05TransactionsOfAPortfolioWithOneAccountEqualsTheAccountTransactions stamp: 'G.L.S. 5/23/2021 21:06:25'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(accounts
		cover: (32 to: 39)
		declaredAt: (32 to: 39)) anySatisfy: [ :aPortfolioElement |
		[
		(aPortfolioElement
			cover: (75 to: 91)
			declaredAt: (55 to: 71)) hasRegistered:
			(aTransaction
				cover: (108 to: 119)
				declaredAt: (16 to: 27)) ] valueCoveringAll:
			{93 to: 106} ]] valueCoveringAll:
		{41 to: 51}.! !
!Behavior method!
hasRegistered: aTransaction
	^ [
	(transactions
		cover: (33 to: 44)
		declaredAt: (33 to: 44)) includes:
		(aTransaction
			cover: (56 to: 67)
			declaredAt: (16 to: 27)) ] valueCoveringAll:
		{46 to: 54}.! !

!testRun: #PortfolioTest #test06hasRegisteredOnAPortfolioWithAnAccountOnAnExistingTransactionReturnsTrue stamp: 'G.L.S. 5/23/2021 21:06:25'!
PASSED!

!testRun: #PortfolioTest #test07hasRegisteredDoesNotReturnTrueOnATransactionOfAnAccountNotInsideThePortfolio stamp: 'G.L.S. 5/23/2021 21:06:25'!
PASSED!
!Behavior method!
AccountAlreadyExistsError
	^ 'La cuenta ya existe!!!!!!' coverAll:
		{29 to: 52}.! !

!testRun: #PortfolioTest #test08 stamp: 'G.L.S. 5/23/2021 21:06:25'!
PASSED!
!Behavior method!
hasOrIsAccount: aReceptiveAccount
	^ [
	(accounts
		cover: (40 to: 47)
		declaredAt: (40 to: 47)) anySatisfy: [ :aPortfolioElement |
		[
		(aPortfolioElement
			cover: (83 to: 99)
			declaredAt: (63 to: 79)) hasOrIsAccount:
			(aReceptiveAccount
				cover: (117 to: 133)
				declaredAt: (17 to: 33)) ] valueCoveringAll:
			{101 to: 115} ]] valueCoveringAll:
		{49 to: 59}.! !

!testRun: #PortfolioTest #test09 stamp: 'G.L.S. 5/23/2021 21:06:25'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'G.L.S. 5/23/2021 21:06:25'!
PASSED!
!Behavior method!
createNew
	^ [
	([
	(Portfolio
		cover: (14 to: 22)
		declaredAt: (14 to: 22)) new ] valueCoveringAll:
		{24 to: 26}) initialize ] valueCoveringAll:
		{28 to: 37}.! !
!Behavior method!
initialize
	(accounts _ [
	(OrderedCollection
		cover: (25 to: 41)
		declaredAt: (25 to: 41)) new ] valueCoveringAll:
		{43 to: 45})
		cover: (13 to: 20)
		declaredAt: (13 to: 20).! !
!Behavior method!
balance
	^ [
	(accounts
		cover: (11 to: 18)
		declaredAt: (11 to: 18))
		sum: [ :aPortfolioElement |
			[
			(aPortfolioElement
				cover: (47 to: 63)
				declaredAt: (27 to: 43)) balance ] valueCoveringAll:
				{65 to: 71} ]
		ifEmpty: [
			0 coverAll:
				{84 to: 84} ]] valueCoveringAll:
		{20 to: 23. 74 to: 81}.! !

!testRun: #PortfolioTest #test01BalanceOfEmptyPortfolioEquals0 stamp: 'G.L.S. 5/23/2021 21:08:07'!
PASSED!
!Behavior method!
initialize
	(transactions _ [
	(OrderedCollection
		cover: (30 to: 46)
		declaredAt: (30 to: 46)) new ] valueCoveringAll:
		{48 to: 50})
		cover: (14 to: 25)
		declaredAt: (14 to: 25).! !
!Behavior method!
register: aValue on: account
	| transaction |
	(transaction _ [
	(self coverAll:
		{66 to: 69}) for:
		(aValue
			cover: (76 to: 81)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{71 to: 74})
		cover: (51 to: 61)
		declaredAt: (34 to: 44).
	[
	(account
		cover: (85 to: 91)
		declaredAt: (22 to: 28)) register:
		(transaction
			cover: (103 to: 113)
			declaredAt: (34 to: 44)) ] valueCoveringAll:
		{93 to: 101}.
	^ transaction
		cover: (122 to: 132)
		declaredAt: (34 to: 44).! !
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
register: aTransaction
	[
	(transactions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) add:
		(aTransaction
			cover: (44 to: 55)
			declaredAt: (11 to: 22)) ] valueCoveringAll:
		{39 to: 42}.! !
!Behavior method!
addPortfolioElement: aReceptiveAccount
	[
	([
	([
	(self coverAll:
		{44 to: 47}) allAccounts ] valueCoveringAll:
		{49 to: 59}) anySatisfy: [ :anAccount |
		[
		(aReceptiveAccount
			cover: (87 to: 103)
			declaredAt: (22 to: 38)) hasOrIsAccount:
			(anAccount
				cover: (121 to: 129)
				declaredAt: (75 to: 83)) ] valueCoveringAll:
			{105 to: 119} ]] valueCoveringAll:
		{61 to: 71}) ifTrue: [
		[
		(self coverAll:
			{142 to: 145}) error:
			([
			([
			(self coverAll:
				{154 to: 157}) class ] valueCoveringAll:
				{159 to: 163}) AccountAlreadyExistsError ] valueCoveringAll:
				{165 to: 189}) ] valueCoveringAll:
			{147 to: 152} ]] valueCoveringAll:
		{133 to: 139}.
	[
	(accounts
		cover: (196 to: 203)
		declaredAt: (196 to: 203)) add:
		(aReceptiveAccount
			cover: (210 to: 226)
			declaredAt: (22 to: 38)) ] valueCoveringAll:
		{205 to: 208}.! !
!Behavior method!
allAccounts
	| totalAccounts |
	(totalAccounts _ [
	(OrderedCollection
		cover: (52 to: 68)
		declaredAt: (52 to: 68)) new ] valueCoveringAll:
		{70 to: 72})
		cover: (35 to: 47)
		declaredAt: (17 to: 29).
	[
	(totalAccounts
		cover: (76 to: 88)
		declaredAt: (17 to: 29)) addAll:
		([
		(accounts
			cover: (99 to: 106)
			declaredAt: (99 to: 106)) select: [ :aPortfolioElement |
			[
			([
			(aPortfolioElement
				cover: (137 to: 153)
				declaredAt: (117 to: 133)) class ] valueCoveringAll:
				{155 to: 159}) =
				(ReceptiveAccount
					cover: (163 to: 178)
					declaredAt: (163 to: 178)) ] valueCoveringAll:
				{161 to: 161} ]] valueCoveringAll:
			{108 to: 114}) ] valueCoveringAll:
		{90 to: 96}.
	[
	([
	(self coverAll:
		{186 to: 189}) portfolios ] valueCoveringAll:
		{191 to: 200}) do: [ :aPortfolio |
		[
		(totalAccounts
			cover: (221 to: 233)
			declaredAt: (17 to: 29)) addAll:
			([
			(aPortfolio
				cover: (243 to: 252)
				declaredAt: (208 to: 217)) allAccounts ] valueCoveringAll:
				{254 to: 264}) ] valueCoveringAll:
			{235 to: 241} ]] valueCoveringAll:
		{202 to: 204}.
	^ totalAccounts
		cover: (272 to: 284)
		declaredAt: (17 to: 29).! !
!Behavior method!
portfolios
	^ [
	(accounts
		cover: (15 to: 22)
		declaredAt: (15 to: 22)) select: [ :aPortfolioElement |
		[
		([
		(aPortfolioElement
			cover: (53 to: 69)
			declaredAt: (33 to: 49)) class ] valueCoveringAll:
			{71 to: 75}) =
			(Portfolio
				cover: (79 to: 87)
				declaredAt: (79 to: 87)) ] valueCoveringAll:
			{77 to: 77} ]] valueCoveringAll:
		{24 to: 30}.! !
!Behavior method!
balance
	| total |
	(total _ 0 coverAll:
		{32 to: 32})
		cover: (23 to: 27)
		declaredAt: (13 to: 17).
	[
	(transactions
		cover: (38 to: 49)
		declaredAt: (38 to: 49)) do: [ :aTransaction |
		(total _ [
		(aTransaction
			cover: (81 to: 92)
			declaredAt: (57 to: 68)) performOperationOnBalance:
			(total
				cover: (72 to: 76)
				declaredAt: (13 to: 17)) ] valueCoveringAll:
			{94 to: 119})
			cover: (121 to: 125)
			declaredAt: (13 to: 17) ]] valueCoveringAll:
		{51 to: 53}.
	^ total
		cover: (133 to: 137)
		declaredAt: (13 to: 17).! !
!Behavior method!
performOperationOnBalance: aTotal
	^ [
	(aTotal
		cover: (39 to: 44)
		declaredAt: (28 to: 33)) +
		(value
			cover: (48 to: 52)
			declaredAt: (48 to: 52)) ] valueCoveringAll:
		{46 to: 46}.! !

!testRun: #PortfolioTest #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance stamp: 'G.L.S. 5/23/2021 21:08:07'!
PASSED!
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
hasOrIsAccount: aReceptiveAccount
	^ [
	(self coverAll:
		{37 to: 40}) =
		(aReceptiveAccount
			cover: (44 to: 60)
			declaredAt: (17 to: 33)) ] valueCoveringAll:
		{42 to: 42}.! !
!Behavior method!
performOperationOnBalance: aTotal
	^ [
	(aTotal
		cover: (39 to: 44)
		declaredAt: (28 to: 33)) -
		(value
			cover: (48 to: 52)
			declaredAt: (48 to: 52)) ] valueCoveringAll:
		{46 to: 46}.! !

!testRun: #PortfolioTest #test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts stamp: 'G.L.S. 5/23/2021 21:08:07'!
PASSED!
!Behavior method!
transactions
	| totalTransactions |
	(totalTransactions _ [
	(OrderedCollection
		cover: (59 to: 75)
		declaredAt: (59 to: 75)) new ] valueCoveringAll:
		{77 to: 79})
		cover: (38 to: 54)
		declaredAt: (16 to: 32).
	[
	(accounts
		cover: (85 to: 92)
		declaredAt: (85 to: 92)) do: [ :anAccount |
		[
		(totalTransactions
			cover: (112 to: 128)
			declaredAt: (16 to: 32)) addAll:
			([
			(anAccount
				cover: (138 to: 146)
				declaredAt: (100 to: 108)) transactions ] valueCoveringAll:
				{148 to: 159}) ] valueCoveringAll:
			{130 to: 136} ]] valueCoveringAll:
		{94 to: 96}.
	^ totalTransactions
		cover: (167 to: 183)
		declaredAt: (16 to: 32).! !

!testRun: #PortfolioTest #test04EmptyPortfolioTransactionsAreAnEmptyCollection stamp: 'G.L.S. 5/23/2021 21:08:07'!
PASSED!
!Behavior method!
transactions
	^ [
	(transactions
		cover: (19 to: 30)
		declaredAt: (19 to: 30)) copy ] valueCoveringAll:
		{32 to: 35}.! !

!testRun: #PortfolioTest #test05TransactionsOfAPortfolioWithOneAccountEqualsTheAccountTransactions stamp: 'G.L.S. 5/23/2021 21:08:07'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(accounts
		cover: (32 to: 39)
		declaredAt: (32 to: 39)) anySatisfy: [ :aPortfolioElement |
		[
		(aPortfolioElement
			cover: (75 to: 91)
			declaredAt: (55 to: 71)) hasRegistered:
			(aTransaction
				cover: (108 to: 119)
				declaredAt: (16 to: 27)) ] valueCoveringAll:
			{93 to: 106} ]] valueCoveringAll:
		{41 to: 51}.! !
!Behavior method!
hasRegistered: aTransaction
	^ [
	(transactions
		cover: (33 to: 44)
		declaredAt: (33 to: 44)) includes:
		(aTransaction
			cover: (56 to: 67)
			declaredAt: (16 to: 27)) ] valueCoveringAll:
		{46 to: 54}.! !

!testRun: #PortfolioTest #test06hasRegisteredOnAPortfolioWithAnAccountOnAnExistingTransactionReturnsTrue stamp: 'G.L.S. 5/23/2021 21:08:07'!
PASSED!

!testRun: #PortfolioTest #test07hasRegisteredDoesNotReturnTrueOnATransactionOfAnAccountNotInsideThePortfolio stamp: 'G.L.S. 5/23/2021 21:08:07'!
PASSED!
!Behavior method!
AccountAlreadyExistsError
	^ 'La cuenta ya existe!!!!!!' coverAll:
		{29 to: 52}.! !

!testRun: #PortfolioTest #test08 stamp: 'G.L.S. 5/23/2021 21:08:07'!
PASSED!
!Behavior method!
hasOrIsAccount: aReceptiveAccount
	^ [
	(accounts
		cover: (40 to: 47)
		declaredAt: (40 to: 47)) anySatisfy: [ :aPortfolioElement |
		[
		(aPortfolioElement
			cover: (83 to: 99)
			declaredAt: (63 to: 79)) hasOrIsAccount:
			(aReceptiveAccount
				cover: (117 to: 133)
				declaredAt: (17 to: 33)) ] valueCoveringAll:
			{101 to: 115} ]] valueCoveringAll:
		{49 to: 59}.! !

!testRun: #PortfolioTest #test09 stamp: 'G.L.S. 5/23/2021 21:08:07'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'G.L.S. 5/23/2021 21:08:07'!
PASSED!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'G.L.S. 5/23/2021 21:10:09'!
Object subclass: #Portfolio
	instanceVariableNames: 'elements'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/23/2021 21:10:09' prior: 50864296!
hasRegistered: aTransaction
	^ elements anySatisfy: [:aPortfolioElement | aPortfolioElement hasRegistered: aTransaction].
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/23/2021 21:10:09' prior: 50863943!
transactions
	|totalTransactions|
	
	totalTransactions := OrderedCollection new.
	
	elements do: [:anAccount | totalTransactions addAll: anAccount transactions].
	
	^totalTransactions.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/23/2021 21:10:09' prior: 50860356 overrides: 16896425!
initialize
	elements := OrderedCollection new.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/23/2021 21:10:09' prior: 50860421!
balance
	^elements sum: [:aPortfolioElement | aPortfolioElement balance] ifEmpty: [0].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/23/2021 21:10:09' prior: 50866604!
portfolios
	^(elements select:[:aPortfolioElement | aPortfolioElement class = Portfolio]).! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/23/2021 21:10:09' prior: 50866623!
allAccounts
	
	|totalAccounts|
	
	totalAccounts := OrderedCollection new.
	totalAccounts addAll: (elements select:[:aPortfolioElement | aPortfolioElement class = ReceptiveAccount]).
	
	self portfolios do: [:aPortfolio | totalAccounts addAll: aPortfolio allAccounts].
	
	^totalAccounts.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/23/2021 21:10:09' prior: 50866888!
hasOrIsAccount: aReceptiveAccount
	
	^(elements anySatisfy: [:aPortfolioElement | aPortfolioElement hasOrIsAccount: aReceptiveAccount]).! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/23/2021 21:10:09' prior: 50866877!
addPortfolioElement: aReceptiveAccount
	
	(self allAccounts anySatisfy: [:anAccount | aReceptiveAccount hasOrIsAccount: anAccount]) ifTrue: [self error: self class AccountAlreadyExistsError].
	
	elements add: aReceptiveAccount.! !

!testRun: #PortfolioTest #test01BalanceOfEmptyPortfolioEquals0 stamp: 'G.L.S. 5/23/2021 21:10:14'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance stamp: 'G.L.S. 5/23/2021 21:10:14'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts stamp: 'G.L.S. 5/23/2021 21:10:14'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioTransactionsAreAnEmptyCollection stamp: 'G.L.S. 5/23/2021 21:10:14'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfAPortfolioWithOneAccountEqualsTheAccountTransactions stamp: 'G.L.S. 5/23/2021 21:10:14'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOnAPortfolioWithAnAccountOnAnExistingTransactionReturnsTrue stamp: 'G.L.S. 5/23/2021 21:10:14'!
PASSED!

!testRun: #PortfolioTest #test07hasRegisteredDoesNotReturnTrueOnATransactionOfAnAccountNotInsideThePortfolio stamp: 'G.L.S. 5/23/2021 21:10:14'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'G.L.S. 5/23/2021 21:10:14'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'G.L.S. 5/23/2021 21:10:14'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'G.L.S. 5/23/2021 21:10:14'!
PASSED!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'G.L.S. 5/23/2021 21:10:36'!
Object subclass: #Portfolio
	instanceVariableNames: 'portfolioElements'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/23/2021 21:10:36' prior: 50867505!
hasRegistered: aTransaction
	^ portfolioElements anySatisfy: [:aPortfolioElement | aPortfolioElement hasRegistered: aTransaction].
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/23/2021 21:10:36' prior: 50867512!
transactions
	|totalTransactions|
	
	totalTransactions := OrderedCollection new.
	
	portfolioElements do: [:anAccount | totalTransactions addAll: anAccount transactions].
	
	^totalTransactions.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/23/2021 21:10:36' prior: 50867522 overrides: 16896425!
initialize
	portfolioElements := OrderedCollection new.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/23/2021 21:10:36' prior: 50867527!
balance
	^portfolioElements sum: [:aPortfolioElement | aPortfolioElement balance] ifEmpty: [0].! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/23/2021 21:10:36' prior: 50867533!
portfolios
	^(portfolioElements select:[:aPortfolioElement | aPortfolioElement class = Portfolio]).! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/23/2021 21:10:36' prior: 50867539!
allAccounts
	
	|totalAccounts|
	
	totalAccounts := OrderedCollection new.
	totalAccounts addAll: (portfolioElements select:[:aPortfolioElement | aPortfolioElement class = ReceptiveAccount]).
	
	self portfolios do: [:aPortfolio | totalAccounts addAll: aPortfolio allAccounts].
	
	^totalAccounts.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/23/2021 21:10:36' prior: 50867552!
hasOrIsAccount: aReceptiveAccount
	
	^(portfolioElements anySatisfy: [:aPortfolioElement | aPortfolioElement hasOrIsAccount: aReceptiveAccount]).! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/23/2021 21:10:36' prior: 50867560!
addPortfolioElement: aReceptiveAccount
	
	(self allAccounts anySatisfy: [:anAccount | aReceptiveAccount hasOrIsAccount: anAccount]) ifTrue: [self error: self class AccountAlreadyExistsError].
	
	portfolioElements add: aReceptiveAccount.! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/23/2021 21:11:35' prior: 50865640!
test09

	|portfolio portfolio2 account|
	
	portfolio := Portfolio createNew.
	portfolio2 := Portfolio createNew.
	
	account := ReceptiveAccount new.
	portfolio2 addPortfolioElement: account.
	
	portfolio addPortfolioElement: Portfolio new.
	portfolio addPortfolioElement: Portfolio new.
	portfolio addPortfolioElement: Portfolio new.
	
	self should: [
			portfolio addPortfolioElement: account.
			portfolio addPortfolioElement: portfolio2.
			] 
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText  = Portfolio AccountAlreadyExistsError.
			].! !

!testRun: #PortfolioTest #test09 stamp: 'G.L.S. 5/23/2021 21:11:38'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfEmptyPortfolioEquals0 stamp: 'G.L.S. 5/23/2021 21:11:38'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance stamp: 'G.L.S. 5/23/2021 21:11:38'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts stamp: 'G.L.S. 5/23/2021 21:11:38'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioTransactionsAreAnEmptyCollection stamp: 'G.L.S. 5/23/2021 21:11:38'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfAPortfolioWithOneAccountEqualsTheAccountTransactions stamp: 'G.L.S. 5/23/2021 21:11:38'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOnAPortfolioWithAnAccountOnAnExistingTransactionReturnsTrue stamp: 'G.L.S. 5/23/2021 21:11:38'!
PASSED!

!testRun: #PortfolioTest #test07hasRegisteredDoesNotReturnTrueOnATransactionOfAnAccountNotInsideThePortfolio stamp: 'G.L.S. 5/23/2021 21:11:38'!
PASSED!

!testRun: #PortfolioTest #test08 stamp: 'G.L.S. 5/23/2021 21:11:38'!
PASSED!

!testRun: #PortfolioTest #test09 stamp: 'G.L.S. 5/23/2021 21:11:38'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'G.L.S. 5/23/2021 21:11:38'!
PASSED!
!Behavior method!
createNew
	^ [
	([
	(Portfolio
		cover: (14 to: 22)
		declaredAt: (14 to: 22)) new ] valueCoveringAll:
		{24 to: 26}) initialize ] valueCoveringAll:
		{28 to: 37}.! !
!Behavior method!
initialize
	(portfolioElements _ [
	(OrderedCollection
		cover: (34 to: 50)
		declaredAt: (34 to: 50)) new ] valueCoveringAll:
		{52 to: 54})
		cover: (13 to: 29)
		declaredAt: (13 to: 29).! !
!Behavior method!
balance
	^ [
	(portfolioElements
		cover: (11 to: 27)
		declaredAt: (11 to: 27))
		sum: [ :aPortfolioElement |
			[
			(aPortfolioElement
				cover: (56 to: 72)
				declaredAt: (36 to: 52)) balance ] valueCoveringAll:
				{74 to: 80} ]
		ifEmpty: [
			0 coverAll:
				{93 to: 93} ]] valueCoveringAll:
		{29 to: 32. 83 to: 90}.! !

!testRun: #PortfolioTest #test01BalanceOfEmptyPortfolioEquals0 stamp: 'G.L.S. 5/23/2021 21:11:42'!
PASSED!
!Behavior method!
initialize
	(transactions _ [
	(OrderedCollection
		cover: (30 to: 46)
		declaredAt: (30 to: 46)) new ] valueCoveringAll:
		{48 to: 50})
		cover: (14 to: 25)
		declaredAt: (14 to: 25).! !
!Behavior method!
register: aValue on: account
	| transaction |
	(transaction _ [
	(self coverAll:
		{66 to: 69}) for:
		(aValue
			cover: (76 to: 81)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{71 to: 74})
		cover: (51 to: 61)
		declaredAt: (34 to: 44).
	[
	(account
		cover: (85 to: 91)
		declaredAt: (22 to: 28)) register:
		(transaction
			cover: (103 to: 113)
			declaredAt: (34 to: 44)) ] valueCoveringAll:
		{93 to: 101}.
	^ transaction
		cover: (122 to: 132)
		declaredAt: (34 to: 44).! !
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
register: aTransaction
	[
	(transactions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) add:
		(aTransaction
			cover: (44 to: 55)
			declaredAt: (11 to: 22)) ] valueCoveringAll:
		{39 to: 42}.! !
!Behavior method!
addPortfolioElement: aReceptiveAccount
	[
	([
	([
	(self coverAll:
		{44 to: 47}) allAccounts ] valueCoveringAll:
		{49 to: 59}) anySatisfy: [ :anAccount |
		[
		(aReceptiveAccount
			cover: (87 to: 103)
			declaredAt: (22 to: 38)) hasOrIsAccount:
			(anAccount
				cover: (121 to: 129)
				declaredAt: (75 to: 83)) ] valueCoveringAll:
			{105 to: 119} ]] valueCoveringAll:
		{61 to: 71}) ifTrue: [
		[
		(self coverAll:
			{142 to: 145}) error:
			([
			([
			(self coverAll:
				{154 to: 157}) class ] valueCoveringAll:
				{159 to: 163}) AccountAlreadyExistsError ] valueCoveringAll:
				{165 to: 189}) ] valueCoveringAll:
			{147 to: 152} ]] valueCoveringAll:
		{133 to: 139}.
	[
	(portfolioElements
		cover: (196 to: 212)
		declaredAt: (196 to: 212)) add:
		(aReceptiveAccount
			cover: (219 to: 235)
			declaredAt: (22 to: 38)) ] valueCoveringAll:
		{214 to: 217}.! !
!Behavior method!
allAccounts
	| totalAccounts |
	(totalAccounts _ [
	(OrderedCollection
		cover: (52 to: 68)
		declaredAt: (52 to: 68)) new ] valueCoveringAll:
		{70 to: 72})
		cover: (35 to: 47)
		declaredAt: (17 to: 29).
	[
	(totalAccounts
		cover: (76 to: 88)
		declaredAt: (17 to: 29)) addAll:
		([
		(portfolioElements
			cover: (99 to: 115)
			declaredAt: (99 to: 115)) select: [ :aPortfolioElement |
			[
			([
			(aPortfolioElement
				cover: (146 to: 162)
				declaredAt: (126 to: 142)) class ] valueCoveringAll:
				{164 to: 168}) =
				(ReceptiveAccount
					cover: (172 to: 187)
					declaredAt: (172 to: 187)) ] valueCoveringAll:
				{170 to: 170} ]] valueCoveringAll:
			{117 to: 123}) ] valueCoveringAll:
		{90 to: 96}.
	[
	([
	(self coverAll:
		{195 to: 198}) portfolios ] valueCoveringAll:
		{200 to: 209}) do: [ :aPortfolio |
		[
		(totalAccounts
			cover: (230 to: 242)
			declaredAt: (17 to: 29)) addAll:
			([
			(aPortfolio
				cover: (252 to: 261)
				declaredAt: (217 to: 226)) allAccounts ] valueCoveringAll:
				{263 to: 273}) ] valueCoveringAll:
			{244 to: 250} ]] valueCoveringAll:
		{211 to: 213}.
	^ totalAccounts
		cover: (281 to: 293)
		declaredAt: (17 to: 29).! !
!Behavior method!
portfolios
	^ [
	(portfolioElements
		cover: (15 to: 31)
		declaredAt: (15 to: 31)) select: [ :aPortfolioElement |
		[
		([
		(aPortfolioElement
			cover: (62 to: 78)
			declaredAt: (42 to: 58)) class ] valueCoveringAll:
			{80 to: 84}) =
			(Portfolio
				cover: (88 to: 96)
				declaredAt: (88 to: 96)) ] valueCoveringAll:
			{86 to: 86} ]] valueCoveringAll:
		{33 to: 39}.! !
!Behavior method!
balance
	| total |
	(total _ 0 coverAll:
		{32 to: 32})
		cover: (23 to: 27)
		declaredAt: (13 to: 17).
	[
	(transactions
		cover: (38 to: 49)
		declaredAt: (38 to: 49)) do: [ :aTransaction |
		(total _ [
		(aTransaction
			cover: (81 to: 92)
			declaredAt: (57 to: 68)) performOperationOnBalance:
			(total
				cover: (72 to: 76)
				declaredAt: (13 to: 17)) ] valueCoveringAll:
			{94 to: 119})
			cover: (121 to: 125)
			declaredAt: (13 to: 17) ]] valueCoveringAll:
		{51 to: 53}.
	^ total
		cover: (133 to: 137)
		declaredAt: (13 to: 17).! !
!Behavior method!
performOperationOnBalance: aTotal
	^ [
	(aTotal
		cover: (39 to: 44)
		declaredAt: (28 to: 33)) +
		(value
			cover: (48 to: 52)
			declaredAt: (48 to: 52)) ] valueCoveringAll:
		{46 to: 46}.! !

!testRun: #PortfolioTest #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance stamp: 'G.L.S. 5/23/2021 21:11:42'!
PASSED!
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
hasOrIsAccount: aReceptiveAccount
	^ [
	(self coverAll:
		{37 to: 40}) =
		(aReceptiveAccount
			cover: (44 to: 60)
			declaredAt: (17 to: 33)) ] valueCoveringAll:
		{42 to: 42}.! !
!Behavior method!
performOperationOnBalance: aTotal
	^ [
	(aTotal
		cover: (39 to: 44)
		declaredAt: (28 to: 33)) -
		(value
			cover: (48 to: 52)
			declaredAt: (48 to: 52)) ] valueCoveringAll:
		{46 to: 46}.! !

!testRun: #PortfolioTest #test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts stamp: 'G.L.S. 5/23/2021 21:11:42'!
PASSED!
!Behavior method!
transactions
	| totalTransactions |
	(totalTransactions _ [
	(OrderedCollection
		cover: (59 to: 75)
		declaredAt: (59 to: 75)) new ] valueCoveringAll:
		{77 to: 79})
		cover: (38 to: 54)
		declaredAt: (16 to: 32).
	[
	(portfolioElements
		cover: (85 to: 101)
		declaredAt: (85 to: 101)) do: [ :anAccount |
		[
		(totalTransactions
			cover: (121 to: 137)
			declaredAt: (16 to: 32)) addAll:
			([
			(anAccount
				cover: (147 to: 155)
				declaredAt: (109 to: 117)) transactions ] valueCoveringAll:
				{157 to: 168}) ] valueCoveringAll:
			{139 to: 145} ]] valueCoveringAll:
		{103 to: 105}.
	^ totalTransactions
		cover: (176 to: 192)
		declaredAt: (16 to: 32).! !

!testRun: #PortfolioTest #test04EmptyPortfolioTransactionsAreAnEmptyCollection stamp: 'G.L.S. 5/23/2021 21:11:42'!
PASSED!
!Behavior method!
transactions
	^ [
	(transactions
		cover: (19 to: 30)
		declaredAt: (19 to: 30)) copy ] valueCoveringAll:
		{32 to: 35}.! !

!testRun: #PortfolioTest #test05TransactionsOfAPortfolioWithOneAccountEqualsTheAccountTransactions stamp: 'G.L.S. 5/23/2021 21:11:42'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(portfolioElements
		cover: (32 to: 48)
		declaredAt: (32 to: 48)) anySatisfy: [ :aPortfolioElement |
		[
		(aPortfolioElement
			cover: (84 to: 100)
			declaredAt: (64 to: 80)) hasRegistered:
			(aTransaction
				cover: (117 to: 128)
				declaredAt: (16 to: 27)) ] valueCoveringAll:
			{102 to: 115} ]] valueCoveringAll:
		{50 to: 60}.! !
!Behavior method!
hasRegistered: aTransaction
	^ [
	(transactions
		cover: (33 to: 44)
		declaredAt: (33 to: 44)) includes:
		(aTransaction
			cover: (56 to: 67)
			declaredAt: (16 to: 27)) ] valueCoveringAll:
		{46 to: 54}.! !

!testRun: #PortfolioTest #test06hasRegisteredOnAPortfolioWithAnAccountOnAnExistingTransactionReturnsTrue stamp: 'G.L.S. 5/23/2021 21:11:42'!
PASSED!

!testRun: #PortfolioTest #test07hasRegisteredDoesNotReturnTrueOnATransactionOfAnAccountNotInsideThePortfolio stamp: 'G.L.S. 5/23/2021 21:11:42'!
PASSED!
!Behavior method!
AccountAlreadyExistsError
	^ 'La cuenta ya existe!!!!!!' coverAll:
		{29 to: 52}.! !

!testRun: #PortfolioTest #test08 stamp: 'G.L.S. 5/23/2021 21:11:42'!
PASSED!
!Behavior method!
hasOrIsAccount: aReceptiveAccount
	^ [
	(portfolioElements
		cover: (40 to: 56)
		declaredAt: (40 to: 56)) anySatisfy: [ :aPortfolioElement |
		[
		(aPortfolioElement
			cover: (92 to: 108)
			declaredAt: (72 to: 88)) hasOrIsAccount:
			(aReceptiveAccount
				cover: (126 to: 142)
				declaredAt: (17 to: 33)) ] valueCoveringAll:
			{110 to: 124} ]] valueCoveringAll:
		{58 to: 68}.! !

!testRun: #PortfolioTest #test09 stamp: 'G.L.S. 5/23/2021 21:11:42'!
PASSED!

!testRun: #PortfolioTest #test10 stamp: 'G.L.S. 5/23/2021 21:11:42'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/23/2021 21:12:42' prior: 50867685!
test09

	|portfolio portfolio2 account|
	
	portfolio := Portfolio createNew.
	portfolio2 := Portfolio createNew.
	
	account := ReceptiveAccount new.
	portfolio2 addPortfolioElement: account.
	
	self should: [
			portfolio addPortfolioElement: account.
			portfolio addPortfolioElement: portfolio2.
			] 
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText  = Portfolio AccountAlreadyExistsError.
			].! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/23/2021 21:15:30' prior: 50865550!
test08

	|portfolio account|
	
	portfolio := Portfolio createNew.
	
	account := ReceptiveAccount  new.
	
	self should: [
			portfolio addPortfolioElement: account.
			portfolio addPortfolioElement: account.
			] 
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText  = Portfolio AccountAlreadyExistsError.
			].! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/23/2021 21:15:48'!
test08PortfolioCantHaveMultiplesOfTheSameAccount

	|portfolio account|
	
	portfolio := Portfolio createNew.
	
	account := ReceptiveAccount  new.
	
	self should: [
			portfolio addPortfolioElement: account.
			portfolio addPortfolioElement: account.
			] 
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText  = Portfolio AccountAlreadyExistsError.
			].! !

!methodRemoval: PortfolioTest #test08 stamp: 'G.L.S. 5/23/2021 21:15:48'!
test08

	|portfolio account|
	
	portfolio := Portfolio createNew.
	
	account := ReceptiveAccount  new.
	
	self should: [
			portfolio addPortfolioElement: account.
			portfolio addPortfolioElement: account.
			] 
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText  = Portfolio AccountAlreadyExistsError.
			].!
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/23/2021 21:16:40'!
test09PortfolioCantHaveMultipleOfTheSameAccountByAddingAnotherPortfolioWithTheAccounts

	|portfolio portfolio2 account|
	
	portfolio := Portfolio createNew.
	portfolio2 := Portfolio createNew.
	
	account := ReceptiveAccount new.
	portfolio2 addPortfolioElement: account.
	
	self should: [
			portfolio addPortfolioElement: account.
			portfolio addPortfolioElement: portfolio2.
			] 
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText  = Portfolio AccountAlreadyExistsError.
			].! !

!methodRemoval: PortfolioTest #test09 stamp: 'G.L.S. 5/23/2021 21:16:40'!
test09

	|portfolio portfolio2 account|
	
	portfolio := Portfolio createNew.
	portfolio2 := Portfolio createNew.
	
	account := ReceptiveAccount new.
	portfolio2 addPortfolioElement: account.
	
	self should: [
			portfolio addPortfolioElement: account.
			portfolio addPortfolioElement: portfolio2.
			] 
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText  = Portfolio AccountAlreadyExistsError.
			].!
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/23/2021 21:17:15'!
test10PortfolioCanHaveAnotherPortfolioWithDifferentAccounts

	|portfolio portfolio2 account account2 errorHappened|
	
	errorHappened := #No.
	
	portfolio := Portfolio createNew.
	portfolio2 := Portfolio createNew.
	
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	portfolio2 addPortfolioElement: account.
	
	[portfolio addPortfolioElement: account2.
	portfolio addPortfolioElement: portfolio2.] 
		on: Error
		do: [:anError|
			errorHappened := #Si.
			].
	
	self assert: #No equals: errorHappened.
! !

!methodRemoval: PortfolioTest #test10 stamp: 'G.L.S. 5/23/2021 21:17:15'!
test10

	|portfolio portfolio2 account account2 errorHappened|
	
	errorHappened := #No.
	
	portfolio := Portfolio createNew.
	portfolio2 := Portfolio createNew.
	
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	portfolio2 addPortfolioElement: account.
	
	[portfolio addPortfolioElement: account2.
	portfolio addPortfolioElement: portfolio2.] 
		on: Error
		do: [:anError|
			errorHappened := #Si.
			].
	
	self assert: #No equals: errorHappened.
!
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/23/2021 21:17:28' prior: 50868137!
test10PortfolioCanHaveAnotherPortfolioWithDifferentAccounts

	|portfolio portfolio2 account account2 errorHappened|
	
	errorHappened := #No.
	
	portfolio := Portfolio createNew.
	portfolio2 := Portfolio createNew.
	
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	portfolio2 addPortfolioElement: account.
	
	[portfolio addPortfolioElement: account2.
	portfolio addPortfolioElement: portfolio2.]
		on: Error
		do: [:anError|
			errorHappened := #Si.
			].
	
	self assert: #No equals: errorHappened.
! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/23/2021 21:19:13'!
test11

	|portfolio account|
	
	portfolio  := Portfolio new.
! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/23/2021 21:19:39' prior: 50868193!
test11

	|portfolio account|
	
	portfolio  := Portfolio new.
	
	account :=	 ReceptiveAccount new.
! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/23/2021 21:19:55' prior: 50868198!
test11

	|portfolio account|
	
	portfolio  := Portfolio new.
	account :=	 ReceptiveAccount new.
! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/23/2021 21:20:44'!
test12

	|portfolio account|
	
	portfolio := Portfolio createNew.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	portfolio addPortfolioElement: account.
	
	self assert: 100 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/23/2021 21:21:41' prior: 50868210!
test12

	|portfolio portfolio2 account account2 account3|
	
	portfolio := Portfolio createNew.
	portfolio2 := Portfolio createNew.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	account3 := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	portfolio addPortfolioElement: account.
	
	self assert: 100 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/23/2021 21:22:14' prior: 50868221!
test12

	|portfolio portfolio2 account account2 account3|
	
	portfolio := Portfolio createNew.
	portfolio2 := Portfolio createNew.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	account3 := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	portfolio addPortfolioElement: account.
	
	portfolio2 addPortfolioElement: account2.
	portfolio2 addPortfolioElement: account3.
	
	self assert: 100 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/23/2021 21:22:27' prior: 50868238!
test12

	|portfolio portfolio2 account account2 account3|
	
	portfolio := Portfolio createNew.
	portfolio2 := Portfolio createNew.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	account3 := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	portfolio addPortfolioElement: account.
	
	portfolio2 addPortfolioElement: account2.
	portfolio2 addPortfolioElement: account3.
	
	portfolio addPortfolioElement: portfolio2.
	
	self assert: 100 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/23/2021 21:22:32' prior: 50868258!
test12

	|portfolio portfolio2 account account2 account3|
	
	portfolio := Portfolio createNew.
	portfolio2 := Portfolio createNew.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	account3 := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	portfolio addPortfolioElement: account.
	
	portfolio2 addPortfolioElement: account2.
	portfolio2 addPortfolioElement: account3.
	
	portfolio addPortfolioElement: portfolio2.
	
	self assert: 300 equals: portfolio balance.! !

!testRun: #PortfolioTest #test12 stamp: 'G.L.S. 5/23/2021 21:22:35'!
PASSED!

!methodRemoval: PortfolioTest #test12 stamp: 'G.L.S. 5/23/2021 21:26:36'!
test12

	|portfolio portfolio2 account account2 account3|
	
	portfolio := Portfolio createNew.
	portfolio2 := Portfolio createNew.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	account2 := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	account3 := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	portfolio addPortfolioElement: account.
	
	portfolio2 addPortfolioElement: account2.
	portfolio2 addPortfolioElement: account3.
	
	portfolio addPortfolioElement: portfolio2.
	
	self assert: 300 equals: portfolio balance.!

portfolio := Portfolio createNew.
portfolio2 := Portfolio createNew.!
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 22:12:54' prior: 50867666!
hasOrIsAccount: aReceptiveAccount
	
	^(self = aReceptiveAccount ) or: [(portfolioElements anySatisfy: [:aPortfolioElement | aPortfolioElement hasOrIsAccount: aReceptiveAccount])].! !
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 22:13:17' prior: 50868326!
hasOrIsAccount: aReceptiveAccount
	
	^[(portfolioElements anySatisfy: [:aPortfolioElement | aPortfolioElement hasOrIsAccount: aReceptiveAccount])].! !
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 22:13:24' prior: 50868335!
hasOrIsAccount: aReceptiveAccount
	
	^(portfolioElements anySatisfy: [:aPortfolioElement | aPortfolioElement hasOrIsAccount: aReceptiveAccount])! !

!testRun: #PortfolioTest #test01BalanceOfEmptyPortfolioEquals0 stamp: 'G.L.S. 5/23/2021 22:13:27'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance stamp: 'G.L.S. 5/23/2021 22:13:27'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts stamp: 'G.L.S. 5/23/2021 22:13:27'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioTransactionsAreAnEmptyCollection stamp: 'G.L.S. 5/23/2021 22:13:27'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfAPortfolioWithOneAccountEqualsTheAccountTransactions stamp: 'G.L.S. 5/23/2021 22:13:27'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOnAPortfolioWithAnAccountOnAnExistingTransactionReturnsTrue stamp: 'G.L.S. 5/23/2021 22:13:27'!
PASSED!

!testRun: #PortfolioTest #test07hasRegisteredDoesNotReturnTrueOnATransactionOfAnAccountNotInsideThePortfolio stamp: 'G.L.S. 5/23/2021 22:13:27'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCantHaveMultiplesOfTheSameAccount stamp: 'G.L.S. 5/23/2021 22:13:27'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantHaveMultipleOfTheSameAccountByAddingAnotherPortfolioWithTheAccounts stamp: 'G.L.S. 5/23/2021 22:13:27'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanHaveAnotherPortfolioWithDifferentAccounts stamp: 'G.L.S. 5/23/2021 22:13:27'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'G.L.S. 5/23/2021 22:13:27'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/23/2021 22:19:01' prior: 50868204!
test11

	|portfolio |
	
	portfolio  := Portfolio new.
	
	self should: [] 
		raise:  Error
		withExceptionDo: [:anError |
			anError 
			] 
	 
! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/23/2021 22:19:10' prior: 50868396!
test11

	|portfolio|
	
	portfolio  := Portfolio new.
	
	self should: [] 
		raise:  Error
		withExceptionDo: [:anError |
			anError 
			] 
	 
! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/23/2021 22:19:44' prior: 50868404!
test11

	|portfolio|
	
	portfolio  := Portfolio new.
	
	self should: [] 
		raise:  Error
		withExceptionDo: [:anError |
			self assert: anError messageText  = Portfolio PortfolioAlreadyExistsError.
			] 
	 
! !
!Portfolio class methodsFor: 'errors' stamp: 'G.L.S. 5/23/2021 22:20:21'!
PortfolioAlreadyExistsError
	^'Ya existe este portfolio'! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/23/2021 22:20:51' prior: 50868412!
test11

	|portfolio|
	
	portfolio  := Portfolio new.
	
	self should: [portfolio addPortfolioElement: portfolio] 
		raise:  Error
		withExceptionDo: [:anError |
			self assert: anError messageText  = Portfolio PortfolioAlreadyExistsError.
			].
	 
! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/23/2021 22:20:58' prior: 50868426!
test11

	|portfolio|
	
	portfolio  := Portfolio new.
	
	self should: [portfolio addPortfolioElement: portfolio] 
		raise:  Error
		withExceptionDo: [:anError |
			self assert: anError messageText  = Portfolio PortfolioAlreadyExistsError.
			].
	
	 
! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/23/2021 22:20:59' prior: 50868437!
test11

	|portfolio|
	
	portfolio  := Portfolio new.
	
	self should: [portfolio addPortfolioElement: portfolio] 
		raise:  Error
		withExceptionDo: [:anError |
			self assert: anError messageText  = Portfolio PortfolioAlreadyExistsError.
			].
	 
! !

!testRun: #PortfolioTest #test11 stamp: 'G.L.S. 5/23/2021 22:21:02'!
FAILURE!

!testRun: #PortfolioTest #test11 stamp: 'G.L.S. 5/23/2021 22:21:02'!
FAILURE!
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 22:22:53' prior: 50868343!
hasOrIsAccount: aReceptiveAccount
	
	(self = aReceptiveAccount) ifTrue: [self class PortfolioAlreadyExistsError].
	
	^(portfolioElements anySatisfy: [:aPortfolioElement | aPortfolioElement hasOrIsAccount: aReceptiveAccount])! !

!testRun: #PortfolioTest #test11 stamp: 'G.L.S. 5/23/2021 22:23:01'!
FAILURE!

!testRun: #PortfolioTest #test11 stamp: 'G.L.S. 5/23/2021 22:23:01'!
FAILURE!

!testRun: #PortfolioTest #test11 stamp: 'G.L.S. 5/23/2021 22:23:44'!
FAILURE!

!testRun: #PortfolioTest #test11 stamp: 'G.L.S. 5/23/2021 22:23:44'!
FAILURE!
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 22:25:12' prior: 50867674!
addPortfolioElement: aReceptiveAccount
	
	(self portfolios anySatisfy: []).
	(self allAccounts anySatisfy: [:anAccount | aReceptiveAccount hasOrIsAccount: anAccount]) ifTrue: [self error: self class AccountAlreadyExistsError].
	
	portfolioElements add: aReceptiveAccount.! !
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 22:26:12' prior: 50868484!
addPortfolioElement: aReceptiveAccount
	
	(self portfolios anySatisfy: [:aPortfolio | aPortfolio hasOrIsAccount: aReceptiveAccount ]) ifTrue: [self error: self class PortfolioAlreadyExistsError].
	(self allAccounts anySatisfy: [:anAccount | aReceptiveAccount hasOrIsAccount: anAccount]) ifTrue: [self error: self class AccountAlreadyExistsError].
	
	portfolioElements add: aReceptiveAccount.! !
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 22:27:27' prior: 50868496!
addPortfolioElement: aReceptiveAccount
	
	(self = aReceptiveAccount) ifTrue: [self error: self class PortfolioAlreadyExistsError].
	(self allAccounts anySatisfy: [:anAccount | aReceptiveAccount hasOrIsAccount: anAccount]) ifTrue: [self error: self class AccountAlreadyExistsError].
	
	portfolioElements add: aReceptiveAccount.! !
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 22:27:36' prior: 50868464!
hasOrIsAccount: aReceptiveAccount
	
	^(portfolioElements anySatisfy: [:aPortfolioElement | aPortfolioElement hasOrIsAccount: aReceptiveAccount])! !

!testRun: #PortfolioTest #test01BalanceOfEmptyPortfolioEquals0 stamp: 'G.L.S. 5/23/2021 22:27:39'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance stamp: 'G.L.S. 5/23/2021 22:27:39'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts stamp: 'G.L.S. 5/23/2021 22:27:39'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioTransactionsAreAnEmptyCollection stamp: 'G.L.S. 5/23/2021 22:27:39'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfAPortfolioWithOneAccountEqualsTheAccountTransactions stamp: 'G.L.S. 5/23/2021 22:27:39'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOnAPortfolioWithAnAccountOnAnExistingTransactionReturnsTrue stamp: 'G.L.S. 5/23/2021 22:27:39'!
PASSED!

!testRun: #PortfolioTest #test07hasRegisteredDoesNotReturnTrueOnATransactionOfAnAccountNotInsideThePortfolio stamp: 'G.L.S. 5/23/2021 22:27:39'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCantHaveMultiplesOfTheSameAccount stamp: 'G.L.S. 5/23/2021 22:27:39'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantHaveMultipleOfTheSameAccountByAddingAnotherPortfolioWithTheAccounts stamp: 'G.L.S. 5/23/2021 22:27:39'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanHaveAnotherPortfolioWithDifferentAccounts stamp: 'G.L.S. 5/23/2021 22:27:39'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'G.L.S. 5/23/2021 22:27:39'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/23/2021 22:28:08'!
test12

	|portfolio|
	
	portfolio  := Portfolio new.
	
	self should: [portfolio addPortfolioElement: portfolio] 
		raise:  Error
		withExceptionDo: [:anError |
			self assert: anError messageText  = Portfolio PortfolioAlreadyExistsError.
			].
	 
! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/23/2021 22:28:25' prior: 50868579!
test12

	|portfolio portfolio2|
	
	portfolio  := Portfolio new.
	portfolio2  := Portfolio new
	
	self should: [portfolio addPortfolioElement: portfolio] 
		raise:  Error
		withExceptionDo: [:anError |
			self assert: anError messageText  = Portfolio PortfolioAlreadyExistsError.
			].
	 
! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/23/2021 22:28:57' prior: 50868590!
test12

	|portfolio portfolio2|
	
	portfolio  := Portfolio new.
	portfolio2  := Portfolio new.
	
	self should: [
			portfolio addPortfolioElement: portfolio2.
			portfolio2 addPortfolioElement: portfolio.
			] 
		raise:  Error
		withExceptionDo: [:anError |
			self assert: anError messageText  = Portfolio PortfolioAlreadyExistsError.
			].
	 
! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/23/2021 22:30:03' prior: 50868602!
test12

	|portfolio portfolio2 portfolio3|
	
	portfolio  := Portfolio new.
	portfolio2  := Portfolio new.	
	portfolio3  := Portfolio new.
	
	self should: [
			portfolio addPortfolioElement: portfolio2.
			portfolio2 addPortfolioElement: portfolio3.
			portfolio2 addPortfolioElement: portfolio3.
			] 
		raise:  Error
		withExceptionDo: [:anError |
			self assert: anError messageText  = Portfolio PortfolioAlreadyExistsError.
			].
	 
! !

!testRun: #PortfolioTest #test12 stamp: 'G.L.S. 5/23/2021 22:30:08'!
FAILURE!
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 22:31:29' prior: 50868512!
addPortfolioElement: aReceptiveAccount
	
	(self = aReceptiveAccount) ifTrue: [self error: self class PortfolioAlreadyExistsError].
	(self portfolios anySatisfy: [:aPortfolio | aPortfolio hasOrIsAccount: aReceptiveAccount ]) ifTrue: [self error: self class PortfolioAlreadyExistsError ].
	(self allAccounts anySatisfy: [:anAccount | aReceptiveAccount hasOrIsAccount: anAccount]) ifTrue: [self error: self class AccountAlreadyExistsError].
	
	portfolioElements add: aReceptiveAccount.! !
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 22:31:31' prior: 50868636!
addPortfolioElement: aReceptiveAccount
	
	(self = aReceptiveAccount) ifTrue: [self error: self class PortfolioAlreadyExistsError].
	(self portfolios anySatisfy: [:aPortfolio | aPortfolio hasOrIsAccount: aReceptiveAccount ]) ifTrue: [self error: self class PortfolioAlreadyExistsError].
	(self allAccounts anySatisfy: [:anAccount | aReceptiveAccount hasOrIsAccount: anAccount]) ifTrue: [self error: self class AccountAlreadyExistsError].
	
	portfolioElements add: aReceptiveAccount.! !

!testRun: #PortfolioTest #test12 stamp: 'G.L.S. 5/23/2021 22:31:58'!
FAILURE!

!testRun: #PortfolioTest #test12 stamp: 'G.L.S. 5/23/2021 22:31:58'!
FAILURE!

self portfolios!
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 22:33:51' prior: 50868526!
hasOrIsAccount: aReceptiveAccount
	
	(self = aReceptiveAccount) ifTrue: [self error: self class PortfolioAlreadyExistsError].	
	^(portfolioElements anySatisfy: [:aPortfolioElement | aPortfolioElement hasOrIsAccount: aReceptiveAccount])! !

!testRun: #PortfolioTest #test12 stamp: 'G.L.S. 5/23/2021 22:33:57'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfEmptyPortfolioEquals0 stamp: 'G.L.S. 5/23/2021 22:34:00'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance stamp: 'G.L.S. 5/23/2021 22:34:00'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts stamp: 'G.L.S. 5/23/2021 22:34:00'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioTransactionsAreAnEmptyCollection stamp: 'G.L.S. 5/23/2021 22:34:00'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfAPortfolioWithOneAccountEqualsTheAccountTransactions stamp: 'G.L.S. 5/23/2021 22:34:00'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOnAPortfolioWithAnAccountOnAnExistingTransactionReturnsTrue stamp: 'G.L.S. 5/23/2021 22:34:00'!
PASSED!

!testRun: #PortfolioTest #test07hasRegisteredDoesNotReturnTrueOnATransactionOfAnAccountNotInsideThePortfolio stamp: 'G.L.S. 5/23/2021 22:34:00'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCantHaveMultiplesOfTheSameAccount stamp: 'G.L.S. 5/23/2021 22:34:00'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantHaveMultipleOfTheSameAccountByAddingAnotherPortfolioWithTheAccounts stamp: 'G.L.S. 5/23/2021 22:34:00'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanHaveAnotherPortfolioWithDifferentAccounts stamp: 'G.L.S. 5/23/2021 22:34:00'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'G.L.S. 5/23/2021 22:34:00'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'G.L.S. 5/23/2021 22:34:00'!
PASSED!
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 22:38:44' prior: 50868655!
addPortfolioElement: aReceptiveAccount
	
	(self = aReceptiveAccount) ifTrue: [self error: self class PortfolioAlreadyExistsError].
	"(self portfolios anySatisfy: [:aPortfolio | aPortfolio hasOrIsAccount: aReceptiveAccount ]) ifTrue: [self error: self class PortfolioAlreadyExistsError].
	(self allAccounts anySatisfy: [:anAccount | aReceptiveAccount hasOrIsAccount: anAccount]) ifTrue: [self error: self class AccountAlreadyExistsError]."
	
	portfolioElements add: aReceptiveAccount.! !
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 22:39:58' prior: 50868740!
addPortfolioElement: aReceptiveAccount
	
	(self = aReceptiveAccount) ifTrue: [self error: self class PortfolioAlreadyExistsError].
	(portfolioElements anySatisfy: [:aPortfolioElement | aPortfolioElement hasOrIsAccount: aReceptiveAccount]) ifTrue: [self error: self class AccountAlreadyExistsError].
	
	"(self portfolios anySatisfy: [:aPortfolio | aPortfolio hasOrIsAccount: aReceptiveAccount ]) ifTrue: [self error: self class PortfolioAlreadyExistsError].
	(self allAccounts anySatisfy: [:anAccount | aReceptiveAccount hasOrIsAccount: anAccount]) ifTrue: [self error: self class AccountAlreadyExistsError]."
	
	portfolioElements add: aReceptiveAccount.! !
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 22:40:23' prior: 50868759!
addPortfolioElement: aReceptiveAccount
	
	(self = aReceptiveAccount) ifTrue: [self error: self class PortfolioAlreadyExistsError].
	(portfolioElements anySatisfy: [:aPortfolioElement | aPortfolioElement hasOrIsAccount: aReceptiveAccount]) ifTrue: [self error: Portfolio AccountAlreadyExistsError].
	
	"(self portfolios anySatisfy: [:aPortfolio | aPortfolio hasOrIsAccount: aReceptiveAccount ]) ifTrue: [self error: self class PortfolioAlreadyExistsError].
	(self allAccounts anySatisfy: [:anAccount | aReceptiveAccount hasOrIsAccount: anAccount]) ifTrue: [self error: self class AccountAlreadyExistsError]."
	
	portfolioElements add: aReceptiveAccount.! !
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 22:40:38' prior: 50868679!
hasOrIsAccount: aReceptiveAccount
	
	(self = aReceptiveAccount) ifTrue: [self error: Portfolio PortfolioAlreadyExistsError].	
	^(portfolioElements anySatisfy: [:aPortfolioElement | aPortfolioElement hasOrIsAccount: aReceptiveAccount])! !

!testRun: #PortfolioTest #test01BalanceOfEmptyPortfolioEquals0 stamp: 'G.L.S. 5/23/2021 22:41:31'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance stamp: 'G.L.S. 5/23/2021 22:41:31'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts stamp: 'G.L.S. 5/23/2021 22:41:31'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioTransactionsAreAnEmptyCollection stamp: 'G.L.S. 5/23/2021 22:41:31'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfAPortfolioWithOneAccountEqualsTheAccountTransactions stamp: 'G.L.S. 5/23/2021 22:41:31'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOnAPortfolioWithAnAccountOnAnExistingTransactionReturnsTrue stamp: 'G.L.S. 5/23/2021 22:41:31'!
PASSED!

!testRun: #PortfolioTest #test07hasRegisteredDoesNotReturnTrueOnATransactionOfAnAccountNotInsideThePortfolio stamp: 'G.L.S. 5/23/2021 22:41:31'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCantHaveMultiplesOfTheSameAccount stamp: 'G.L.S. 5/23/2021 22:41:31'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantHaveMultipleOfTheSameAccountByAddingAnotherPortfolioWithTheAccounts stamp: 'G.L.S. 5/23/2021 22:41:31'!
FAILURE!

!testRun: #PortfolioTest #test10PortfolioCanHaveAnotherPortfolioWithDifferentAccounts stamp: 'G.L.S. 5/23/2021 22:41:31'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'G.L.S. 5/23/2021 22:41:31'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'G.L.S. 5/23/2021 22:41:31'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantHaveMultipleOfTheSameAccountByAddingAnotherPortfolioWithTheAccounts stamp: 'G.L.S. 5/23/2021 22:41:31'!
FAILURE!
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 22:41:53' prior: 50868783!
addPortfolioElement: aReceptiveAccount
	
	(self = aReceptiveAccount) ifTrue: [self error: self class PortfolioAlreadyExistsError].
	
	(self portfolios anySatisfy: [:aPortfolio | aPortfolio hasOrIsAccount: aReceptiveAccount ]) ifTrue: [self error: self class PortfolioAlreadyExistsError].
	(self allAccounts anySatisfy: [:anAccount | aReceptiveAccount hasOrIsAccount: anAccount]) ifTrue: [self error: self class AccountAlreadyExistsError].
	
	portfolioElements add: aReceptiveAccount.! !
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 22:43:16' prior: 50868871!
addPortfolioElement: aReceptiveAccount
	
	(self = aReceptiveAccount) ifTrue: [self error: self class PortfolioAlreadyExistsError].
	
	(portfolioElements anySatisfy: [:aPortfolioElement | aPortfolioElement hasOrIsAccount: aReceptiveAccount]) ifTrue: [self error: Portfolio AccountAlreadyExistsError].
	
	"(self portfolios anySatisfy: [:aPortfolio | aPortfolio hasOrIsAccount: aReceptiveAccount ]) ifTrue: [self error: self class PortfolioAlreadyExistsError].
	(self allAccounts anySatisfy: [:anAccount | aReceptiveAccount hasOrIsAccount: anAccount]) ifTrue: [self error: self class AccountAlreadyExistsError]."
	
	portfolioElements add: aReceptiveAccount.! !
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 22:44:18' prior: 50868890!
addPortfolioElement: aReceptiveAccount
	
	(self = aReceptiveAccount) ifTrue: [self error: self class PortfolioAlreadyExistsError].
	
	"(portfolioElements anySatisfy: [:aPortfolioElement | aPortfolioElement hasOrIsAccount: aReceptiveAccount]) ifTrue: [self error: Portfolio AccountAlreadyExistsError]."
	
	(self portfolios anySatisfy: [:aPortfolio | aPortfolio hasOrIsAccount: aReceptiveAccount ]) ifTrue: [self error: self class PortfolioAlreadyExistsError].
	(self allAccounts anySatisfy: [:anAccount | aReceptiveAccount hasOrIsAccount: anAccount]) ifTrue: [self error: self class AccountAlreadyExistsError].
	
	portfolioElements add: aReceptiveAccount.! !

!testRun: #PortfolioTest #test01BalanceOfEmptyPortfolioEquals0 stamp: 'G.L.S. 5/23/2021 22:46:33'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance stamp: 'G.L.S. 5/23/2021 22:46:33'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts stamp: 'G.L.S. 5/23/2021 22:46:33'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioTransactionsAreAnEmptyCollection stamp: 'G.L.S. 5/23/2021 22:46:33'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfAPortfolioWithOneAccountEqualsTheAccountTransactions stamp: 'G.L.S. 5/23/2021 22:46:33'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOnAPortfolioWithAnAccountOnAnExistingTransactionReturnsTrue stamp: 'G.L.S. 5/23/2021 22:46:33'!
PASSED!

!testRun: #PortfolioTest #test07hasRegisteredDoesNotReturnTrueOnATransactionOfAnAccountNotInsideThePortfolio stamp: 'G.L.S. 5/23/2021 22:46:33'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCantHaveMultiplesOfTheSameAccount stamp: 'G.L.S. 5/23/2021 22:46:33'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantHaveMultipleOfTheSameAccountByAddingAnotherPortfolioWithTheAccounts stamp: 'G.L.S. 5/23/2021 22:46:33'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanHaveAnotherPortfolioWithDifferentAccounts stamp: 'G.L.S. 5/23/2021 22:46:33'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'G.L.S. 5/23/2021 22:46:33'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'G.L.S. 5/23/2021 22:46:33'!
PASSED!
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 22:48:52'!
allNodes
	
	|totalAccounts|
	
	totalAccounts := OrderedCollection new.
	totalAccounts addAll: (portfolioElements select:[:aPortfolioElement | aPortfolioElement class = ReceptiveAccount]).
	
	self portfolios do: [:aPortfolio | totalAccounts addAll: aPortfolio allAccounts].
	
	^totalAccounts.! !
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 22:48:58' prior: 50868985!
allNodes
	
	|totalAccounts|
	
	totalAccounts := OrderedCollection new.
	totalAccounts addAll: (portfolioElements).
	
	self portfolios do: [:aPortfolio | totalAccounts addAll: aPortfolio allAccounts].
	
	^totalAccounts.! !
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 22:49:10'!
allElements
	
	|totalAccounts|
	
	totalAccounts := OrderedCollection new.
	totalAccounts addAll: (portfolioElements).
	
	self portfolios do: [:aPortfolio | totalAccounts addAll: aPortfolio allAccounts].
	
	^totalAccounts.! !

!methodRemoval: Portfolio #allNodes stamp: 'G.L.S. 5/23/2021 22:49:10'!
allNodes
	
	|totalAccounts|
	
	totalAccounts := OrderedCollection new.
	totalAccounts addAll: (portfolioElements).
	
	self portfolios do: [:aPortfolio | totalAccounts addAll: aPortfolio allAccounts].
	
	^totalAccounts.!
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 22:49:30' prior: 50869008!
allElements
	
	|totalAccounts|
	
	totalAccounts := OrderedCollection new.
	totalAccounts addAll: portfolioElements.
	
	self portfolios do: [:aPortfolio | totalAccounts addAll: aPortfolio allElements].
	
	^totalAccounts.! !
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 22:52:21' prior: 50868914!
addPortfolioElement: aReceptiveAccount
	
	(self = aReceptiveAccount) ifTrue: [self error: self class PortfolioAlreadyExistsError].
	
	"(portfolioElements anySatisfy: [:aPortfolioElement | aPortfolioElement hasOrIsAccount: aReceptiveAccount]) ifTrue: [self error: Portfolio AccountAlreadyExistsError]."
	
	(self allElements anySatisfy: [:aPortfolioElement | 
				aPortfolioElement hasOrIsAccount: aReceptiveAccount.
				aReceptiveAccount hasOrIsAccount: aPortfolioElement.	]).
	
	"(self portfolios anySatisfy: [:aPortfolio | aPortfolio hasOrIsAccount: aReceptiveAccount ]) ifTrue: [self error: self class PortfolioAlreadyExistsError].
	(self allAccounts anySatisfy: [:anAccount | aReceptiveAccount hasOrIsAccount: anAccount]) ifTrue: [self error: self class AccountAlreadyExistsError]."
	
	portfolioElements add: aReceptiveAccount.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/23/2021 22:53:25' prior: 50866856!
hasOrIsAccount: aReceptiveAccount
	^(self = aReceptiveAccount) ifTrue:[Portfolio AccountAlreadyExistsError].! !

!testRun: #PortfolioTest #test12 stamp: 'G.L.S. 5/23/2021 22:53:43'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfEmptyPortfolioEquals0 stamp: 'G.L.S. 5/23/2021 22:53:48'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance stamp: 'G.L.S. 5/23/2021 22:53:48'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts stamp: 'G.L.S. 5/23/2021 22:53:48'!
ERROR!

!testRun: #PortfolioTest #test04EmptyPortfolioTransactionsAreAnEmptyCollection stamp: 'G.L.S. 5/23/2021 22:53:48'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfAPortfolioWithOneAccountEqualsTheAccountTransactions stamp: 'G.L.S. 5/23/2021 22:53:48'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOnAPortfolioWithAnAccountOnAnExistingTransactionReturnsTrue stamp: 'G.L.S. 5/23/2021 22:53:48'!
PASSED!

!testRun: #PortfolioTest #test07hasRegisteredDoesNotReturnTrueOnATransactionOfAnAccountNotInsideThePortfolio stamp: 'G.L.S. 5/23/2021 22:53:48'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCantHaveMultiplesOfTheSameAccount stamp: 'G.L.S. 5/23/2021 22:53:48'!
FAILURE!

!testRun: #PortfolioTest #test09PortfolioCantHaveMultipleOfTheSameAccountByAddingAnotherPortfolioWithTheAccounts stamp: 'G.L.S. 5/23/2021 22:53:48'!
FAILURE!

!testRun: #PortfolioTest #test10PortfolioCanHaveAnotherPortfolioWithDifferentAccounts stamp: 'G.L.S. 5/23/2021 22:53:48'!
FAILURE!

!testRun: #PortfolioTest #test11 stamp: 'G.L.S. 5/23/2021 22:53:48'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'G.L.S. 5/23/2021 22:53:48'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts stamp: 'G.L.S. 5/23/2021 22:54:11'!
ERROR!

!testRun: #PortfolioTest #test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts stamp: 'G.L.S. 5/23/2021 22:54:11'!
ERROR!

!testRun: #PortfolioTest #test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts stamp: 'G.L.S. 5/23/2021 22:54:47'!
ERROR!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/23/2021 22:55:16' prior: 50869068!
hasOrIsAccount: aReceptiveAccount
	(self = aReceptiveAccount) ifTrue:[Portfolio AccountAlreadyExistsError].
	^(self = aReceptiveAccount).! !

!testRun: #PortfolioTest #test01BalanceOfEmptyPortfolioEquals0 stamp: 'G.L.S. 5/23/2021 22:55:21'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance stamp: 'G.L.S. 5/23/2021 22:55:21'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts stamp: 'G.L.S. 5/23/2021 22:55:21'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioTransactionsAreAnEmptyCollection stamp: 'G.L.S. 5/23/2021 22:55:21'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfAPortfolioWithOneAccountEqualsTheAccountTransactions stamp: 'G.L.S. 5/23/2021 22:55:21'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOnAPortfolioWithAnAccountOnAnExistingTransactionReturnsTrue stamp: 'G.L.S. 5/23/2021 22:55:21'!
PASSED!

!testRun: #PortfolioTest #test07hasRegisteredDoesNotReturnTrueOnATransactionOfAnAccountNotInsideThePortfolio stamp: 'G.L.S. 5/23/2021 22:55:21'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCantHaveMultiplesOfTheSameAccount stamp: 'G.L.S. 5/23/2021 22:55:21'!
FAILURE!

!testRun: #PortfolioTest #test09PortfolioCantHaveMultipleOfTheSameAccountByAddingAnotherPortfolioWithTheAccounts stamp: 'G.L.S. 5/23/2021 22:55:21'!
FAILURE!

!testRun: #PortfolioTest #test10PortfolioCanHaveAnotherPortfolioWithDifferentAccounts stamp: 'G.L.S. 5/23/2021 22:55:21'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'G.L.S. 5/23/2021 22:55:21'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'G.L.S. 5/23/2021 22:55:21'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCantHaveMultiplesOfTheSameAccount stamp: 'G.L.S. 5/23/2021 22:55:34'!
FAILURE!

!testRun: #PortfolioTest #test08PortfolioCantHaveMultiplesOfTheSameAccount stamp: 'G.L.S. 5/23/2021 22:55:34'!
FAILURE!

self allElements!
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 22:57:41' prior: 50869038!
addPortfolioElement: aReceptiveAccount
	
	(self = aReceptiveAccount) ifTrue: [self error: self class PortfolioAlreadyExistsError].
	
	"(portfolioElements anySatisfy: [:aPortfolioElement | aPortfolioElement hasOrIsAccount: aReceptiveAccount]) ifTrue: [self error: Portfolio AccountAlreadyExistsError]."
	
	(self portfolios anySatisfy: [:aPortfolio | aPortfolio hasOrIsAccount: aReceptiveAccount ]) ifTrue: [self error: self class PortfolioAlreadyExistsError].
	(self allAccounts anySatisfy: [:anAccount | aReceptiveAccount hasOrIsAccount: anAccount]) ifTrue: [self error: self class AccountAlreadyExistsError].
	
	portfolioElements add: aReceptiveAccount.! !

!testRun: #PortfolioTest #test01BalanceOfEmptyPortfolioEquals0 stamp: 'G.L.S. 5/23/2021 22:57:44'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance stamp: 'G.L.S. 5/23/2021 22:57:44'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts stamp: 'G.L.S. 5/23/2021 22:57:44'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioTransactionsAreAnEmptyCollection stamp: 'G.L.S. 5/23/2021 22:57:44'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfAPortfolioWithOneAccountEqualsTheAccountTransactions stamp: 'G.L.S. 5/23/2021 22:57:44'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOnAPortfolioWithAnAccountOnAnExistingTransactionReturnsTrue stamp: 'G.L.S. 5/23/2021 22:57:44'!
PASSED!

!testRun: #PortfolioTest #test07hasRegisteredDoesNotReturnTrueOnATransactionOfAnAccountNotInsideThePortfolio stamp: 'G.L.S. 5/23/2021 22:57:44'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCantHaveMultiplesOfTheSameAccount stamp: 'G.L.S. 5/23/2021 22:57:44'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantHaveMultipleOfTheSameAccountByAddingAnotherPortfolioWithTheAccounts stamp: 'G.L.S. 5/23/2021 22:57:44'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanHaveAnotherPortfolioWithDifferentAccounts stamp: 'G.L.S. 5/23/2021 22:57:44'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'G.L.S. 5/23/2021 22:57:44'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'G.L.S. 5/23/2021 22:57:44'!
PASSED!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/23/2021 22:57:58' prior: 50869139!
hasOrIsAccount: aReceptiveAccount
	^(self = aReceptiveAccount).! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/23/2021 22:58:02' prior: 50869275!
hasOrIsAccount: aReceptiveAccount
	^self = aReceptiveAccount.! !

!testRun: #PortfolioTest #test01BalanceOfEmptyPortfolioEquals0 stamp: 'G.L.S. 5/23/2021 22:58:09'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance stamp: 'G.L.S. 5/23/2021 22:58:09'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts stamp: 'G.L.S. 5/23/2021 22:58:09'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioTransactionsAreAnEmptyCollection stamp: 'G.L.S. 5/23/2021 22:58:09'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfAPortfolioWithOneAccountEqualsTheAccountTransactions stamp: 'G.L.S. 5/23/2021 22:58:09'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOnAPortfolioWithAnAccountOnAnExistingTransactionReturnsTrue stamp: 'G.L.S. 5/23/2021 22:58:09'!
PASSED!

!testRun: #PortfolioTest #test07hasRegisteredDoesNotReturnTrueOnATransactionOfAnAccountNotInsideThePortfolio stamp: 'G.L.S. 5/23/2021 22:58:09'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCantHaveMultiplesOfTheSameAccount stamp: 'G.L.S. 5/23/2021 22:58:09'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantHaveMultipleOfTheSameAccountByAddingAnotherPortfolioWithTheAccounts stamp: 'G.L.S. 5/23/2021 22:58:09'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanHaveAnotherPortfolioWithDifferentAccounts stamp: 'G.L.S. 5/23/2021 22:58:09'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'G.L.S. 5/23/2021 22:58:09'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'G.L.S. 5/23/2021 22:58:09'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfEmptyPortfolioEquals0 stamp: 'G.L.S. 5/23/2021 23:01:08'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance stamp: 'G.L.S. 5/23/2021 23:01:08'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts stamp: 'G.L.S. 5/23/2021 23:01:08'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioTransactionsAreAnEmptyCollection stamp: 'G.L.S. 5/23/2021 23:01:08'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfAPortfolioWithOneAccountEqualsTheAccountTransactions stamp: 'G.L.S. 5/23/2021 23:01:08'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOnAPortfolioWithAnAccountOnAnExistingTransactionReturnsTrue stamp: 'G.L.S. 5/23/2021 23:01:08'!
PASSED!

!testRun: #PortfolioTest #test07hasRegisteredDoesNotReturnTrueOnATransactionOfAnAccountNotInsideThePortfolio stamp: 'G.L.S. 5/23/2021 23:01:08'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCantHaveMultiplesOfTheSameAccount stamp: 'G.L.S. 5/23/2021 23:01:08'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantHaveMultipleOfTheSameAccountByAddingAnotherPortfolioWithTheAccounts stamp: 'G.L.S. 5/23/2021 23:01:08'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanHaveAnotherPortfolioWithDifferentAccounts stamp: 'G.L.S. 5/23/2021 23:01:08'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'G.L.S. 5/23/2021 23:01:08'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'G.L.S. 5/23/2021 23:01:08'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/23/2021 23:02:25'!
test13

	|portfolio portfolio2 portfolio3|
	
	portfolio  := Portfolio new.
	portfolio2  := Portfolio new.	
	portfolio3  := Portfolio new.
	
	self should: [
			portfolio addPortfolioElement: portfolio2.
			portfolio addPortfolioElement: portfolio3.
			portfolio2 addPortfolioElement: portfolio3.
			] 
		raise:  Error
		withExceptionDo: [:anError |
			self assert: anError messageText  = Portfolio PortfolioAlreadyExistsError.
			].
	 
! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/23/2021 23:02:32' prior: 50869381!
test13

	|portfolio portfolio2 portfolio3|
	
	portfolio  := Portfolio new.
	portfolio2  := Portfolio new.	
	portfolio3  := Portfolio new.
	
	self should: [
			portfolio addPortfolioElement: portfolio2.
			portfolio addPortfolioElement: portfolio3.
			portfolio addPortfolioElement: portfolio3.
			] 
		raise:  Error
		withExceptionDo: [:anError |
			self assert: anError messageText  = Portfolio PortfolioAlreadyExistsError.
			].
	 
! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/23/2021 23:03:09' prior: 50869398!
test13

	|portfolio portfolio2 portfolio3|
	
	portfolio  := Portfolio new.
	portfolio2  := Portfolio new.	
	portfolio3  := Portfolio new.
	
	self should: [
			portfolio addPortfolioElement: portfolio3.
			portfolio addPortfolioElement: portfolio2.
			portfolio2 addPortfolioElement: portfolio3.
			] 
		raise:  Error
		withExceptionDo: [:anError |
			self assert: anError messageText  = Portfolio PortfolioAlreadyExistsError.
			].
	 
! !

!testRun: #PortfolioTest #test13 stamp: 'G.L.S. 5/23/2021 23:03:36'!
FAILURE!
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 23:06:21' prior: 50869203!
addPortfolioElement: aReceptiveAccount
	
	(self = aReceptiveAccount) ifTrue: [self error: self class PortfolioAlreadyExistsError].
	
	(self portfolios anySatisfy: [:aPortfolio | aPortfolio hasOrIsAccount: aReceptiveAccount ]) ifTrue: [self error: self class PortfolioAlreadyExistsError].
	(self allAccounts anySatisfy: [:anAccount | aReceptiveAccount hasOrIsAccount: anAccount]) ifTrue: [self error: self class AccountAlreadyExistsError].
	
	portfolioElements add: aReceptiveAccount.! !

Object subclass: #Portfolio
	instanceVariableNames: 'portfolioElements parent'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'G.L.S. 5/23/2021 23:06:43'!
Object subclass: #Portfolio
	instanceVariableNames: 'portfolioElements parent'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'initialization' stamp: 'G.L.S. 5/23/2021 23:07:07' prior: 50867634 overrides: 16896425!
initialize
	portfolioElements := OrderedCollection new.
	parent := nil.! !

nil isNil.!
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 23:08:18' prior: 50869435!
addPortfolioElement: aReceptiveAccount
	
	(self = aReceptiveAccount) ifTrue: [self error: self class PortfolioAlreadyExistsError].
	
	(self portfolios anySatisfy: [:aPortfolio | aPortfolio hasOrIsAccount: aReceptiveAccount ]) ifTrue: [self error: self class PortfolioAlreadyExistsError].
	(self allAccounts anySatisfy: [:anAccount | aReceptiveAccount hasOrIsAccount: anAccount]) ifTrue: [self error: self class AccountAlreadyExistsError].
	
	"portfolioElements add: aReceptiveAccount."
	
	aReceptiveAccount addTo: self.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/23/2021 23:08:33'!
addTo: aPortfolio! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/23/2021 23:09:01' prior: 50869493!
addTo: aPortfolio
	aPortfolio addAccount: self.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/23/2021 23:09:10' prior: 50869497!
addTo: aPortfolio
	^aPortfolio addAccount: self.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/23/2021 23:09:12' prior: 50869502!
addTo: aPortfolio
	aPortfolio addAccount: self.! !
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 23:09:38'!
addAccount: anAccount.
	portfolioElements add: anAccount.! !
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 23:10:30' prior: 50869473!
addPortfolioElement: aReceptiveAccount
	
	(self = aReceptiveAccount) ifTrue: [self error: self class PortfolioAlreadyExistsError].
	
	(self portfolios anySatisfy: [:aPortfolio | aPortfolio hasOrIsAccount: aReceptiveAccount ]) ifTrue: [self error: self class PortfolioAlreadyExistsError].
	(self allAccounts anySatisfy: [:anAccount | aReceptiveAccount hasOrIsAccount: anAccount]) ifTrue: [self error: self class AccountAlreadyExistsError].
	
	aReceptiveAccount addTo: self.! !
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 23:12:01'!
addTo: aPortfolio.
	aPortfolio addPortfolio: self.! !
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 23:12:26'!
addPortfolio:  aPortfolio.
	
	portfolioElements add: aPortfolio. ! !
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 23:12:28' prior: 50869540!
addPortfolio:  aPortfolio.
	portfolioElements add: aPortfolio. ! !
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 23:12:32' prior: 50869546!
addPortfolio:  aPortfolio.
	portfolioElements add: aPortfolio. ! !
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 23:13:21' prior: 50869552!
addPortfolio:  aPortfolio.
	aPortfolio newParent: self.
	portfolioElements add: aPortfolio. ! !
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 23:13:50'!
newParent: aPortfolio
	parent := aPortfolio .! !
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 23:13:52' prior: 50869564!
newParent: aPortfolio
	parent := aPortfolio.! !

!testRun: #PortfolioTest #test01BalanceOfEmptyPortfolioEquals0 stamp: 'G.L.S. 5/23/2021 23:15:27'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance stamp: 'G.L.S. 5/23/2021 23:15:27'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts stamp: 'G.L.S. 5/23/2021 23:15:27'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioTransactionsAreAnEmptyCollection stamp: 'G.L.S. 5/23/2021 23:15:27'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfAPortfolioWithOneAccountEqualsTheAccountTransactions stamp: 'G.L.S. 5/23/2021 23:15:27'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOnAPortfolioWithAnAccountOnAnExistingTransactionReturnsTrue stamp: 'G.L.S. 5/23/2021 23:15:27'!
PASSED!

!testRun: #PortfolioTest #test07hasRegisteredDoesNotReturnTrueOnATransactionOfAnAccountNotInsideThePortfolio stamp: 'G.L.S. 5/23/2021 23:15:27'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCantHaveMultiplesOfTheSameAccount stamp: 'G.L.S. 5/23/2021 23:15:27'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantHaveMultipleOfTheSameAccountByAddingAnotherPortfolioWithTheAccounts stamp: 'G.L.S. 5/23/2021 23:15:27'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanHaveAnotherPortfolioWithDifferentAccounts stamp: 'G.L.S. 5/23/2021 23:15:27'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'G.L.S. 5/23/2021 23:15:27'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'G.L.S. 5/23/2021 23:15:27'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'G.L.S. 5/23/2021 23:15:27'!
FAILURE!

!testRun: #PortfolioTest #test13 stamp: 'G.L.S. 5/23/2021 23:15:27'!
FAILURE!
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 23:15:48' prior: 50869517!
addPortfolioElement: aReceptiveAccount
	
	(parent = aReceptiveAccount) ifTrue: [self error: self class PortfolioAlreadyExistsError].
	
	(parent portfolios anySatisfy: [:aPortfolio | aPortfolio hasOrIsAccount: aReceptiveAccount ]) ifTrue: [self error: self class PortfolioAlreadyExistsError].
	(parent allAccounts anySatisfy: [:anAccount | aReceptiveAccount hasOrIsAccount: anAccount]) ifTrue: [self error: self class AccountAlreadyExistsError].
	
	aReceptiveAccount addTo: self.! !

!testRun: #PortfolioTest #test01BalanceOfEmptyPortfolioEquals0 stamp: 'G.L.S. 5/23/2021 23:15:50'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance stamp: 'G.L.S. 5/23/2021 23:15:50'!
ERROR!

!testRun: #PortfolioTest #test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts stamp: 'G.L.S. 5/23/2021 23:15:50'!
ERROR!

!testRun: #PortfolioTest #test04EmptyPortfolioTransactionsAreAnEmptyCollection stamp: 'G.L.S. 5/23/2021 23:15:50'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfAPortfolioWithOneAccountEqualsTheAccountTransactions stamp: 'G.L.S. 5/23/2021 23:15:50'!
ERROR!

!testRun: #PortfolioTest #test06hasRegisteredOnAPortfolioWithAnAccountOnAnExistingTransactionReturnsTrue stamp: 'G.L.S. 5/23/2021 23:15:50'!
ERROR!

!testRun: #PortfolioTest #test07hasRegisteredDoesNotReturnTrueOnATransactionOfAnAccountNotInsideThePortfolio stamp: 'G.L.S. 5/23/2021 23:15:50'!
ERROR!

!testRun: #PortfolioTest #test08PortfolioCantHaveMultiplesOfTheSameAccount stamp: 'G.L.S. 5/23/2021 23:15:50'!
FAILURE!

!testRun: #PortfolioTest #test09PortfolioCantHaveMultipleOfTheSameAccountByAddingAnotherPortfolioWithTheAccounts stamp: 'G.L.S. 5/23/2021 23:15:50'!
ERROR!

!testRun: #PortfolioTest #test10PortfolioCanHaveAnotherPortfolioWithDifferentAccounts stamp: 'G.L.S. 5/23/2021 23:15:50'!
ERROR!

!testRun: #PortfolioTest #test11 stamp: 'G.L.S. 5/23/2021 23:15:50'!
FAILURE!

!testRun: #PortfolioTest #test12 stamp: 'G.L.S. 5/23/2021 23:15:50'!
FAILURE!

!testRun: #PortfolioTest #test13 stamp: 'G.L.S. 5/23/2021 23:15:50'!
FAILURE!

!testRun: #PortfolioTest #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance stamp: 'G.L.S. 5/23/2021 23:16:49'!
ERROR!

!testRun: #PortfolioTest #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance stamp: 'G.L.S. 5/23/2021 23:16:49'!
ERROR!

!testRun: #PortfolioTest #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance stamp: 'G.L.S. 5/23/2021 23:17:05'!
ERROR!

!testRun: #PortfolioTest #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance stamp: 'G.L.S. 5/23/2021 23:17:15'!
ERROR!

!testRun: #PortfolioTest #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance stamp: 'G.L.S. 5/23/2021 23:17:15'!
ERROR!
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 23:18:25' prior: 50869627!
addPortfolioElement: aReceptiveAccount
	|oldestParent|
	
	oldestParent  = self oldestParent.
	
	(oldestParent = aReceptiveAccount) ifTrue: [self error: self class PortfolioAlreadyExistsError].
	
	(oldestParent portfolios anySatisfy: [:aPortfolio | aPortfolio hasOrIsAccount: aReceptiveAccount ]) ifTrue: [self error: self class PortfolioAlreadyExistsError].
	(oldestParent allAccounts anySatisfy: [:anAccount | aReceptiveAccount hasOrIsAccount: anAccount]) ifTrue: [self error: self class AccountAlreadyExistsError].
	
	aReceptiveAccount addTo: self.! !
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 23:19:02' prior: 50869716!
addPortfolioElement: aReceptiveAccount
	|root|
	
	root  = self oldestParent.
	
	(root = aReceptiveAccount) ifTrue: [self error: self class PortfolioAlreadyExistsError].
	
	(root portfolios anySatisfy: [:aPortfolio | aPortfolio hasOrIsAccount: aReceptiveAccount ]) ifTrue: [self error: self class PortfolioAlreadyExistsError].
	(root allAccounts anySatisfy: [:anAccount | aReceptiveAccount hasOrIsAccount: anAccount]) ifTrue: [self error: self class AccountAlreadyExistsError].
	
	aReceptiveAccount addTo: self.! !
!Portfolio methodsFor: 'initialization' stamp: 'G.L.S. 5/23/2021 23:20:00' prior: 50869467 overrides: 16896425!
initialize
	portfolioElements := OrderedCollection new.
	parent := self.! !
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 23:21:27'!
oldestParent

	(parent = self) ifTrue:[^self].
	^parent oldestParent.! !

!testRun: #PortfolioTest #test01BalanceOfEmptyPortfolioEquals0 stamp: 'G.L.S. 5/23/2021 23:22:07'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance stamp: 'G.L.S. 5/23/2021 23:22:07'!
ERROR!

!testRun: #PortfolioTest #test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts stamp: 'G.L.S. 5/23/2021 23:22:07'!
ERROR!

!testRun: #PortfolioTest #test04EmptyPortfolioTransactionsAreAnEmptyCollection stamp: 'G.L.S. 5/23/2021 23:22:07'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfAPortfolioWithOneAccountEqualsTheAccountTransactions stamp: 'G.L.S. 5/23/2021 23:22:07'!
ERROR!

!testRun: #PortfolioTest #test06hasRegisteredOnAPortfolioWithAnAccountOnAnExistingTransactionReturnsTrue stamp: 'G.L.S. 5/23/2021 23:22:07'!
ERROR!

!testRun: #PortfolioTest #test07hasRegisteredDoesNotReturnTrueOnATransactionOfAnAccountNotInsideThePortfolio stamp: 'G.L.S. 5/23/2021 23:22:07'!
ERROR!

!testRun: #PortfolioTest #test08PortfolioCantHaveMultiplesOfTheSameAccount stamp: 'G.L.S. 5/23/2021 23:22:07'!
FAILURE!

!testRun: #PortfolioTest #test09PortfolioCantHaveMultipleOfTheSameAccountByAddingAnotherPortfolioWithTheAccounts stamp: 'G.L.S. 5/23/2021 23:22:07'!
ERROR!

!testRun: #PortfolioTest #test10PortfolioCanHaveAnotherPortfolioWithDifferentAccounts stamp: 'G.L.S. 5/23/2021 23:22:07'!
ERROR!

!testRun: #PortfolioTest #test11 stamp: 'G.L.S. 5/23/2021 23:22:07'!
FAILURE!

!testRun: #PortfolioTest #test12 stamp: 'G.L.S. 5/23/2021 23:22:07'!
FAILURE!

!testRun: #PortfolioTest #test13 stamp: 'G.L.S. 5/23/2021 23:22:07'!
FAILURE!

!testRun: #PortfolioTest #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance stamp: 'G.L.S. 5/23/2021 23:22:14'!
ERROR!

!testRun: #PortfolioTest #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance stamp: 'G.L.S. 5/23/2021 23:22:14'!
ERROR!

!testRun: #PortfolioTest #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance stamp: 'G.L.S. 5/23/2021 23:22:21'!
ERROR!

!testRun: #PortfolioTest #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance stamp: 'G.L.S. 5/23/2021 23:22:30'!
ERROR!
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 23:23:17' prior: 50869762!
oldestParent
	(parent = self) ifTrue:[^self].
	^parent oldestParent.! !

!testRun: #PortfolioTest #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance stamp: 'G.L.S. 5/23/2021 23:23:23'!
ERROR!

!testRun: #PortfolioTest #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance stamp: 'G.L.S. 5/23/2021 23:23:23'!
ERROR!

self oldestParent!
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 23:24:50' prior: 50869737!
addPortfolioElement: aReceptiveAccount
	|root|
	
	root := self oldestParent.
	
	(root := aReceptiveAccount) ifTrue: [self error: self class PortfolioAlreadyExistsError].
	
	(root portfolios anySatisfy: [:aPortfolio | aPortfolio hasOrIsAccount: aReceptiveAccount ]) ifTrue: [self error: self class PortfolioAlreadyExistsError].
	(root allAccounts anySatisfy: [:anAccount | aReceptiveAccount hasOrIsAccount: anAccount]) ifTrue: [self error: self class AccountAlreadyExistsError].
	
	aReceptiveAccount addTo: self.! !

!testRun: #PortfolioTest #test01BalanceOfEmptyPortfolioEquals0 stamp: 'G.L.S. 5/23/2021 23:24:55'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance stamp: 'G.L.S. 5/23/2021 23:24:55'!
ERROR!

!testRun: #PortfolioTest #test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts stamp: 'G.L.S. 5/23/2021 23:24:55'!
ERROR!

!testRun: #PortfolioTest #test04EmptyPortfolioTransactionsAreAnEmptyCollection stamp: 'G.L.S. 5/23/2021 23:24:55'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfAPortfolioWithOneAccountEqualsTheAccountTransactions stamp: 'G.L.S. 5/23/2021 23:24:55'!
ERROR!

!testRun: #PortfolioTest #test06hasRegisteredOnAPortfolioWithAnAccountOnAnExistingTransactionReturnsTrue stamp: 'G.L.S. 5/23/2021 23:24:55'!
ERROR!

!testRun: #PortfolioTest #test07hasRegisteredDoesNotReturnTrueOnATransactionOfAnAccountNotInsideThePortfolio stamp: 'G.L.S. 5/23/2021 23:24:55'!
ERROR!

!testRun: #PortfolioTest #test08PortfolioCantHaveMultiplesOfTheSameAccount stamp: 'G.L.S. 5/23/2021 23:24:55'!
FAILURE!

!testRun: #PortfolioTest #test09PortfolioCantHaveMultipleOfTheSameAccountByAddingAnotherPortfolioWithTheAccounts stamp: 'G.L.S. 5/23/2021 23:24:55'!
ERROR!

!testRun: #PortfolioTest #test10PortfolioCanHaveAnotherPortfolioWithDifferentAccounts stamp: 'G.L.S. 5/23/2021 23:24:55'!
ERROR!

!testRun: #PortfolioTest #test11 stamp: 'G.L.S. 5/23/2021 23:24:55'!
FAILURE!

!testRun: #PortfolioTest #test12 stamp: 'G.L.S. 5/23/2021 23:24:55'!
FAILURE!

!testRun: #PortfolioTest #test13 stamp: 'G.L.S. 5/23/2021 23:24:55'!
FAILURE!

!testRun: #PortfolioTest #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance stamp: 'G.L.S. 5/23/2021 23:25:33'!
ERROR!

!testRun: #PortfolioTest #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance stamp: 'G.L.S. 5/23/2021 23:25:33'!
ERROR!
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 23:25:52' prior: 50869848!
addPortfolioElement: aReceptiveAccount
	|root|
	
	root := self oldestParent.
	
	(root = aReceptiveAccount) ifTrue: [self error: self class PortfolioAlreadyExistsError].
	
	(root portfolios anySatisfy: [:aPortfolio | aPortfolio hasOrIsAccount: aReceptiveAccount ]) ifTrue: [self error: self class PortfolioAlreadyExistsError].
	(root allAccounts anySatisfy: [:anAccount | aReceptiveAccount hasOrIsAccount: anAccount]) ifTrue: [self error: self class AccountAlreadyExistsError].
	
	aReceptiveAccount addTo: self.! !

!testRun: #PortfolioTest #test01BalanceOfEmptyPortfolioEquals0 stamp: 'G.L.S. 5/23/2021 23:25:55'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance stamp: 'G.L.S. 5/23/2021 23:25:55'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts stamp: 'G.L.S. 5/23/2021 23:25:55'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioTransactionsAreAnEmptyCollection stamp: 'G.L.S. 5/23/2021 23:25:55'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfAPortfolioWithOneAccountEqualsTheAccountTransactions stamp: 'G.L.S. 5/23/2021 23:25:55'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOnAPortfolioWithAnAccountOnAnExistingTransactionReturnsTrue stamp: 'G.L.S. 5/23/2021 23:25:55'!
PASSED!

!testRun: #PortfolioTest #test07hasRegisteredDoesNotReturnTrueOnATransactionOfAnAccountNotInsideThePortfolio stamp: 'G.L.S. 5/23/2021 23:25:55'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCantHaveMultiplesOfTheSameAccount stamp: 'G.L.S. 5/23/2021 23:25:55'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantHaveMultipleOfTheSameAccountByAddingAnotherPortfolioWithTheAccounts stamp: 'G.L.S. 5/23/2021 23:25:55'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanHaveAnotherPortfolioWithDifferentAccounts stamp: 'G.L.S. 5/23/2021 23:25:55'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'G.L.S. 5/23/2021 23:25:55'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'G.L.S. 5/23/2021 23:25:55'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'G.L.S. 5/23/2021 23:25:55'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/23/2021 23:26:46'!
test14

	|portfolio portfolio2 portfolio3|
	
	portfolio  := Portfolio new.
	portfolio2  := Portfolio new.	
	portfolio3  := Portfolio new.
	
	self should: [
			portfolio addPortfolioElement: portfolio3.
			portfolio addPortfolioElement: portfolio2.
			portfolio2 addPortfolioElement: portfolio3.
			] 
		raise:  Error
		withExceptionDo: [:anError |
			self assert: anError messageText  = Portfolio PortfolioAlreadyExistsError.
			].
	 
! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/23/2021 23:27:08' prior: 50869995!
test14

	|portfolio portfolio2 portfolio3|
	
	portfolio  := Portfolio new.
	portfolio2  := Portfolio new.	
	portfolio3  := Portfolio new.
	
	self should: [
			portfolio addPortfolioElement: portfolio2.
			portfolio2 addPortfolioElement: portfolio.
			] 
		raise:  Error
		withExceptionDo: [:anError |
			self assert: anError messageText  = Portfolio PortfolioAlreadyExistsError.
			].
	 
! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/23/2021 23:27:20' prior: 50870012!
test14

	|portfolio portfolio2|
	
	portfolio  := Portfolio new.
	portfolio2  := Portfolio new.	
	
	self should: [
			portfolio addPortfolioElement: portfolio2.
			portfolio2 addPortfolioElement: portfolio.
			] 
		raise:  Error
		withExceptionDo: [:anError |
			self assert: anError messageText  = Portfolio PortfolioAlreadyExistsError.
			].
	 
! !

!testRun: #PortfolioTest #test14 stamp: 'G.L.S. 5/23/2021 23:27:29'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfEmptyPortfolioEquals0 stamp: 'G.L.S. 5/23/2021 23:27:29'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance stamp: 'G.L.S. 5/23/2021 23:27:29'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts stamp: 'G.L.S. 5/23/2021 23:27:29'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioTransactionsAreAnEmptyCollection stamp: 'G.L.S. 5/23/2021 23:27:29'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfAPortfolioWithOneAccountEqualsTheAccountTransactions stamp: 'G.L.S. 5/23/2021 23:27:29'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOnAPortfolioWithAnAccountOnAnExistingTransactionReturnsTrue stamp: 'G.L.S. 5/23/2021 23:27:29'!
PASSED!

!testRun: #PortfolioTest #test07hasRegisteredDoesNotReturnTrueOnATransactionOfAnAccountNotInsideThePortfolio stamp: 'G.L.S. 5/23/2021 23:27:29'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCantHaveMultiplesOfTheSameAccount stamp: 'G.L.S. 5/23/2021 23:27:29'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantHaveMultipleOfTheSameAccountByAddingAnotherPortfolioWithTheAccounts stamp: 'G.L.S. 5/23/2021 23:27:29'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanHaveAnotherPortfolioWithDifferentAccounts stamp: 'G.L.S. 5/23/2021 23:27:29'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'G.L.S. 5/23/2021 23:27:29'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'G.L.S. 5/23/2021 23:27:29'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'G.L.S. 5/23/2021 23:27:29'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'G.L.S. 5/23/2021 23:27:29'!
PASSED!

portfolio := Portfolio createNew.
portfolio2 := Portfolio createNew.!


portfolio2 addPortfolioElement: portfolio.
!

portfolio := Portfolio createNew.!

portfolio2 := Portfolio createNew.!

portfolio addPortfolioElement: portfolio2.!

portfolio2 addPortfolioElement: portfolio.!

portfolio := Portfolio createNew.!

portfolio2 := Portfolio createNew.!

portfolio addPortfolioElement: portfolio2.!

portfolio2 addPortfolioElement: portfolio.!

portfolio := Portfolio createNew.!

portfolio2 := Portfolio createNew.!
!Behavior method!
createNew
	^ [
	([
	(Portfolio
		cover: (14 to: 22)
		declaredAt: (14 to: 22)) new ] valueCoveringAll:
		{24 to: 26}) initialize ] valueCoveringAll:
		{28 to: 37}.! !
!Behavior method!
initialize
	(portfolioElements _ [
	(OrderedCollection
		cover: (34 to: 50)
		declaredAt: (34 to: 50)) new ] valueCoveringAll:
		{52 to: 54})
		cover: (13 to: 29)
		declaredAt: (13 to: 29).
	(parent _ self coverAll:
		{68 to: 71})
		cover: (58 to: 63)
		declaredAt: (58 to: 63).! !
!Behavior method!
balance
	^ [
	(portfolioElements
		cover: (11 to: 27)
		declaredAt: (11 to: 27))
		sum: [ :aPortfolioElement |
			[
			(aPortfolioElement
				cover: (56 to: 72)
				declaredAt: (36 to: 52)) balance ] valueCoveringAll:
				{74 to: 80} ]
		ifEmpty: [
			0 coverAll:
				{93 to: 93} ]] valueCoveringAll:
		{29 to: 32. 83 to: 90}.! !

!testRun: #PortfolioTest #test01BalanceOfEmptyPortfolioEquals0 stamp: 'G.L.S. 5/23/2021 23:28:59'!
PASSED!
!Behavior method!
initialize
	(transactions _ [
	(OrderedCollection
		cover: (30 to: 46)
		declaredAt: (30 to: 46)) new ] valueCoveringAll:
		{48 to: 50})
		cover: (14 to: 25)
		declaredAt: (14 to: 25).! !
!Behavior method!
register: aValue on: account
	| transaction |
	(transaction _ [
	(self coverAll:
		{66 to: 69}) for:
		(aValue
			cover: (76 to: 81)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{71 to: 74})
		cover: (51 to: 61)
		declaredAt: (34 to: 44).
	[
	(account
		cover: (85 to: 91)
		declaredAt: (22 to: 28)) register:
		(transaction
			cover: (103 to: 113)
			declaredAt: (34 to: 44)) ] valueCoveringAll:
		{93 to: 101}.
	^ transaction
		cover: (122 to: 132)
		declaredAt: (34 to: 44).! !
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
register: aTransaction
	[
	(transactions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) add:
		(aTransaction
			cover: (44 to: 55)
			declaredAt: (11 to: 22)) ] valueCoveringAll:
		{39 to: 42}.! !
!Behavior method!
addPortfolioElement: aReceptiveAccount
	| root |
	(root _ [
	(self coverAll:
		{59 to: 62}) oldestParent ] valueCoveringAll:
		{64 to: 75})
		cover: (51 to: 54)
		declaredAt: (42 to: 45).
	[
	([
	(root
		cover: (82 to: 85)
		declaredAt: (42 to: 45)) =
		(aReceptiveAccount
			cover: (89 to: 105)
			declaredAt: (22 to: 38)) ] valueCoveringAll:
		{87 to: 87}) ifTrue: [
		[
		(self coverAll:
			{117 to: 120}) error:
			([
			([
			(self coverAll:
				{129 to: 132}) class ] valueCoveringAll:
				{134 to: 138}) PortfolioAlreadyExistsError ] valueCoveringAll:
				{140 to: 166}) ] valueCoveringAll:
			{122 to: 127} ]] valueCoveringAll:
		{108 to: 114}.
	[
	([
	([
	(root
		cover: (174 to: 177)
		declaredAt: (42 to: 45)) portfolios ] valueCoveringAll:
		{179 to: 188}) anySatisfy: [ :aPortfolio |
		[
		(aPortfolio
			cover: (217 to: 226)
			declaredAt: (204 to: 213)) hasOrIsAccount:
			(aReceptiveAccount
				cover: (244 to: 260)
				declaredAt: (22 to: 38)) ] valueCoveringAll:
			{228 to: 242} ]] valueCoveringAll:
		{190 to: 200}) ifTrue: [
		[
		(self coverAll:
			{274 to: 277}) error:
			([
			([
			(self coverAll:
				{286 to: 289}) class ] valueCoveringAll:
				{291 to: 295}) PortfolioAlreadyExistsError ] valueCoveringAll:
				{297 to: 323}) ] valueCoveringAll:
			{279 to: 284} ]] valueCoveringAll:
		{265 to: 271}.
	[
	([
	([
	(root
		cover: (329 to: 332)
		declaredAt: (42 to: 45)) allAccounts ] valueCoveringAll:
		{334 to: 344}) anySatisfy: [ :anAccount |
		[
		(aReceptiveAccount
			cover: (372 to: 388)
			declaredAt: (22 to: 38)) hasOrIsAccount:
			(anAccount
				cover: (406 to: 414)
				declaredAt: (360 to: 368)) ] valueCoveringAll:
			{390 to: 404} ]] valueCoveringAll:
		{346 to: 356}) ifTrue: [
		[
		(self coverAll:
			{427 to: 430}) error:
			([
			([
			(self coverAll:
				{439 to: 442}) class ] valueCoveringAll:
				{444 to: 448}) AccountAlreadyExistsError ] valueCoveringAll:
				{450 to: 474}) ] valueCoveringAll:
			{432 to: 437} ]] valueCoveringAll:
		{418 to: 424}.
	[
	(aReceptiveAccount
		cover: (481 to: 497)
		declaredAt: (22 to: 38)) addTo:
		(self coverAll:
			{506 to: 509}) ] valueCoveringAll:
		{499 to: 504}.! !
!Behavior method!
oldestParent
	[
	([
	(parent
		cover: (16 to: 21)
		declaredAt: (16 to: 21)) =
		(self coverAll:
			{25 to: 28}) ] valueCoveringAll:
		{23 to: 23}) ifTrue: [ ^ self coverAll:
			{40 to: 43} ]] valueCoveringAll:
		{31 to: 37}.
	^ [
	(parent
		cover: (49 to: 54)
		declaredAt: (16 to: 21)) oldestParent ] valueCoveringAll:
		{56 to: 67}.! !
!Behavior method!
portfolios
	^ [
	(portfolioElements
		cover: (15 to: 31)
		declaredAt: (15 to: 31)) select: [ :aPortfolioElement |
		[
		([
		(aPortfolioElement
			cover: (62 to: 78)
			declaredAt: (42 to: 58)) class ] valueCoveringAll:
			{80 to: 84}) =
			(Portfolio
				cover: (88 to: 96)
				declaredAt: (88 to: 96)) ] valueCoveringAll:
			{86 to: 86} ]] valueCoveringAll:
		{33 to: 39}.! !
!Behavior method!
allAccounts
	| totalAccounts |
	(totalAccounts _ [
	(OrderedCollection
		cover: (52 to: 68)
		declaredAt: (52 to: 68)) new ] valueCoveringAll:
		{70 to: 72})
		cover: (35 to: 47)
		declaredAt: (17 to: 29).
	[
	(totalAccounts
		cover: (76 to: 88)
		declaredAt: (17 to: 29)) addAll:
		([
		(portfolioElements
			cover: (99 to: 115)
			declaredAt: (99 to: 115)) select: [ :aPortfolioElement |
			[
			([
			(aPortfolioElement
				cover: (146 to: 162)
				declaredAt: (126 to: 142)) class ] valueCoveringAll:
				{164 to: 168}) =
				(ReceptiveAccount
					cover: (172 to: 187)
					declaredAt: (172 to: 187)) ] valueCoveringAll:
				{170 to: 170} ]] valueCoveringAll:
			{117 to: 123}) ] valueCoveringAll:
		{90 to: 96}.
	[
	([
	(self coverAll:
		{195 to: 198}) portfolios ] valueCoveringAll:
		{200 to: 209}) do: [ :aPortfolio |
		[
		(totalAccounts
			cover: (230 to: 242)
			declaredAt: (17 to: 29)) addAll:
			([
			(aPortfolio
				cover: (252 to: 261)
				declaredAt: (217 to: 226)) allAccounts ] valueCoveringAll:
				{263 to: 273}) ] valueCoveringAll:
			{244 to: 250} ]] valueCoveringAll:
		{211 to: 213}.
	^ totalAccounts
		cover: (281 to: 293)
		declaredAt: (17 to: 29).! !
!Behavior method!
addTo: aPortfolio
	[
	(aPortfolio
		cover: (20 to: 29)
		declaredAt: (8 to: 17)) addAccount:
		(self coverAll:
			{43 to: 46}) ] valueCoveringAll:
		{31 to: 41}.! !
!Behavior method!
addAccount: anAccount
	self.
	[
	(portfolioElements
		cover: (25 to: 41)
		declaredAt: (25 to: 41)) add:
		(anAccount
			cover: (48 to: 56)
			declaredAt: (13 to: 21)) ] valueCoveringAll:
		{43 to: 46}.! !
!Behavior method!
balance
	| total |
	(total _ 0 coverAll:
		{32 to: 32})
		cover: (23 to: 27)
		declaredAt: (13 to: 17).
	[
	(transactions
		cover: (38 to: 49)
		declaredAt: (38 to: 49)) do: [ :aTransaction |
		(total _ [
		(aTransaction
			cover: (81 to: 92)
			declaredAt: (57 to: 68)) performOperationOnBalance:
			(total
				cover: (72 to: 76)
				declaredAt: (13 to: 17)) ] valueCoveringAll:
			{94 to: 119})
			cover: (121 to: 125)
			declaredAt: (13 to: 17) ]] valueCoveringAll:
		{51 to: 53}.
	^ total
		cover: (133 to: 137)
		declaredAt: (13 to: 17).! !
!Behavior method!
performOperationOnBalance: aTotal
	^ [
	(aTotal
		cover: (39 to: 44)
		declaredAt: (28 to: 33)) +
		(value
			cover: (48 to: 52)
			declaredAt: (48 to: 52)) ] valueCoveringAll:
		{46 to: 46}.! !

!testRun: #PortfolioTest #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance stamp: 'G.L.S. 5/23/2021 23:28:59'!
PASSED!
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
hasOrIsAccount: aReceptiveAccount
	^ [
	(self coverAll:
		{37 to: 40}) =
		(aReceptiveAccount
			cover: (44 to: 60)
			declaredAt: (17 to: 33)) ] valueCoveringAll:
		{42 to: 42}.! !
!Behavior method!
performOperationOnBalance: aTotal
	^ [
	(aTotal
		cover: (39 to: 44)
		declaredAt: (28 to: 33)) -
		(value
			cover: (48 to: 52)
			declaredAt: (48 to: 52)) ] valueCoveringAll:
		{46 to: 46}.! !

!testRun: #PortfolioTest #test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts stamp: 'G.L.S. 5/23/2021 23:29:00'!
PASSED!
!Behavior method!
transactions
	| totalTransactions |
	(totalTransactions _ [
	(OrderedCollection
		cover: (59 to: 75)
		declaredAt: (59 to: 75)) new ] valueCoveringAll:
		{77 to: 79})
		cover: (38 to: 54)
		declaredAt: (16 to: 32).
	[
	(portfolioElements
		cover: (85 to: 101)
		declaredAt: (85 to: 101)) do: [ :anAccount |
		[
		(totalTransactions
			cover: (121 to: 137)
			declaredAt: (16 to: 32)) addAll:
			([
			(anAccount
				cover: (147 to: 155)
				declaredAt: (109 to: 117)) transactions ] valueCoveringAll:
				{157 to: 168}) ] valueCoveringAll:
			{139 to: 145} ]] valueCoveringAll:
		{103 to: 105}.
	^ totalTransactions
		cover: (176 to: 192)
		declaredAt: (16 to: 32).! !

!testRun: #PortfolioTest #test04EmptyPortfolioTransactionsAreAnEmptyCollection stamp: 'G.L.S. 5/23/2021 23:29:00'!
PASSED!
!Behavior method!
transactions
	^ [
	(transactions
		cover: (19 to: 30)
		declaredAt: (19 to: 30)) copy ] valueCoveringAll:
		{32 to: 35}.! !

!testRun: #PortfolioTest #test05TransactionsOfAPortfolioWithOneAccountEqualsTheAccountTransactions stamp: 'G.L.S. 5/23/2021 23:29:00'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(portfolioElements
		cover: (32 to: 48)
		declaredAt: (32 to: 48)) anySatisfy: [ :aPortfolioElement |
		[
		(aPortfolioElement
			cover: (84 to: 100)
			declaredAt: (64 to: 80)) hasRegistered:
			(aTransaction
				cover: (117 to: 128)
				declaredAt: (16 to: 27)) ] valueCoveringAll:
			{102 to: 115} ]] valueCoveringAll:
		{50 to: 60}.! !
!Behavior method!
hasRegistered: aTransaction
	^ [
	(transactions
		cover: (33 to: 44)
		declaredAt: (33 to: 44)) includes:
		(aTransaction
			cover: (56 to: 67)
			declaredAt: (16 to: 27)) ] valueCoveringAll:
		{46 to: 54}.! !

!testRun: #PortfolioTest #test06hasRegisteredOnAPortfolioWithAnAccountOnAnExistingTransactionReturnsTrue stamp: 'G.L.S. 5/23/2021 23:29:00'!
PASSED!

!testRun: #PortfolioTest #test07hasRegisteredDoesNotReturnTrueOnATransactionOfAnAccountNotInsideThePortfolio stamp: 'G.L.S. 5/23/2021 23:29:00'!
PASSED!
!Behavior method!
AccountAlreadyExistsError
	^ 'La cuenta ya existe!!!!!!' coverAll:
		{29 to: 52}.! !

!testRun: #PortfolioTest #test08PortfolioCantHaveMultiplesOfTheSameAccount stamp: 'G.L.S. 5/23/2021 23:29:00'!
PASSED!
!Behavior method!
hasOrIsAccount: aReceptiveAccount
	[
	([
	(self coverAll:
		{39 to: 42}) =
		(aReceptiveAccount
			cover: (46 to: 62)
			declaredAt: (17 to: 33)) ] valueCoveringAll:
		{44 to: 44}) ifTrue: [
		[
		(self coverAll:
			{74 to: 77}) error:
			([
			(Portfolio
				cover: (86 to: 94)
				declaredAt: (86 to: 94)) PortfolioAlreadyExistsError ] valueCoveringAll:
				{96 to: 122}) ] valueCoveringAll:
			{79 to: 84} ]] valueCoveringAll:
		{65 to: 71}.
	^ [
	(portfolioElements
		cover: (130 to: 146)
		declaredAt: (130 to: 146)) anySatisfy: [ :aPortfolioElement |
		[
		(aPortfolioElement
			cover: (182 to: 198)
			declaredAt: (162 to: 178)) hasOrIsAccount:
			(aReceptiveAccount
				cover: (216 to: 232)
				declaredAt: (17 to: 33)) ] valueCoveringAll:
			{200 to: 214} ]] valueCoveringAll:
		{148 to: 158}.! !

!testRun: #PortfolioTest #test09PortfolioCantHaveMultipleOfTheSameAccountByAddingAnotherPortfolioWithTheAccounts stamp: 'G.L.S. 5/23/2021 23:29:00'!
PASSED!
!Behavior method!
addTo: aPortfolio
	self coverAll:
		{46 to: 49}.
	[
	(aPortfolio
		cover: (21 to: 30)
		declaredAt: (8 to: 17)) addPortfolio: self ] valueCoveringAll:
		{32 to: 44}.! !
!Behavior method!
addPortfolio: aPortfolio
	self coverAll:
		{51 to: 54}.
	[
	(aPortfolio
		cover: (29 to: 38)
		declaredAt: (16 to: 25)) newParent: self ] valueCoveringAll:
		{40 to: 49}.
	[
	(portfolioElements
		cover: (58 to: 74)
		declaredAt: (58 to: 74)) add:
		(aPortfolio
			cover: (81 to: 90)
			declaredAt: (16 to: 25)) ] valueCoveringAll:
		{76 to: 79}.! !
!Behavior method!
newParent: aPortfolio
	(parent _ aPortfolio
		cover: (34 to: 43)
		declaredAt: (12 to: 21))
		cover: (24 to: 29)
		declaredAt: (24 to: 29).! !

!testRun: #PortfolioTest #test10PortfolioCanHaveAnotherPortfolioWithDifferentAccounts stamp: 'G.L.S. 5/23/2021 23:29:00'!
PASSED!
!Behavior method!
PortfolioAlreadyExistsError
	^ 'Ya existe este portfolio' coverAll:
		{31 to: 56}.! !

!testRun: #PortfolioTest #test11 stamp: 'G.L.S. 5/23/2021 23:29:00'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'G.L.S. 5/23/2021 23:29:00'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'G.L.S. 5/23/2021 23:29:00'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'G.L.S. 5/23/2021 23:29:00'!
PASSED!
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/23/2021 23:29:42' prior: 50869926!
addPortfolioElement: aReceptiveAccount
	|root|
	
	root := self oldestParent.
	
	(root = aReceptiveAccount) ifTrue: [self error: self class PortfolioAlreadyExistsError].
	
	(root portfolios anySatisfy: [:aPortfolio | aPortfolio hasOrIsAccount: aReceptiveAccount ]).
	(root allAccounts anySatisfy: [:anAccount | aReceptiveAccount hasOrIsAccount: anAccount]) ifTrue: [self error: self class AccountAlreadyExistsError].
	
	aReceptiveAccount addTo: self.! !

!testRun: #PortfolioTest #test01BalanceOfEmptyPortfolioEquals0 stamp: 'G.L.S. 5/23/2021 23:29:54'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance stamp: 'G.L.S. 5/23/2021 23:29:54'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts stamp: 'G.L.S. 5/23/2021 23:29:54'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioTransactionsAreAnEmptyCollection stamp: 'G.L.S. 5/23/2021 23:29:54'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfAPortfolioWithOneAccountEqualsTheAccountTransactions stamp: 'G.L.S. 5/23/2021 23:29:54'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOnAPortfolioWithAnAccountOnAnExistingTransactionReturnsTrue stamp: 'G.L.S. 5/23/2021 23:29:54'!
PASSED!

!testRun: #PortfolioTest #test07hasRegisteredDoesNotReturnTrueOnATransactionOfAnAccountNotInsideThePortfolio stamp: 'G.L.S. 5/23/2021 23:29:54'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCantHaveMultiplesOfTheSameAccount stamp: 'G.L.S. 5/23/2021 23:29:54'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantHaveMultipleOfTheSameAccountByAddingAnotherPortfolioWithTheAccounts stamp: 'G.L.S. 5/23/2021 23:29:54'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanHaveAnotherPortfolioWithDifferentAccounts stamp: 'G.L.S. 5/23/2021 23:29:54'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'G.L.S. 5/23/2021 23:29:54'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'G.L.S. 5/23/2021 23:29:54'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'G.L.S. 5/23/2021 23:29:54'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'G.L.S. 5/23/2021 23:29:54'!
PASSED!
!Behavior method!
createNew
	^ [
	([
	(Portfolio
		cover: (14 to: 22)
		declaredAt: (14 to: 22)) new ] valueCoveringAll:
		{24 to: 26}) initialize ] valueCoveringAll:
		{28 to: 37}.! !
!Behavior method!
initialize
	(portfolioElements _ [
	(OrderedCollection
		cover: (34 to: 50)
		declaredAt: (34 to: 50)) new ] valueCoveringAll:
		{52 to: 54})
		cover: (13 to: 29)
		declaredAt: (13 to: 29).
	(parent _ self coverAll:
		{68 to: 71})
		cover: (58 to: 63)
		declaredAt: (58 to: 63).! !
!Behavior method!
balance
	^ [
	(portfolioElements
		cover: (11 to: 27)
		declaredAt: (11 to: 27))
		sum: [ :aPortfolioElement |
			[
			(aPortfolioElement
				cover: (56 to: 72)
				declaredAt: (36 to: 52)) balance ] valueCoveringAll:
				{74 to: 80} ]
		ifEmpty: [
			0 coverAll:
				{93 to: 93} ]] valueCoveringAll:
		{29 to: 32. 83 to: 90}.! !

!testRun: #PortfolioTest #test01BalanceOfEmptyPortfolioEquals0 stamp: 'G.L.S. 5/23/2021 23:31:20'!
PASSED!
!Behavior method!
initialize
	(transactions _ [
	(OrderedCollection
		cover: (30 to: 46)
		declaredAt: (30 to: 46)) new ] valueCoveringAll:
		{48 to: 50})
		cover: (14 to: 25)
		declaredAt: (14 to: 25).! !
!Behavior method!
register: aValue on: account
	| transaction |
	(transaction _ [
	(self coverAll:
		{66 to: 69}) for:
		(aValue
			cover: (76 to: 81)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{71 to: 74})
		cover: (51 to: 61)
		declaredAt: (34 to: 44).
	[
	(account
		cover: (85 to: 91)
		declaredAt: (22 to: 28)) register:
		(transaction
			cover: (103 to: 113)
			declaredAt: (34 to: 44)) ] valueCoveringAll:
		{93 to: 101}.
	^ transaction
		cover: (122 to: 132)
		declaredAt: (34 to: 44).! !
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
register: aTransaction
	[
	(transactions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) add:
		(aTransaction
			cover: (44 to: 55)
			declaredAt: (11 to: 22)) ] valueCoveringAll:
		{39 to: 42}.! !
!Behavior method!
addPortfolioElement: aReceptiveAccount
	| root |
	(root _ [
	(self coverAll:
		{59 to: 62}) oldestParent ] valueCoveringAll:
		{64 to: 75})
		cover: (51 to: 54)
		declaredAt: (42 to: 45).
	[
	([
	(root
		cover: (82 to: 85)
		declaredAt: (42 to: 45)) =
		(aReceptiveAccount
			cover: (89 to: 105)
			declaredAt: (22 to: 38)) ] valueCoveringAll:
		{87 to: 87}) ifTrue: [
		[
		(self coverAll:
			{117 to: 120}) error:
			([
			([
			(self coverAll:
				{129 to: 132}) class ] valueCoveringAll:
				{134 to: 138}) PortfolioAlreadyExistsError ] valueCoveringAll:
				{140 to: 166}) ] valueCoveringAll:
			{122 to: 127} ]] valueCoveringAll:
		{108 to: 114}.
	[
	([
	(root
		cover: (174 to: 177)
		declaredAt: (42 to: 45)) portfolios ] valueCoveringAll:
		{179 to: 188}) anySatisfy: [ :aPortfolio |
		[
		(aPortfolio
			cover: (217 to: 226)
			declaredAt: (204 to: 213)) hasOrIsAccount:
			(aReceptiveAccount
				cover: (244 to: 260)
				declaredAt: (22 to: 38)) ] valueCoveringAll:
			{228 to: 242} ]] valueCoveringAll:
		{190 to: 200}.
	[
	([
	([
	(root
		cover: (268 to: 271)
		declaredAt: (42 to: 45)) allAccounts ] valueCoveringAll:
		{273 to: 283}) anySatisfy: [ :anAccount |
		[
		(aReceptiveAccount
			cover: (311 to: 327)
			declaredAt: (22 to: 38)) hasOrIsAccount:
			(anAccount
				cover: (345 to: 353)
				declaredAt: (299 to: 307)) ] valueCoveringAll:
			{329 to: 343} ]] valueCoveringAll:
		{285 to: 295}) ifTrue: [
		[
		(self coverAll:
			{366 to: 369}) error:
			([
			([
			(self coverAll:
				{378 to: 381}) class ] valueCoveringAll:
				{383 to: 387}) AccountAlreadyExistsError ] valueCoveringAll:
				{389 to: 413}) ] valueCoveringAll:
			{371 to: 376} ]] valueCoveringAll:
		{357 to: 363}.
	[
	(aReceptiveAccount
		cover: (420 to: 436)
		declaredAt: (22 to: 38)) addTo:
		(self coverAll:
			{445 to: 448}) ] valueCoveringAll:
		{438 to: 443}.! !
!Behavior method!
oldestParent
	[
	([
	(parent
		cover: (16 to: 21)
		declaredAt: (16 to: 21)) =
		(self coverAll:
			{25 to: 28}) ] valueCoveringAll:
		{23 to: 23}) ifTrue: [ ^ self coverAll:
			{40 to: 43} ]] valueCoveringAll:
		{31 to: 37}.
	^ [
	(parent
		cover: (49 to: 54)
		declaredAt: (16 to: 21)) oldestParent ] valueCoveringAll:
		{56 to: 67}.! !
!Behavior method!
portfolios
	^ [
	(portfolioElements
		cover: (15 to: 31)
		declaredAt: (15 to: 31)) select: [ :aPortfolioElement |
		[
		([
		(aPortfolioElement
			cover: (62 to: 78)
			declaredAt: (42 to: 58)) class ] valueCoveringAll:
			{80 to: 84}) =
			(Portfolio
				cover: (88 to: 96)
				declaredAt: (88 to: 96)) ] valueCoveringAll:
			{86 to: 86} ]] valueCoveringAll:
		{33 to: 39}.! !
!Behavior method!
allAccounts
	| totalAccounts |
	(totalAccounts _ [
	(OrderedCollection
		cover: (52 to: 68)
		declaredAt: (52 to: 68)) new ] valueCoveringAll:
		{70 to: 72})
		cover: (35 to: 47)
		declaredAt: (17 to: 29).
	[
	(totalAccounts
		cover: (76 to: 88)
		declaredAt: (17 to: 29)) addAll:
		([
		(portfolioElements
			cover: (99 to: 115)
			declaredAt: (99 to: 115)) select: [ :aPortfolioElement |
			[
			([
			(aPortfolioElement
				cover: (146 to: 162)
				declaredAt: (126 to: 142)) class ] valueCoveringAll:
				{164 to: 168}) =
				(ReceptiveAccount
					cover: (172 to: 187)
					declaredAt: (172 to: 187)) ] valueCoveringAll:
				{170 to: 170} ]] valueCoveringAll:
			{117 to: 123}) ] valueCoveringAll:
		{90 to: 96}.
	[
	([
	(self coverAll:
		{195 to: 198}) portfolios ] valueCoveringAll:
		{200 to: 209}) do: [ :aPortfolio |
		[
		(totalAccounts
			cover: (230 to: 242)
			declaredAt: (17 to: 29)) addAll:
			([
			(aPortfolio
				cover: (252 to: 261)
				declaredAt: (217 to: 226)) allAccounts ] valueCoveringAll:
				{263 to: 273}) ] valueCoveringAll:
			{244 to: 250} ]] valueCoveringAll:
		{211 to: 213}.
	^ totalAccounts
		cover: (281 to: 293)
		declaredAt: (17 to: 29).! !
!Behavior method!
addTo: aPortfolio
	[
	(aPortfolio
		cover: (20 to: 29)
		declaredAt: (8 to: 17)) addAccount:
		(self coverAll:
			{43 to: 46}) ] valueCoveringAll:
		{31 to: 41}.! !
!Behavior method!
addAccount: anAccount
	self.
	[
	(portfolioElements
		cover: (25 to: 41)
		declaredAt: (25 to: 41)) add:
		(anAccount
			cover: (48 to: 56)
			declaredAt: (13 to: 21)) ] valueCoveringAll:
		{43 to: 46}.! !
!Behavior method!
balance
	| total |
	(total _ 0 coverAll:
		{32 to: 32})
		cover: (23 to: 27)
		declaredAt: (13 to: 17).
	[
	(transactions
		cover: (38 to: 49)
		declaredAt: (38 to: 49)) do: [ :aTransaction |
		(total _ [
		(aTransaction
			cover: (81 to: 92)
			declaredAt: (57 to: 68)) performOperationOnBalance:
			(total
				cover: (72 to: 76)
				declaredAt: (13 to: 17)) ] valueCoveringAll:
			{94 to: 119})
			cover: (121 to: 125)
			declaredAt: (13 to: 17) ]] valueCoveringAll:
		{51 to: 53}.
	^ total
		cover: (133 to: 137)
		declaredAt: (13 to: 17).! !
!Behavior method!
performOperationOnBalance: aTotal
	^ [
	(aTotal
		cover: (39 to: 44)
		declaredAt: (28 to: 33)) +
		(value
			cover: (48 to: 52)
			declaredAt: (48 to: 52)) ] valueCoveringAll:
		{46 to: 46}.! !

!testRun: #PortfolioTest #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance stamp: 'G.L.S. 5/23/2021 23:31:20'!
PASSED!
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
hasOrIsAccount: aReceptiveAccount
	^ [
	(self coverAll:
		{37 to: 40}) =
		(aReceptiveAccount
			cover: (44 to: 60)
			declaredAt: (17 to: 33)) ] valueCoveringAll:
		{42 to: 42}.! !
!Behavior method!
performOperationOnBalance: aTotal
	^ [
	(aTotal
		cover: (39 to: 44)
		declaredAt: (28 to: 33)) -
		(value
			cover: (48 to: 52)
			declaredAt: (48 to: 52)) ] valueCoveringAll:
		{46 to: 46}.! !

!testRun: #PortfolioTest #test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts stamp: 'G.L.S. 5/23/2021 23:31:20'!
PASSED!
!Behavior method!
transactions
	| totalTransactions |
	(totalTransactions _ [
	(OrderedCollection
		cover: (59 to: 75)
		declaredAt: (59 to: 75)) new ] valueCoveringAll:
		{77 to: 79})
		cover: (38 to: 54)
		declaredAt: (16 to: 32).
	[
	(portfolioElements
		cover: (85 to: 101)
		declaredAt: (85 to: 101)) do: [ :anAccount |
		[
		(totalTransactions
			cover: (121 to: 137)
			declaredAt: (16 to: 32)) addAll:
			([
			(anAccount
				cover: (147 to: 155)
				declaredAt: (109 to: 117)) transactions ] valueCoveringAll:
				{157 to: 168}) ] valueCoveringAll:
			{139 to: 145} ]] valueCoveringAll:
		{103 to: 105}.
	^ totalTransactions
		cover: (176 to: 192)
		declaredAt: (16 to: 32).! !

!testRun: #PortfolioTest #test04EmptyPortfolioTransactionsAreAnEmptyCollection stamp: 'G.L.S. 5/23/2021 23:31:20'!
PASSED!
!Behavior method!
transactions
	^ [
	(transactions
		cover: (19 to: 30)
		declaredAt: (19 to: 30)) copy ] valueCoveringAll:
		{32 to: 35}.! !

!testRun: #PortfolioTest #test05TransactionsOfAPortfolioWithOneAccountEqualsTheAccountTransactions stamp: 'G.L.S. 5/23/2021 23:31:20'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(portfolioElements
		cover: (32 to: 48)
		declaredAt: (32 to: 48)) anySatisfy: [ :aPortfolioElement |
		[
		(aPortfolioElement
			cover: (84 to: 100)
			declaredAt: (64 to: 80)) hasRegistered:
			(aTransaction
				cover: (117 to: 128)
				declaredAt: (16 to: 27)) ] valueCoveringAll:
			{102 to: 115} ]] valueCoveringAll:
		{50 to: 60}.! !
!Behavior method!
hasRegistered: aTransaction
	^ [
	(transactions
		cover: (33 to: 44)
		declaredAt: (33 to: 44)) includes:
		(aTransaction
			cover: (56 to: 67)
			declaredAt: (16 to: 27)) ] valueCoveringAll:
		{46 to: 54}.! !

!testRun: #PortfolioTest #test06hasRegisteredOnAPortfolioWithAnAccountOnAnExistingTransactionReturnsTrue stamp: 'G.L.S. 5/23/2021 23:31:20'!
PASSED!

!testRun: #PortfolioTest #test07hasRegisteredDoesNotReturnTrueOnATransactionOfAnAccountNotInsideThePortfolio stamp: 'G.L.S. 5/23/2021 23:31:20'!
PASSED!
!Behavior method!
AccountAlreadyExistsError
	^ 'La cuenta ya existe!!!!!!' coverAll:
		{29 to: 52}.! !

!testRun: #PortfolioTest #test08PortfolioCantHaveMultiplesOfTheSameAccount stamp: 'G.L.S. 5/23/2021 23:31:20'!
PASSED!
!Behavior method!
hasOrIsAccount: aReceptiveAccount
	[
	([
	(self coverAll:
		{39 to: 42}) =
		(aReceptiveAccount
			cover: (46 to: 62)
			declaredAt: (17 to: 33)) ] valueCoveringAll:
		{44 to: 44}) ifTrue: [
		[
		(self coverAll:
			{74 to: 77}) error:
			([
			(Portfolio
				cover: (86 to: 94)
				declaredAt: (86 to: 94)) PortfolioAlreadyExistsError ] valueCoveringAll:
				{96 to: 122}) ] valueCoveringAll:
			{79 to: 84} ]] valueCoveringAll:
		{65 to: 71}.
	^ [
	(portfolioElements
		cover: (130 to: 146)
		declaredAt: (130 to: 146)) anySatisfy: [ :aPortfolioElement |
		[
		(aPortfolioElement
			cover: (182 to: 198)
			declaredAt: (162 to: 178)) hasOrIsAccount:
			(aReceptiveAccount
				cover: (216 to: 232)
				declaredAt: (17 to: 33)) ] valueCoveringAll:
			{200 to: 214} ]] valueCoveringAll:
		{148 to: 158}.! !

!testRun: #PortfolioTest #test09PortfolioCantHaveMultipleOfTheSameAccountByAddingAnotherPortfolioWithTheAccounts stamp: 'G.L.S. 5/23/2021 23:31:20'!
PASSED!
!Behavior method!
addTo: aPortfolio
	self coverAll:
		{46 to: 49}.
	[
	(aPortfolio
		cover: (21 to: 30)
		declaredAt: (8 to: 17)) addPortfolio: self ] valueCoveringAll:
		{32 to: 44}.! !
!Behavior method!
addPortfolio: aPortfolio
	self coverAll:
		{51 to: 54}.
	[
	(aPortfolio
		cover: (29 to: 38)
		declaredAt: (16 to: 25)) newParent: self ] valueCoveringAll:
		{40 to: 49}.
	[
	(portfolioElements
		cover: (58 to: 74)
		declaredAt: (58 to: 74)) add:
		(aPortfolio
			cover: (81 to: 90)
			declaredAt: (16 to: 25)) ] valueCoveringAll:
		{76 to: 79}.! !
!Behavior method!
newParent: aPortfolio
	(parent _ aPortfolio
		cover: (34 to: 43)
		declaredAt: (12 to: 21))
		cover: (24 to: 29)
		declaredAt: (24 to: 29).! !

!testRun: #PortfolioTest #test10PortfolioCanHaveAnotherPortfolioWithDifferentAccounts stamp: 'G.L.S. 5/23/2021 23:31:20'!
PASSED!
!Behavior method!
PortfolioAlreadyExistsError
	^ 'Ya existe este portfolio' coverAll:
		{31 to: 56}.! !

!testRun: #PortfolioTest #test11 stamp: 'G.L.S. 5/23/2021 23:31:20'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'G.L.S. 5/23/2021 23:31:20'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'G.L.S. 5/23/2021 23:31:20'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'G.L.S. 5/23/2021 23:31:20'!
PASSED!

!methodRemoval: Portfolio #allElements stamp: 'G.L.S. 5/23/2021 23:32:04'!
allElements
	
	|totalAccounts|
	
	totalAccounts := OrderedCollection new.
	totalAccounts addAll: portfolioElements.
	
	self portfolios do: [:aPortfolio | totalAccounts addAll: aPortfolio allElements].
	
	^totalAccounts.!

----QUIT----(23 May 2021 23:33:12) CuisUniversity-4532.image priorSource: 17040228!

----STARTUP---- (23 May 2021 23:38:57) as /media/Datos/Cuis/Ej-Portfolio1/linux64/CuisUniversity-4532.image!


----End fileIn of /media/Datos/Cuis/Ej-Portfolio1/linux64/TDDStateIcon-setBalloonText.st----!

----QUIT----(23 May 2021 23:44:49) CuisUniversity-4532.image priorSource: 17260054!

----STARTUP---- (24 May 2021 14:30:14) as /media/Datos/Cuis/Ej-Portfolio1/linux64/CuisUniversity-4532.image!


----QUIT----(24 May 2021 14:31:52) CuisUniversity-4532.image priorSource: 17260548!

----STARTUP---- (24 May 2021 14:31:55) as /media/Datos/Cuis/Ej-Portfolio1/linux64/CuisUniversity-4532.image!


----QUIT----(24 May 2021 14:32:21) CuisUniversity-4532.image priorSource: 17260744!

----STARTUP---- (24 May 2021 14:32:28) as /media/Datos/Cuis/Ej-Portfolio1/linux64/CuisUniversity-4532.image!

!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/24/2021 14:35:43' prior: 50870536!
addPortfolioElement: aReceptiveAccount
	|root|
	
	root := self oldestParent.
	
	(root = aReceptiveAccount) ifTrue: [self error: self class PortfolioAlreadyExistsError].
	
	"(root portfolios anySatisfy: [:aPortfolio | aPortfolio hasOrIsAccount: aReceptiveAccount ])."
	(root allElements anySatisfy: [:anAccount | aReceptiveAccount hasOrIsAccount: anAccount]) ifTrue: [self error: self class AccountAlreadyExistsError].
	
	aReceptiveAccount addTo: self.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/24/2021 14:36:13'!
hasOrIs: aReceptiveAccount
	^self = aReceptiveAccount.! !
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/24/2021 14:36:13'!
hasOrIs: aReceptiveAccount
	
	(self = aReceptiveAccount) ifTrue: [self error: Portfolio PortfolioAlreadyExistsError].	
	^(portfolioElements anySatisfy: [:aPortfolioElement | aPortfolioElement hasOrIsAccount: aReceptiveAccount])! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/24/2021 14:36:13' prior: 50871062!
addPortfolioElement: aReceptiveAccount
	|root|
	
	root := self oldestParent.
	
	(root = aReceptiveAccount) ifTrue: [self error: self class PortfolioAlreadyExistsError].
	
	"(root portfolios anySatisfy: [:aPortfolio | aPortfolio hasOrIsAccount: aReceptiveAccount ])."
	(root allElements anySatisfy: [:anAccount | aReceptiveAccount hasOrIs: anAccount]) ifTrue: [self error: self class AccountAlreadyExistsError].
	
	aReceptiveAccount addTo: self.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/24/2021 14:36:13' prior: 50868807!
hasOrIsAccount: aReceptiveAccount
	
	(self = aReceptiveAccount) ifTrue: [self error: Portfolio PortfolioAlreadyExistsError].	
	^(portfolioElements anySatisfy: [:aPortfolioElement | aPortfolioElement hasOrIs: aReceptiveAccount])! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/24/2021 14:36:13' prior: 50871084!
hasOrIs: aReceptiveAccount
	
	(self = aReceptiveAccount) ifTrue: [self error: Portfolio PortfolioAlreadyExistsError].	
	^(portfolioElements anySatisfy: [:aPortfolioElement | aPortfolioElement hasOrIs: aReceptiveAccount])! !

!methodRemoval: ReceptiveAccount #hasOrIsAccount: stamp: 'G.L.S. 5/24/2021 14:36:13'!
hasOrIsAccount: aReceptiveAccount
	^self = aReceptiveAccount.!

!methodRemoval: Portfolio #hasOrIsAccount: stamp: 'G.L.S. 5/24/2021 14:36:13'!
hasOrIsAccount: aReceptiveAccount
	
	(self = aReceptiveAccount) ifTrue: [self error: Portfolio PortfolioAlreadyExistsError].	
	^(portfolioElements anySatisfy: [:aPortfolioElement | aPortfolioElement hasOrIs: aReceptiveAccount])!
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/24/2021 14:36:49'!
allElements
	
	|totalAccounts|
	
	totalAccounts := OrderedCollection new.
	totalAccounts addAll: portfolioElements.
	
	self portfolios do: [:aPortfolio | totalAccounts addAll: aPortfolio allAccounts].
	
	^totalAccounts.! !
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/24/2021 14:36:55' prior: 50871148!
allElements
	
	|totalAccounts|
	
	totalAccounts := OrderedCollection new.
	totalAccounts addAll: portfolioElements.
	
	self portfolios do: [:aPortfolio | totalAccounts addAll: aPortfolio allElements].
	
	^totalAccounts.! !

!testRun: #PortfolioTest #test01BalanceOfEmptyPortfolioEquals0 stamp: 'G.L.S. 5/24/2021 14:38:51'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance stamp: 'G.L.S. 5/24/2021 14:38:51'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts stamp: 'G.L.S. 5/24/2021 14:38:51'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioTransactionsAreAnEmptyCollection stamp: 'G.L.S. 5/24/2021 14:38:51'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfAPortfolioWithOneAccountEqualsTheAccountTransactions stamp: 'G.L.S. 5/24/2021 14:38:51'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOnAPortfolioWithAnAccountOnAnExistingTransactionReturnsTrue stamp: 'G.L.S. 5/24/2021 14:38:51'!
PASSED!

!testRun: #PortfolioTest #test07hasRegisteredDoesNotReturnTrueOnATransactionOfAnAccountNotInsideThePortfolio stamp: 'G.L.S. 5/24/2021 14:38:51'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCantHaveMultiplesOfTheSameAccount stamp: 'G.L.S. 5/24/2021 14:38:51'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantHaveMultipleOfTheSameAccountByAddingAnotherPortfolioWithTheAccounts stamp: 'G.L.S. 5/24/2021 14:38:51'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanHaveAnotherPortfolioWithDifferentAccounts stamp: 'G.L.S. 5/24/2021 14:38:51'!
PASSED!

!testRun: #PortfolioTest #test11 stamp: 'G.L.S. 5/24/2021 14:38:51'!
PASSED!

!testRun: #PortfolioTest #test12 stamp: 'G.L.S. 5/24/2021 14:38:51'!
PASSED!

!testRun: #PortfolioTest #test13 stamp: 'G.L.S. 5/24/2021 14:38:51'!
PASSED!

!testRun: #PortfolioTest #test14 stamp: 'G.L.S. 5/24/2021 14:38:51'!
PASSED!
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/24/2021 14:39:11' prior: 50871095!
addPortfolioElement: aReceptiveAccount
	|root|
	
	root := self oldestParent.
	
	(root = aReceptiveAccount) ifTrue: [self error: self class PortfolioAlreadyExistsError].
	(root allElements anySatisfy: [:anAccount | aReceptiveAccount hasOrIs: anAccount]) ifTrue: [self error: self class AccountAlreadyExistsError].
	
	aReceptiveAccount addTo: self.! !
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/24/2021 14:39:40' prior: 50871124!
hasOrIs: aReceptiveAccount
	
	(self = aReceptiveAccount) ifTrue: [self error: self class PortfolioAlreadyExistsError].	
	^(portfolioElements anySatisfy: [:aPortfolioElement | aPortfolioElement hasOrIs: aReceptiveAccount])! !
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/24/2021 14:40:42' prior: 50871221!
addPortfolioElement: aReceptiveAccount
	|root|
	
	root := self oldestParent.
	
	(root = aReceptiveAccount) ifTrue: [self error: self class PortfolioAlreadyExistsError].
	(root allElements anySatisfy: [:aPortfolioElement | aReceptiveAccount hasOrIs: aPortfolioElement]) ifTrue: [self error: self class AccountAlreadyExistsError].
	
	aReceptiveAccount addTo: self.! !
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/24/2021 14:42:19' prior: 50871245!
addPortfolioElement: aNewPortfolioElement
	|root|
	
	root := self oldestParent.
	
	(root = aNewPortfolioElement) ifTrue: [self error: self class PortfolioAlreadyExistsError].
	(root allElements anySatisfy: [:aPortfolioElement | aNewPortfolioElement hasOrIs: aPortfolioElement]) ifTrue: [self error: self class AccountAlreadyExistsError].
	
	aNewPortfolioElement addTo: self.! !
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/24/2021 14:42:24' prior: 50871260!
addPortfolioElement: aNewPortfolioElement
	|root|
	
	root := self oldestParent.
	
	(root = aNewPortfolioElement) ifTrue: [self error: self class PortfolioAlreadyExistsError].
	(root allElements anySatisfy: [:aPortfolioElement | aNewPortfolioElement hasOrIs: aPortfolioElement]) ifTrue: [self error: self class AccountAlreadyExistsError].
	
	aNewPortfolioElement addTo: self.! !
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/24/2021 14:44:01' prior: 50871235!
hasOrIs: aNewPortfolioElement
	
	(self = aNewPortfolioElement) ifTrue: [self error: self class PortfolioAlreadyExistsError].	
	^(portfolioElements anySatisfy: [:aPortfolioElement | aPortfolioElement hasOrIs: aNewPortfolioElement])! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 14:47:41'!
test11PortfolioCannotContainItself

	|portfolio|
	
	portfolio  := Portfolio new.
	
	self should: [portfolio addPortfolioElement: portfolio] 
		raise:  Error
		withExceptionDo: [:anError |
			self assert: anError messageText  = Portfolio PortfolioAlreadyExistsError.
			].
	 
! !

!methodRemoval: PortfolioTest #test11 stamp: 'G.L.S. 5/24/2021 14:47:47'!
test11

	|portfolio|
	
	portfolio  := Portfolio new.
	
	self should: [portfolio addPortfolioElement: portfolio] 
		raise:  Error
		withExceptionDo: [:anError |
			self assert: anError messageText  = Portfolio PortfolioAlreadyExistsError.
			].
	 
!
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 14:49:22'!
test12PortfolioCannotContainTheSamePortfolioInMultipleLevels

	|portfolio portfolio2 portfolio3|
	
	portfolio  := Portfolio new.
	portfolio2  := Portfolio new.	
	portfolio3  := Portfolio new.
	
	self should: [
			portfolio addPortfolioElement: portfolio2.
			portfolio2 addPortfolioElement: portfolio3.
			portfolio2 addPortfolioElement: portfolio3.
			] 
		raise:  Error
		withExceptionDo: [:anError |
			self assert: anError messageText  = Portfolio PortfolioAlreadyExistsError.
			].
	 
! !
!WarpBlt class methodsFor: 'examples' stamp: 'G.L.S. 5/24/2021 14:49:22'!
test12PortfolioCannotContainTheSamePortfolioInMultipleLevels
	"
	Display restoreAfter: [WarpBlt test12]
	"
	"Just like test1, but comparing smooth to non-smooth warps"
	| warp pts r1 p0 p ext warp2 box |
	Utilities informUser: 'Choose a rectangle with interesting stuff'
		during: [r1 _ Rectangle originFromUser: 50@50.
				Sensor waitNoButton].
	Utilities informUser: 'Now click down and up
and move the mouse around the dot'
		during: [p0 _ Sensor waitClickButton.
				(Form dotOfSize: 8) displayAt: p0].
	warp _ (self toForm: Display)
		cellSize: 2;  "installs a colormap"
		clipRect: (0@0 extent: r1 extent*5);
		sourceForm: Display;
		combinationRule: Form over.
	warp2 _ (self toForm: Display)
		clipRect: ((0@0 extent: r1 extent*5) translatedBy: 250@0);
		sourceForm: Display;
		combinationRule: Form over.
	[Sensor isAnyButtonPressed] whileFalse:
		[p _ Sensor mousePoint.
		pts _ {r1 topLeft. r1 bottomLeft. r1 bottomRight. r1 topRight}
			collect: [:pt | pt inverseRotatedBy: (p-p0) theta about: r1 center].
		ext _ (r1 extent*((p-p0) r / 20.0 max: 0.1)) asIntegerPoint.
		box _ (r1 extent*5-ext//2 extent: ext).
		warp copyQuad: pts toRect: box.
		DisplayScreen screenUpdateRequired: box.
		box _ ((r1 extent*5-ext//2 extent: ext) translatedBy: 250@0).
		warp2 copyQuad: pts toRect: box.
		DisplayScreen screenUpdateRequired: box.
		]! !

!methodRemoval: PortfolioTest #test12 stamp: 'G.L.S. 5/24/2021 14:49:22'!
test12

	|portfolio portfolio2 portfolio3|
	
	portfolio  := Portfolio new.
	portfolio2  := Portfolio new.	
	portfolio3  := Portfolio new.
	
	self should: [
			portfolio addPortfolioElement: portfolio2.
			portfolio2 addPortfolioElement: portfolio3.
			portfolio2 addPortfolioElement: portfolio3.
			] 
		raise:  Error
		withExceptionDo: [:anError |
			self assert: anError messageText  = Portfolio PortfolioAlreadyExistsError.
			].
	 
!

!methodRemoval: WarpBlt class #test12 stamp: 'G.L.S. 5/24/2021 14:49:22'!
test12
	"
	Display restoreAfter: [WarpBlt test12]
	"
	"Just like test1, but comparing smooth to non-smooth warps"
	| warp pts r1 p0 p ext warp2 box |
	Utilities informUser: 'Choose a rectangle with interesting stuff'
		during: [r1 _ Rectangle originFromUser: 50@50.
				Sensor waitNoButton].
	Utilities informUser: 'Now click down and up
and move the mouse around the dot'
		during: [p0 _ Sensor waitClickButton.
				(Form dotOfSize: 8) displayAt: p0].
	warp _ (self toForm: Display)
		cellSize: 2;  "installs a colormap"
		clipRect: (0@0 extent: r1 extent*5);
		sourceForm: Display;
		combinationRule: Form over.
	warp2 _ (self toForm: Display)
		clipRect: ((0@0 extent: r1 extent*5) translatedBy: 250@0);
		sourceForm: Display;
		combinationRule: Form over.
	[Sensor isAnyButtonPressed] whileFalse:
		[p _ Sensor mousePoint.
		pts _ {r1 topLeft. r1 bottomLeft. r1 bottomRight. r1 topRight}
			collect: [:pt | pt inverseRotatedBy: (p-p0) theta about: r1 center].
		ext _ (r1 extent*((p-p0) r / 20.0 max: 0.1)) asIntegerPoint.
		box _ (r1 extent*5-ext//2 extent: ext).
		warp copyQuad: pts toRect: box.
		DisplayScreen screenUpdateRequired: box.
		box _ ((r1 extent*5-ext//2 extent: ext) translatedBy: 250@0).
		warp2 copyQuad: pts toRect: box.
		DisplayScreen screenUpdateRequired: box.
		]!
!WarpBlt class methodsFor: 'examples' stamp: 'G.L.S. 5/24/2021 14:49:22' prior: 50871340!
test12PortfolioCannotContainTheSamePortfolioInMultipleLevels
	"
	Display restoreAfter: [WarpBlt test12]
	"
	"Just like test1, but comparing smooth to non-smooth warps"
	| warp pts r1 p0 p ext warp2 box |
	Utilities informUser: 'Choose a rectangle with interesting stuff'
		during: [r1 _ Rectangle originFromUser: 50@50.
				Sensor waitNoButton].
	Utilities informUser: 'Now click down and up
and move the mouse around the dot'
		during: [p0 _ Sensor waitClickButton.
				(Form dotOfSize: 8) displayAt: p0].
	warp _ (self toForm: Display)
		cellSize: 2;  "installs a colormap"
		clipRect: (0@0 extent: r1 extent*5);
		sourceForm: Display;
		combinationRule: Form over.
	warp2 _ (self toForm: Display)
		clipRect: ((0@0 extent: r1 extent*5) translatedBy: 250@0);
		sourceForm: Display;
		combinationRule: Form over.
	[Sensor isAnyButtonPressed] whileFalse:
		[p _ Sensor mousePoint.
		pts _ {r1 topLeft. r1 bottomLeft. r1 bottomRight. r1 topRight}
			collect: [:pt | pt inverseRotatedBy: (p-p0) theta about: r1 center].
		ext _ (r1 extent*((p-p0) r / 20.0 max: 0.1)) asIntegerPoint.
		box _ (r1 extent*5-ext//2 extent: ext).
		warp copyQuad: pts toRect: box.
		DisplayScreen screenUpdateRequired: box.
		box _ ((r1 extent*5-ext//2 extent: ext) translatedBy: 250@0).
		warp2 copyQuad: pts toRect: box.
		DisplayScreen screenUpdateRequired: box.
		]! !
!WarpBlt class methodsFor: 'examples' stamp: 'G.L.S. 5/24/2021 14:50:35'!
test12
	"
	Display restoreAfter: [WarpBlt test12]
	"
	"Just like test1, but comparing smooth to non-smooth warps"
	| warp pts r1 p0 p ext warp2 box |
	Utilities informUser: 'Choose a rectangle with interesting stuff'
		during: [r1 _ Rectangle originFromUser: 50@50.
				Sensor waitNoButton].
	Utilities informUser: 'Now click down and up
and move the mouse around the dot'
		during: [p0 _ Sensor waitClickButton.
				(Form dotOfSize: 8) displayAt: p0].
	warp _ (self toForm: Display)
		cellSize: 2;  "installs a colormap"
		clipRect: (0@0 extent: r1 extent*5);
		sourceForm: Display;
		combinationRule: Form over.
	warp2 _ (self toForm: Display)
		clipRect: ((0@0 extent: r1 extent*5) translatedBy: 250@0);
		sourceForm: Display;
		combinationRule: Form over.
	[Sensor isAnyButtonPressed] whileFalse:
		[p _ Sensor mousePoint.
		pts _ {r1 topLeft. r1 bottomLeft. r1 bottomRight. r1 topRight}
			collect: [:pt | pt inverseRotatedBy: (p-p0) theta about: r1 center].
		ext _ (r1 extent*((p-p0) r / 20.0 max: 0.1)) asIntegerPoint.
		box _ (r1 extent*5-ext//2 extent: ext).
		warp copyQuad: pts toRect: box.
		DisplayScreen screenUpdateRequired: box.
		box _ ((r1 extent*5-ext//2 extent: ext) translatedBy: 250@0).
		warp2 copyQuad: pts toRect: box.
		DisplayScreen screenUpdateRequired: box.
		]! !

!methodRemoval: WarpBlt class #test12PortfolioCannotContainTheSamePortfolioInMultipleLevels stamp: 'G.L.S. 5/24/2021 14:50:42'!
test12PortfolioCannotContainTheSamePortfolioInMultipleLevels
	"
	Display restoreAfter: [WarpBlt test12]
	"
	"Just like test1, but comparing smooth to non-smooth warps"
	| warp pts r1 p0 p ext warp2 box |
	Utilities informUser: 'Choose a rectangle with interesting stuff'
		during: [r1 _ Rectangle originFromUser: 50@50.
				Sensor waitNoButton].
	Utilities informUser: 'Now click down and up
and move the mouse around the dot'
		during: [p0 _ Sensor waitClickButton.
				(Form dotOfSize: 8) displayAt: p0].
	warp _ (self toForm: Display)
		cellSize: 2;  "installs a colormap"
		clipRect: (0@0 extent: r1 extent*5);
		sourceForm: Display;
		combinationRule: Form over.
	warp2 _ (self toForm: Display)
		clipRect: ((0@0 extent: r1 extent*5) translatedBy: 250@0);
		sourceForm: Display;
		combinationRule: Form over.
	[Sensor isAnyButtonPressed] whileFalse:
		[p _ Sensor mousePoint.
		pts _ {r1 topLeft. r1 bottomLeft. r1 bottomRight. r1 topRight}
			collect: [:pt | pt inverseRotatedBy: (p-p0) theta about: r1 center].
		ext _ (r1 extent*((p-p0) r / 20.0 max: 0.1)) asIntegerPoint.
		box _ (r1 extent*5-ext//2 extent: ext).
		warp copyQuad: pts toRect: box.
		DisplayScreen screenUpdateRequired: box.
		box _ ((r1 extent*5-ext//2 extent: ext) translatedBy: 250@0).
		warp2 copyQuad: pts toRect: box.
		DisplayScreen screenUpdateRequired: box.
		]!
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 14:51:36'!
test13PortfolioCannotEndUpContainingItselfThroughInnerPortfolios

	|portfolio portfolio2 portfolio3|
	
	portfolio  := Portfolio new.
	portfolio2  := Portfolio new.	
	portfolio3  := Portfolio new.
	
	self should: [
			portfolio addPortfolioElement: portfolio3.
			portfolio addPortfolioElement: portfolio2.
			portfolio2 addPortfolioElement: portfolio3.
			] 
		raise:  Error
		withExceptionDo: [:anError |
			self assert: anError messageText  = Portfolio PortfolioAlreadyExistsError.
			].
	 
! !

!methodRemoval: PortfolioTest #test13 stamp: 'G.L.S. 5/24/2021 14:51:36'!
test13

	|portfolio portfolio2 portfolio3|
	
	portfolio  := Portfolio new.
	portfolio2  := Portfolio new.	
	portfolio3  := Portfolio new.
	
	self should: [
			portfolio addPortfolioElement: portfolio3.
			portfolio addPortfolioElement: portfolio2.
			portfolio2 addPortfolioElement: portfolio3.
			] 
		raise:  Error
		withExceptionDo: [:anError |
			self assert: anError messageText  = Portfolio PortfolioAlreadyExistsError.
			].
	 
!
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 14:54:52'!
test13PortfolioCannotHaveAPortfolioContainedInAHigherLevel

	|portfolio portfolio2 portfolio3|
	
	portfolio  := Portfolio new.
	portfolio2  := Portfolio new.	
	portfolio3  := Portfolio new.
	
	self should: [
			portfolio addPortfolioElement: portfolio3.
			portfolio addPortfolioElement: portfolio2.
			portfolio2 addPortfolioElement: portfolio3.
			] 
		raise:  Error
		withExceptionDo: [:anError |
			self assert: anError messageText  = Portfolio PortfolioAlreadyExistsError.
			].
	 
! !

!methodRemoval: PortfolioTest #test13PortfolioCannotEndUpContainingItselfThroughInnerPortfolios stamp: 'G.L.S. 5/24/2021 14:54:52'!
test13PortfolioCannotEndUpContainingItselfThroughInnerPortfolios

	|portfolio portfolio2 portfolio3|
	
	portfolio  := Portfolio new.
	portfolio2  := Portfolio new.	
	portfolio3  := Portfolio new.
	
	self should: [
			portfolio addPortfolioElement: portfolio3.
			portfolio addPortfolioElement: portfolio2.
			portfolio2 addPortfolioElement: portfolio3.
			] 
		raise:  Error
		withExceptionDo: [:anError |
			self assert: anError messageText  = Portfolio PortfolioAlreadyExistsError.
			].
	 
!
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 14:56:37'!
test14PortfoliosCannotContainEachOther

	|portfolio portfolio2|
	
	portfolio  := Portfolio new.
	portfolio2  := Portfolio new.	
	
	self should: [
			portfolio addPortfolioElement: portfolio2.
			portfolio2 addPortfolioElement: portfolio.
			] 
		raise:  Error
		withExceptionDo: [:anError |
			self assert: anError messageText  = Portfolio PortfolioAlreadyExistsError.
			].
	 
! !

!methodRemoval: PortfolioTest #test14 stamp: 'G.L.S. 5/24/2021 14:56:37'!
test14

	|portfolio portfolio2|
	
	portfolio  := Portfolio new.
	portfolio2  := Portfolio new.	
	
	self should: [
			portfolio addPortfolioElement: portfolio2.
			portfolio2 addPortfolioElement: portfolio.
			] 
		raise:  Error
		withExceptionDo: [:anError |
			self assert: anError messageText  = Portfolio PortfolioAlreadyExistsError.
			].
	 
!
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 14:57:27'!
test15

	|portfolio portfolio2|
	
	portfolio  := Portfolio new.
	portfolio2  := Portfolio new.	
	
	self should: [
			portfolio addPortfolioElement: portfolio2.
			portfolio2 addPortfolioElement: portfolio.
			] 
		raise:  Error
		withExceptionDo: [:anError |
			self assert: anError messageText  = Portfolio PortfolioAlreadyExistsError.
			].
	 
! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 14:58:09' prior: 50871678!
test15

	|portfolio portfolio2 portfolio3 portfolio4 portfolio5|
	
	portfolio  := Portfolio new.
	portfolio2  := Portfolio new.	
	portfolio3  := Portfolio new.
	portfolio4  := Portfolio new.
	portfolio5  := Portfolio new.
	
	self should: [
			portfolio addPortfolioElement: portfolio2.
			portfolio2 addPortfolioElement: portfolio.
			] 
		raise:  Error
		withExceptionDo: [:anError |
			self assert: anError messageText  = Portfolio PortfolioAlreadyExistsError.
			].
	 
! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 14:58:47' prior: 50871692!
test15

	|portfolio portfolio2 portfolio3 portfolio4 portfolio5|
	
	portfolio  := Portfolio new.
	portfolio2  := Portfolio new.	
	portfolio3  := Portfolio new.
	portfolio4  := Portfolio new.
	portfolio5  := Portfolio new.
	
	self should: [
			portfolio addPortfolioElement: portfolio2.
			portfolio2 addPortfolioElement: portfolio3.
			portfolio3 addPortfolioElement: portfolio4.
			portfolio4 addPortfolioElement: portfolio5.
			portfolio5 addPortfolioElement: portfolio.
			] 
		raise:  Error
		withExceptionDo: [:anError |
			self assert: anError messageText  = Portfolio PortfolioAlreadyExistsError.
			].
	 
! !

!testRun: #PortfolioTest #test15 stamp: 'G.L.S. 5/24/2021 14:58:50'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 14:59:00' prior: 50871710!
test15

	|portfolio portfolio2 portfolio3 portfolio4 portfolio5|
	
	portfolio  := Portfolio new.
	portfolio2  := Portfolio new.	
	portfolio3  := Portfolio new.
	portfolio4  := Portfolio new.
	portfolio5  := Portfolio new.
	
	self should: [
			portfolio addPortfolioElement: portfolio2.
			portfolio2 addPortfolioElement: portfolio3.
			portfolio3 addPortfolioElement: portfolio4.
			portfolio4 addPortfolioElement: portfolio5.
			portfolio5 addPortfolioElement: portfolio2.
			] 
		raise:  Error
		withExceptionDo: [:anError |
			self assert: anError messageText  = Portfolio PortfolioAlreadyExistsError.
			].
	 
! !

!testRun: #PortfolioTest #test15 stamp: 'G.L.S. 5/24/2021 14:59:02'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfEmptyPortfolioEquals0 stamp: 'G.L.S. 5/24/2021 14:59:02'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance stamp: 'G.L.S. 5/24/2021 14:59:02'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts stamp: 'G.L.S. 5/24/2021 14:59:02'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioTransactionsAreAnEmptyCollection stamp: 'G.L.S. 5/24/2021 14:59:02'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfAPortfolioWithOneAccountEqualsTheAccountTransactions stamp: 'G.L.S. 5/24/2021 14:59:02'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOnAPortfolioWithAnAccountOnAnExistingTransactionReturnsTrue stamp: 'G.L.S. 5/24/2021 14:59:02'!
PASSED!

!testRun: #PortfolioTest #test07hasRegisteredDoesNotReturnTrueOnATransactionOfAnAccountNotInsideThePortfolio stamp: 'G.L.S. 5/24/2021 14:59:02'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCantHaveMultiplesOfTheSameAccount stamp: 'G.L.S. 5/24/2021 14:59:02'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantHaveMultipleOfTheSameAccountByAddingAnotherPortfolioWithTheAccounts stamp: 'G.L.S. 5/24/2021 14:59:02'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanHaveAnotherPortfolioWithDifferentAccounts stamp: 'G.L.S. 5/24/2021 14:59:02'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCannotContainItself stamp: 'G.L.S. 5/24/2021 14:59:02'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCannotContainTheSamePortfolioInMultipleLevels stamp: 'G.L.S. 5/24/2021 14:59:02'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCannotHaveAPortfolioContainedInAHigherLevel stamp: 'G.L.S. 5/24/2021 14:59:02'!
PASSED!

!testRun: #PortfolioTest #test14PortfoliosCannotContainEachOther stamp: 'G.L.S. 5/24/2021 14:59:02'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'G.L.S. 5/24/2021 14:59:02'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 14:59:06' prior: 50871735!
test15

	|portfolio portfolio2 portfolio3 portfolio4 portfolio5|
	
	portfolio  := Portfolio new.
	portfolio2  := Portfolio new.	
	portfolio3  := Portfolio new.
	portfolio4  := Portfolio new.
	portfolio5  := Portfolio new.
	
	self should: [
			portfolio addPortfolioElement: portfolio2.
			portfolio2 addPortfolioElement: portfolio3.
			portfolio3 addPortfolioElement: portfolio4.
			portfolio4 addPortfolioElement: portfolio5.
			portfolio5 addPortfolioElement: portfolio4.
			] 
		raise:  Error
		withExceptionDo: [:anError |
			self assert: anError messageText  = Portfolio PortfolioAlreadyExistsError.
			].
	 
! !

!testRun: #PortfolioTest #test15 stamp: 'G.L.S. 5/24/2021 14:59:08'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfEmptyPortfolioEquals0 stamp: 'G.L.S. 5/24/2021 14:59:08'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance stamp: 'G.L.S. 5/24/2021 14:59:08'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts stamp: 'G.L.S. 5/24/2021 14:59:08'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioTransactionsAreAnEmptyCollection stamp: 'G.L.S. 5/24/2021 14:59:08'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfAPortfolioWithOneAccountEqualsTheAccountTransactions stamp: 'G.L.S. 5/24/2021 14:59:08'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOnAPortfolioWithAnAccountOnAnExistingTransactionReturnsTrue stamp: 'G.L.S. 5/24/2021 14:59:08'!
PASSED!

!testRun: #PortfolioTest #test07hasRegisteredDoesNotReturnTrueOnATransactionOfAnAccountNotInsideThePortfolio stamp: 'G.L.S. 5/24/2021 14:59:08'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCantHaveMultiplesOfTheSameAccount stamp: 'G.L.S. 5/24/2021 14:59:08'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantHaveMultipleOfTheSameAccountByAddingAnotherPortfolioWithTheAccounts stamp: 'G.L.S. 5/24/2021 14:59:08'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanHaveAnotherPortfolioWithDifferentAccounts stamp: 'G.L.S. 5/24/2021 14:59:08'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCannotContainItself stamp: 'G.L.S. 5/24/2021 14:59:08'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCannotContainTheSamePortfolioInMultipleLevels stamp: 'G.L.S. 5/24/2021 14:59:08'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCannotHaveAPortfolioContainedInAHigherLevel stamp: 'G.L.S. 5/24/2021 14:59:08'!
PASSED!

!testRun: #PortfolioTest #test14PortfoliosCannotContainEachOther stamp: 'G.L.S. 5/24/2021 14:59:08'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'G.L.S. 5/24/2021 14:59:08'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 14:59:13' prior: 50871820!
test15

	|portfolio portfolio2 portfolio3 portfolio4 portfolio5|
	
	portfolio  := Portfolio new.
	portfolio2  := Portfolio new.	
	portfolio3  := Portfolio new.
	portfolio4  := Portfolio new.
	portfolio5  := Portfolio new.
	
	self should: [
			portfolio addPortfolioElement: portfolio2.
			portfolio2 addPortfolioElement: portfolio3.
			portfolio3 addPortfolioElement: portfolio4.
			portfolio4 addPortfolioElement: portfolio5.
			portfolio5 addPortfolioElement: portfolio3.
			] 
		raise:  Error
		withExceptionDo: [:anError |
			self assert: anError messageText  = Portfolio PortfolioAlreadyExistsError.
			].
	 
! !

!testRun: #PortfolioTest #test15 stamp: 'G.L.S. 5/24/2021 14:59:13'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfEmptyPortfolioEquals0 stamp: 'G.L.S. 5/24/2021 14:59:13'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance stamp: 'G.L.S. 5/24/2021 14:59:13'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts stamp: 'G.L.S. 5/24/2021 14:59:13'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioTransactionsAreAnEmptyCollection stamp: 'G.L.S. 5/24/2021 14:59:13'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfAPortfolioWithOneAccountEqualsTheAccountTransactions stamp: 'G.L.S. 5/24/2021 14:59:13'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOnAPortfolioWithAnAccountOnAnExistingTransactionReturnsTrue stamp: 'G.L.S. 5/24/2021 14:59:13'!
PASSED!

!testRun: #PortfolioTest #test07hasRegisteredDoesNotReturnTrueOnATransactionOfAnAccountNotInsideThePortfolio stamp: 'G.L.S. 5/24/2021 14:59:13'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCantHaveMultiplesOfTheSameAccount stamp: 'G.L.S. 5/24/2021 14:59:13'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantHaveMultipleOfTheSameAccountByAddingAnotherPortfolioWithTheAccounts stamp: 'G.L.S. 5/24/2021 14:59:13'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanHaveAnotherPortfolioWithDifferentAccounts stamp: 'G.L.S. 5/24/2021 14:59:13'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCannotContainItself stamp: 'G.L.S. 5/24/2021 14:59:13'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCannotContainTheSamePortfolioInMultipleLevels stamp: 'G.L.S. 5/24/2021 14:59:13'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCannotHaveAPortfolioContainedInAHigherLevel stamp: 'G.L.S. 5/24/2021 14:59:13'!
PASSED!

!testRun: #PortfolioTest #test14PortfoliosCannotContainEachOther stamp: 'G.L.S. 5/24/2021 14:59:13'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'G.L.S. 5/24/2021 14:59:13'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 14:59:17' prior: 50871905!
test15

	|portfolio portfolio2 portfolio3 portfolio4 portfolio5|
	
	portfolio  := Portfolio new.
	portfolio2  := Portfolio new.	
	portfolio3  := Portfolio new.
	portfolio4  := Portfolio new.
	portfolio5  := Portfolio new.
	
	self should: [
			portfolio addPortfolioElement: portfolio2.
			portfolio2 addPortfolioElement: portfolio3.
			portfolio3 addPortfolioElement: portfolio4.
			portfolio4 addPortfolioElement: portfolio5.
			portfolio5 addPortfolioElement: portfolio2.
			] 
		raise:  Error
		withExceptionDo: [:anError |
			self assert: anError messageText  = Portfolio PortfolioAlreadyExistsError.
			].
	 
! !

!testRun: #PortfolioTest #test15 stamp: 'G.L.S. 5/24/2021 14:59:19'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfEmptyPortfolioEquals0 stamp: 'G.L.S. 5/24/2021 14:59:19'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance stamp: 'G.L.S. 5/24/2021 14:59:19'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts stamp: 'G.L.S. 5/24/2021 14:59:19'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioTransactionsAreAnEmptyCollection stamp: 'G.L.S. 5/24/2021 14:59:19'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfAPortfolioWithOneAccountEqualsTheAccountTransactions stamp: 'G.L.S. 5/24/2021 14:59:19'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOnAPortfolioWithAnAccountOnAnExistingTransactionReturnsTrue stamp: 'G.L.S. 5/24/2021 14:59:19'!
PASSED!

!testRun: #PortfolioTest #test07hasRegisteredDoesNotReturnTrueOnATransactionOfAnAccountNotInsideThePortfolio stamp: 'G.L.S. 5/24/2021 14:59:19'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCantHaveMultiplesOfTheSameAccount stamp: 'G.L.S. 5/24/2021 14:59:19'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantHaveMultipleOfTheSameAccountByAddingAnotherPortfolioWithTheAccounts stamp: 'G.L.S. 5/24/2021 14:59:19'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanHaveAnotherPortfolioWithDifferentAccounts stamp: 'G.L.S. 5/24/2021 14:59:19'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCannotContainItself stamp: 'G.L.S. 5/24/2021 14:59:19'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCannotContainTheSamePortfolioInMultipleLevels stamp: 'G.L.S. 5/24/2021 14:59:19'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCannotHaveAPortfolioContainedInAHigherLevel stamp: 'G.L.S. 5/24/2021 14:59:19'!
PASSED!

!testRun: #PortfolioTest #test14PortfoliosCannotContainEachOther stamp: 'G.L.S. 5/24/2021 14:59:19'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'G.L.S. 5/24/2021 14:59:19'!
PASSED!

!methodRemoval: PortfolioTest #test15 stamp: 'G.L.S. 5/24/2021 14:59:25'!
test15

	|portfolio portfolio2 portfolio3 portfolio4 portfolio5|
	
	portfolio  := Portfolio new.
	portfolio2  := Portfolio new.	
	portfolio3  := Portfolio new.
	portfolio4  := Portfolio new.
	portfolio5  := Portfolio new.
	
	self should: [
			portfolio addPortfolioElement: portfolio2.
			portfolio2 addPortfolioElement: portfolio3.
			portfolio3 addPortfolioElement: portfolio4.
			portfolio4 addPortfolioElement: portfolio5.
			portfolio5 addPortfolioElement: portfolio2.
			] 
		raise:  Error
		withExceptionDo: [:anError |
			self assert: anError messageText  = Portfolio PortfolioAlreadyExistsError.
			].
	 
!
!Behavior method!
createNew
	^ [
	([
	(Portfolio
		cover: (14 to: 22)
		declaredAt: (14 to: 22)) new ] valueCoveringAll:
		{24 to: 26}) initialize ] valueCoveringAll:
		{28 to: 37}.! !
!Behavior method!
initialize
	(portfolioElements _ [
	(OrderedCollection
		cover: (34 to: 50)
		declaredAt: (34 to: 50)) new ] valueCoveringAll:
		{52 to: 54})
		cover: (13 to: 29)
		declaredAt: (13 to: 29).
	(parent _ self coverAll:
		{68 to: 71})
		cover: (58 to: 63)
		declaredAt: (58 to: 63).! !
!Behavior method!
balance
	^ [
	(portfolioElements
		cover: (11 to: 27)
		declaredAt: (11 to: 27))
		sum: [ :aPortfolioElement |
			[
			(aPortfolioElement
				cover: (56 to: 72)
				declaredAt: (36 to: 52)) balance ] valueCoveringAll:
				{74 to: 80} ]
		ifEmpty: [
			0 coverAll:
				{93 to: 93} ]] valueCoveringAll:
		{29 to: 32. 83 to: 90}.! !

!testRun: #PortfolioTest #test01BalanceOfEmptyPortfolioEquals0 stamp: 'G.L.S. 5/24/2021 14:59:41'!
PASSED!
!Behavior method!
initialize
	(transactions _ [
	(OrderedCollection
		cover: (30 to: 46)
		declaredAt: (30 to: 46)) new ] valueCoveringAll:
		{48 to: 50})
		cover: (14 to: 25)
		declaredAt: (14 to: 25).! !
!Behavior method!
register: aValue on: account
	| transaction |
	(transaction _ [
	(self coverAll:
		{66 to: 69}) for:
		(aValue
			cover: (76 to: 81)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{71 to: 74})
		cover: (51 to: 61)
		declaredAt: (34 to: 44).
	[
	(account
		cover: (85 to: 91)
		declaredAt: (22 to: 28)) register:
		(transaction
			cover: (103 to: 113)
			declaredAt: (34 to: 44)) ] valueCoveringAll:
		{93 to: 101}.
	^ transaction
		cover: (122 to: 132)
		declaredAt: (34 to: 44).! !
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
register: aTransaction
	[
	(transactions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) add:
		(aTransaction
			cover: (44 to: 55)
			declaredAt: (11 to: 22)) ] valueCoveringAll:
		{39 to: 42}.! !
!Behavior method!
addPortfolioElement: aNewPortfolioElement
	| root |
	(root _ [
	(self coverAll:
		{62 to: 65}) oldestParent ] valueCoveringAll:
		{67 to: 78})
		cover: (54 to: 57)
		declaredAt: (45 to: 48).
	[
	([
	(root
		cover: (85 to: 88)
		declaredAt: (45 to: 48)) =
		(aNewPortfolioElement
			cover: (92 to: 111)
			declaredAt: (22 to: 41)) ] valueCoveringAll:
		{90 to: 90}) ifTrue: [
		[
		(self coverAll:
			{123 to: 126}) error:
			([
			([
			(self coverAll:
				{135 to: 138}) class ] valueCoveringAll:
				{140 to: 144}) PortfolioAlreadyExistsError ] valueCoveringAll:
				{146 to: 172}) ] valueCoveringAll:
			{128 to: 133} ]] valueCoveringAll:
		{114 to: 120}.
	[
	([
	([
	(root
		cover: (178 to: 181)
		declaredAt: (45 to: 48)) allElements ] valueCoveringAll:
		{183 to: 193}) anySatisfy: [ :aPortfolioElement |
		[
		(aNewPortfolioElement
			cover: (229 to: 248)
			declaredAt: (22 to: 41)) hasOrIs:
			(aPortfolioElement
				cover: (259 to: 275)
				declaredAt: (209 to: 225)) ] valueCoveringAll:
			{250 to: 257} ]] valueCoveringAll:
		{195 to: 205}) ifTrue: [
		[
		(self coverAll:
			{288 to: 291}) error:
			([
			([
			(self coverAll:
				{300 to: 303}) class ] valueCoveringAll:
				{305 to: 309}) AccountAlreadyExistsError ] valueCoveringAll:
				{311 to: 335}) ] valueCoveringAll:
			{293 to: 298} ]] valueCoveringAll:
		{279 to: 285}.
	[
	(aNewPortfolioElement
		cover: (342 to: 361)
		declaredAt: (22 to: 41)) addTo:
		(self coverAll:
			{370 to: 373}) ] valueCoveringAll:
		{363 to: 368}.! !
!Behavior method!
oldestParent
	[
	([
	(parent
		cover: (16 to: 21)
		declaredAt: (16 to: 21)) =
		(self coverAll:
			{25 to: 28}) ] valueCoveringAll:
		{23 to: 23}) ifTrue: [ ^ self coverAll:
			{40 to: 43} ]] valueCoveringAll:
		{31 to: 37}.
	^ [
	(parent
		cover: (49 to: 54)
		declaredAt: (16 to: 21)) oldestParent ] valueCoveringAll:
		{56 to: 67}.! !
!Behavior method!
allElements
	| totalAccounts |
	(totalAccounts _ [
	(OrderedCollection
		cover: (52 to: 68)
		declaredAt: (52 to: 68)) new ] valueCoveringAll:
		{70 to: 72})
		cover: (35 to: 47)
		declaredAt: (17 to: 29).
	[
	(totalAccounts
		cover: (76 to: 88)
		declaredAt: (17 to: 29)) addAll:
		(portfolioElements
			cover: (98 to: 114)
			declaredAt: (98 to: 114)) ] valueCoveringAll:
		{90 to: 96}.
	[
	([
	(self coverAll:
		{120 to: 123}) portfolios ] valueCoveringAll:
		{125 to: 134}) do: [ :aPortfolio |
		[
		(totalAccounts
			cover: (155 to: 167)
			declaredAt: (17 to: 29)) addAll:
			([
			(aPortfolio
				cover: (177 to: 186)
				declaredAt: (142 to: 151)) allElements ] valueCoveringAll:
				{188 to: 198}) ] valueCoveringAll:
			{169 to: 175} ]] valueCoveringAll:
		{136 to: 138}.
	^ totalAccounts
		cover: (206 to: 218)
		declaredAt: (17 to: 29).! !
!Behavior method!
portfolios
	^ [
	(portfolioElements
		cover: (15 to: 31)
		declaredAt: (15 to: 31)) select: [ :aPortfolioElement |
		[
		([
		(aPortfolioElement
			cover: (62 to: 78)
			declaredAt: (42 to: 58)) class ] valueCoveringAll:
			{80 to: 84}) =
			(Portfolio
				cover: (88 to: 96)
				declaredAt: (88 to: 96)) ] valueCoveringAll:
			{86 to: 86} ]] valueCoveringAll:
		{33 to: 39}.! !
!Behavior method!
addTo: aPortfolio
	[
	(aPortfolio
		cover: (20 to: 29)
		declaredAt: (8 to: 17)) addAccount:
		(self coverAll:
			{43 to: 46}) ] valueCoveringAll:
		{31 to: 41}.! !
!Behavior method!
addAccount: anAccount
	self.
	[
	(portfolioElements
		cover: (25 to: 41)
		declaredAt: (25 to: 41)) add:
		(anAccount
			cover: (48 to: 56)
			declaredAt: (13 to: 21)) ] valueCoveringAll:
		{43 to: 46}.! !
!Behavior method!
balance
	| total |
	(total _ 0 coverAll:
		{32 to: 32})
		cover: (23 to: 27)
		declaredAt: (13 to: 17).
	[
	(transactions
		cover: (38 to: 49)
		declaredAt: (38 to: 49)) do: [ :aTransaction |
		(total _ [
		(aTransaction
			cover: (81 to: 92)
			declaredAt: (57 to: 68)) performOperationOnBalance:
			(total
				cover: (72 to: 76)
				declaredAt: (13 to: 17)) ] valueCoveringAll:
			{94 to: 119})
			cover: (121 to: 125)
			declaredAt: (13 to: 17) ]] valueCoveringAll:
		{51 to: 53}.
	^ total
		cover: (133 to: 137)
		declaredAt: (13 to: 17).! !
!Behavior method!
performOperationOnBalance: aTotal
	^ [
	(aTotal
		cover: (39 to: 44)
		declaredAt: (28 to: 33)) +
		(value
			cover: (48 to: 52)
			declaredAt: (48 to: 52)) ] valueCoveringAll:
		{46 to: 46}.! !

!testRun: #PortfolioTest #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance stamp: 'G.L.S. 5/24/2021 14:59:41'!
PASSED!
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
hasOrIs: aReceptiveAccount
	^ [
	(self coverAll:
		{30 to: 33}) =
		(aReceptiveAccount
			cover: (37 to: 53)
			declaredAt: (10 to: 26)) ] valueCoveringAll:
		{35 to: 35}.! !
!Behavior method!
performOperationOnBalance: aTotal
	^ [
	(aTotal
		cover: (39 to: 44)
		declaredAt: (28 to: 33)) -
		(value
			cover: (48 to: 52)
			declaredAt: (48 to: 52)) ] valueCoveringAll:
		{46 to: 46}.! !

!testRun: #PortfolioTest #test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts stamp: 'G.L.S. 5/24/2021 14:59:41'!
PASSED!
!Behavior method!
transactions
	| totalTransactions |
	(totalTransactions _ [
	(OrderedCollection
		cover: (59 to: 75)
		declaredAt: (59 to: 75)) new ] valueCoveringAll:
		{77 to: 79})
		cover: (38 to: 54)
		declaredAt: (16 to: 32).
	[
	(portfolioElements
		cover: (85 to: 101)
		declaredAt: (85 to: 101)) do: [ :anAccount |
		[
		(totalTransactions
			cover: (121 to: 137)
			declaredAt: (16 to: 32)) addAll:
			([
			(anAccount
				cover: (147 to: 155)
				declaredAt: (109 to: 117)) transactions ] valueCoveringAll:
				{157 to: 168}) ] valueCoveringAll:
			{139 to: 145} ]] valueCoveringAll:
		{103 to: 105}.
	^ totalTransactions
		cover: (176 to: 192)
		declaredAt: (16 to: 32).! !

!testRun: #PortfolioTest #test04EmptyPortfolioTransactionsAreAnEmptyCollection stamp: 'G.L.S. 5/24/2021 14:59:41'!
PASSED!
!Behavior method!
transactions
	^ [
	(transactions
		cover: (19 to: 30)
		declaredAt: (19 to: 30)) copy ] valueCoveringAll:
		{32 to: 35}.! !

!testRun: #PortfolioTest #test05TransactionsOfAPortfolioWithOneAccountEqualsTheAccountTransactions stamp: 'G.L.S. 5/24/2021 14:59:41'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(portfolioElements
		cover: (32 to: 48)
		declaredAt: (32 to: 48)) anySatisfy: [ :aPortfolioElement |
		[
		(aPortfolioElement
			cover: (84 to: 100)
			declaredAt: (64 to: 80)) hasRegistered:
			(aTransaction
				cover: (117 to: 128)
				declaredAt: (16 to: 27)) ] valueCoveringAll:
			{102 to: 115} ]] valueCoveringAll:
		{50 to: 60}.! !
!Behavior method!
hasRegistered: aTransaction
	^ [
	(transactions
		cover: (33 to: 44)
		declaredAt: (33 to: 44)) includes:
		(aTransaction
			cover: (56 to: 67)
			declaredAt: (16 to: 27)) ] valueCoveringAll:
		{46 to: 54}.! !

!testRun: #PortfolioTest #test06hasRegisteredOnAPortfolioWithAnAccountOnAnExistingTransactionReturnsTrue stamp: 'G.L.S. 5/24/2021 14:59:41'!
PASSED!

!testRun: #PortfolioTest #test07hasRegisteredDoesNotReturnTrueOnATransactionOfAnAccountNotInsideThePortfolio stamp: 'G.L.S. 5/24/2021 14:59:41'!
PASSED!
!Behavior method!
AccountAlreadyExistsError
	^ 'La cuenta ya existe!!!!!!' coverAll:
		{29 to: 52}.! !

!testRun: #PortfolioTest #test08PortfolioCantHaveMultiplesOfTheSameAccount stamp: 'G.L.S. 5/24/2021 14:59:41'!
PASSED!
!Behavior method!
hasOrIs: aNewPortfolioElement
	[
	([
	(self coverAll:
		{35 to: 38}) =
		(aNewPortfolioElement
			cover: (42 to: 61)
			declaredAt: (10 to: 29)) ] valueCoveringAll:
		{40 to: 40}) ifTrue: [
		[
		(self coverAll:
			{73 to: 76}) error:
			([
			([
			(self coverAll:
				{85 to: 88}) class ] valueCoveringAll:
				{90 to: 94}) PortfolioAlreadyExistsError ] valueCoveringAll:
				{96 to: 122}) ] valueCoveringAll:
			{78 to: 83} ]] valueCoveringAll:
		{64 to: 70}.
	^ [
	(portfolioElements
		cover: (130 to: 146)
		declaredAt: (130 to: 146)) anySatisfy: [ :aPortfolioElement |
		[
		(aPortfolioElement
			cover: (182 to: 198)
			declaredAt: (162 to: 178)) hasOrIs:
			(aNewPortfolioElement
				cover: (209 to: 228)
				declaredAt: (10 to: 29)) ] valueCoveringAll:
			{200 to: 207} ]] valueCoveringAll:
		{148 to: 158}.! !

!testRun: #PortfolioTest #test09PortfolioCantHaveMultipleOfTheSameAccountByAddingAnotherPortfolioWithTheAccounts stamp: 'G.L.S. 5/24/2021 14:59:41'!
PASSED!
!Behavior method!
addTo: aPortfolio
	self coverAll:
		{46 to: 49}.
	[
	(aPortfolio
		cover: (21 to: 30)
		declaredAt: (8 to: 17)) addPortfolio: self ] valueCoveringAll:
		{32 to: 44}.! !
!Behavior method!
addPortfolio: aPortfolio
	self coverAll:
		{51 to: 54}.
	[
	(aPortfolio
		cover: (29 to: 38)
		declaredAt: (16 to: 25)) newParent: self ] valueCoveringAll:
		{40 to: 49}.
	[
	(portfolioElements
		cover: (58 to: 74)
		declaredAt: (58 to: 74)) add:
		(aPortfolio
			cover: (81 to: 90)
			declaredAt: (16 to: 25)) ] valueCoveringAll:
		{76 to: 79}.! !
!Behavior method!
newParent: aPortfolio
	(parent _ aPortfolio
		cover: (34 to: 43)
		declaredAt: (12 to: 21))
		cover: (24 to: 29)
		declaredAt: (24 to: 29).! !

!testRun: #PortfolioTest #test10PortfolioCanHaveAnotherPortfolioWithDifferentAccounts stamp: 'G.L.S. 5/24/2021 14:59:41'!
PASSED!
!Behavior method!
PortfolioAlreadyExistsError
	^ 'Ya existe este portfolio' coverAll:
		{31 to: 56}.! !

!testRun: #PortfolioTest #test11PortfolioCannotContainItself stamp: 'G.L.S. 5/24/2021 14:59:41'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCannotContainTheSamePortfolioInMultipleLevels stamp: 'G.L.S. 5/24/2021 14:59:41'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCannotHaveAPortfolioContainedInAHigherLevel stamp: 'G.L.S. 5/24/2021 14:59:41'!
PASSED!

!testRun: #PortfolioTest #test14PortfoliosCannotContainEachOther stamp: 'G.L.S. 5/24/2021 14:59:41'!
PASSED!

!methodRemoval: Portfolio #allAccounts stamp: 'G.L.S. 5/24/2021 15:00:40'!
allAccounts
	
	|totalAccounts|
	
	totalAccounts := OrderedCollection new.
	totalAccounts addAll: (portfolioElements select:[:aPortfolioElement | aPortfolioElement class = ReceptiveAccount]).
	
	self portfolios do: [:aPortfolio | totalAccounts addAll: aPortfolio allAccounts].
	
	^totalAccounts.!
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 15:09:22'!
test15

	|portfolio portfolio2 portfolio3 portfolio4|
	
	portfolio  := Portfolio new.
	portfolio2  := Portfolio new.
	portfolio3  := Portfolio new.
	portfolio4  := Portfolio new	.
	
	portfolio3 addPortfolioElement: portfolio4.
	
	portfolio addPortfolioElement: portfolio3.
	portfolio2 addPortfolioElement: portfolio3.
	
	
	"self should: [
			portfolio addPortfolioElement: portfolio2.
			portfolio2 addPortfolioElement: portfolio.
			] 
		raise:  Error
		withExceptionDo: [:anError |
			self assert: anError messageText  = Portfolio PortfolioAlreadyExistsError.
			]."
	 
! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 15:11:29' prior: 50872506!
test15

	|portfolio portfolio2 portfolio3 portfolio4 account|
	
	portfolio  := Portfolio new.
	portfolio2  := Portfolio new.
	portfolio3  := Portfolio new.
	portfolio4  := Portfolio new	.
	
	account := ReceptiveAccount  new.
	
	self should: [
			portfolio3 addPortfolioElement: portfolio4.
	
			portfolio addPortfolioElement: portfolio3.
			portfolio2 addPortfolioElement: portfolio3.
	
			portfolio addPortfolioElement: account.
			portfolio3 addPortfolioElement: account.
			] 
		raise:  Error
		withExceptionDo: [:anError |
			self assert: anError messageText  = Portfolio AccountAlreadyExistsError.
			].
	 
! !

!testRun: #PortfolioTest #test15 stamp: 'G.L.S. 5/24/2021 15:12:15'!
FAILURE!

!testRun: #PortfolioTest #test15 stamp: 'G.L.S. 5/24/2021 15:12:38'!
FAILURE!

!testRun: #PortfolioTest #test15 stamp: 'G.L.S. 5/24/2021 15:12:38'!
FAILURE!

!classDefinition: #Portfolio category: 'Portfolio-Ejercicio' stamp: 'G.L.S. 5/24/2021 15:15:26'!
Object subclass: #Portfolio
	instanceVariableNames: 'portfolioElements parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/24/2021 15:15:26' prior: 50869569!
newParent: aPortfolio
	parents := aPortfolio.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/24/2021 15:15:26' prior: 50869757 overrides: 16896425!
initialize
	portfolioElements := OrderedCollection new.
	parents := self.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/24/2021 15:15:26' prior: 50869834!
oldestParent
	(parents = self) ifTrue:[^self].
	^parents oldestParent.! !
!Portfolio methodsFor: 'private' stamp: 'G.L.S. 5/24/2021 15:15:47'!
addParent: aPortfolio
	parents := aPortfolio.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/24/2021 15:15:47' prior: 50869558!
addPortfolio:  aPortfolio.
	aPortfolio addParent: self.
	portfolioElements add: aPortfolio. ! !

!methodRemoval: Portfolio #newParent: stamp: 'G.L.S. 5/24/2021 15:15:47'!
newParent: aPortfolio
	parents := aPortfolio.!
!Portfolio methodsFor: 'private' stamp: 'G.L.S. 5/24/2021 15:16:55' prior: 50872582!
addParent: aPortfolio
	(self = parents) ifTrue: [parents := OrderedCollection new].
	parents add: aPortfolio ! !
!Portfolio methodsFor: 'private' stamp: 'G.L.S. 5/24/2021 15:16:56' prior: 50872597!
addParent: aPortfolio
	(self = parents) ifTrue: [parents := OrderedCollection new].
	parents add: aPortfolio.! !
!Portfolio methodsFor: 'initialization' stamp: 'G.L.S. 5/24/2021 15:17:43' prior: 50872571 overrides: 16896425!
initialize
	portfolioElements := OrderedCollection new.
	parents := OrderedCollection new.! !
!Portfolio methodsFor: 'private' stamp: 'G.L.S. 5/24/2021 15:18:04' prior: 50872604!
addParent: aPortfolio
	parents add: aPortfolio.! !
!Portfolio methodsFor: 'private' stamp: 'G.L.S. 5/24/2021 15:18:27' prior: 50872577!
oldestParent
	(parents isEmpty) ifTrue:[^self].
	^parents oldestParent.! !

pepe _ OrderedCollection new.!

pepe _ OrderedCollection new.!

pepe _ OrderedCollection new.!

pepe _ OrderedCollection new.!

pepe add:3.!

pepe add:3.!

pepe add:3.!

pepe add:3.!

pepe add:3.!

pepe add:3.!

pepe add:3.!

pepe add:3.!

pepe add:3.!

pepe add:2.!

pepe2 _ pepe collect: [:e | e odd].!

pepe2!

asd _ #(1 2 3).!

pepe2 _ OrderedCollection new.!

pepe2 _ pepe collect: [:e | asd add:e].!

asd _ OrderedCollection new.!

pepe2 _ OrderedCollection new.!

pepe2 _ pepe collect: [:e | asd add:e].!

pepe2!

pepe2!

pepe _ OrderedCollection new.!

pepe _ OrderedCollection new.!

pepe _ OrderedCollection new.!

pepe _ OrderedCollection new.!

pepe add:3.!

pepe add:3.!

pepe add:3.!

pepe add:2.!

pepe2 _ OrderedCollection new.!

pepe2 _ pepe collect: [:e | asd add:e. asd].!

pepe2!

asd _ OrderedCollection new.!

pepe2 _ OrderedCollection new.!

pepe2 _ pepe collect: [:e | asd add:e.].!

pepe2!
!Portfolio methodsFor: 'private' stamp: 'G.L.S. 5/24/2021 15:24:54' prior: 50872623!
oldestParent
	(parents isEmpty) ifTrue:[^self].
	^parents collect: [:aParent | aParent oldestParent].! !

portfolio := Portfolio createNew.!

portfolio2 := Portfolio createNew.!

portfolio := Portfolio createNew.
portfolio2 := Portfolio createNew.
portfolio3 := Portfolio createNew.
portfolio4 := Portfolio createNew.!

portfolio addPortfolioElement: portfolio4.!

portfolio2 addPortfolioElement: portfolio4.!

portfolio3 addPortfolioElement: portfolio4.!

portfolio4 parents!

portfolio4 oldestParent .!

portfolio := Portfolio createNew.
portfolio2 := Portfolio createNew.
portfolio3 := Portfolio createNew.
portfolio4 := Portfolio createNew.
portfolio5 := Portfolio createNew.!

portfolio := Portfolio createNew.
portfolio2 := Portfolio createNew.
portfolio3 := Portfolio createNew.
portfolio4 := Portfolio createNew.
portfolio5 := Portfolio createNew.!

portfolio := Portfolio createNew.
portfolio2 := Portfolio createNew.
portfolio3 := Portfolio createNew.
portfolio4 := Portfolio createNew.
portfolio5 := Portfolio createNew.!

portfolio := Portfolio createNew.
portfolio2 := Portfolio createNew.
portfolio3 := Portfolio createNew.
portfolio4 := Portfolio createNew.
portfolio5 := Portfolio createNew.!

portfolio := Portfolio createNew.
portfolio2 := Portfolio createNew.
portfolio3 := Portfolio createNew.
portfolio4 := Portfolio createNew.
portfolio5 := Portfolio createNew.!

portfolio addPortfolioElement: portfolio4.
portfolio2 addPortfolioElement: portfolio4.
portfolio3 addPortfolioElement: portfolio4.
portfolio4 addPortfolioElement: portfolio5.!

portfolio := Portfolio createNew.
portfolio2 := Portfolio createNew.
portfolio3 := Portfolio createNew.
portfolio4 := Portfolio createNew.
portfolio5 := Portfolio createNew.!

portfolio addPortfolioElement: portfolio4.!

portfolio2 addPortfolioElement: portfolio4.!

portfolio3 addPortfolioElement: portfolio4.!

portfolio4 addPortfolioElement: portfolio5.!

portfolio addPortfolioElement: portfolio4.!

portfolio := Portfolio createNew.
portfolio2 := Portfolio createNew.
portfolio3 := Portfolio createNew.
portfolio4 := Portfolio createNew.
portfolio5 := Portfolio createNew.!

portfolio addPortfolioElement: portfolio4.!

portfolio2 addPortfolioElement: portfolio4.!

portfolio3 addPortfolioElement: portfolio4.!
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/24/2021 15:28:25' prior: 50871275!
addPortfolioElement: aNewPortfolioElement
	|roots|
	
	roots := self oldestParent.
	
	(roots = aNewPortfolioElement) ifTrue: [self error: self class PortfolioAlreadyExistsError].
	(roots allElements anySatisfy: [:aPortfolioElement | aNewPortfolioElement hasOrIs: aPortfolioElement]) ifTrue: [self error: self class AccountAlreadyExistsError].
	
	aNewPortfolioElement addTo: self.! !
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/24/2021 15:29:17' prior: 50872732!
addPortfolioElement: aNewPortfolioElement
	|roots|
	
	roots := self oldestParent.
	
	(roots includes: aNewPortfolioElement) ifTrue: [self error: self class PortfolioAlreadyExistsError].
	roots do: [ :root | (root allElements anySatisfy: [:aPortfolioElement | aNewPortfolioElement hasOrIs: aPortfolioElement]) ifTrue: [self error: self class AccountAlreadyExistsError].].
	
	aNewPortfolioElement addTo: self.! !
!Portfolio methodsFor: 'accountManagement' stamp: 'G.L.S. 5/24/2021 15:29:23' prior: 50872747!
addPortfolioElement: aNewPortfolioElement
	|roots|
	
	roots := self oldestParent.
	
	(roots includes: aNewPortfolioElement) ifTrue: [self error: self class PortfolioAlreadyExistsError].
	roots do: [:root | (root allElements anySatisfy: [:aPortfolioElement | aNewPortfolioElement hasOrIs: aPortfolioElement]) ifTrue: [self error: self class AccountAlreadyExistsError].].
	
	aNewPortfolioElement addTo: self.! !

portfolio := Portfolio createNew.
portfolio2 := Portfolio createNew.
portfolio3 := Portfolio createNew.
portfolio4 := Portfolio createNew.
portfolio5 := Portfolio createNew.!

portfolio addPortfolioElement: portfolio4.
portfolio2 addPortfolioElement: portfolio4.
portfolio3 addPortfolioElement: portfolio4.
portfolio4 addPortfolioElement: portfolio5.!
!Portfolio methodsFor: 'private' stamp: 'G.L.S. 5/24/2021 15:30:39' prior: 50872657!
oldestParent
	(parents isEmpty) ifTrue:[^[self]].
	^parents collect: [:aParent | aParent oldestParent].! !

rtfolio := Portfolio createNew.
portfolio2 := Portfolio createNew.
portfolio3 := Portfolio createNew.
portfolio4 := Portfolio createNew.
portfolio5 := Portfolio createNew.!

portfolio addPortfolioElement: portfolio4.
portfolio2 addPortfolioElement: portfolio4.
portfolio3 addPortfolioElement: portfolio4.
portfolio4 addPortfolioElement: portfolio5.!
!Portfolio methodsFor: 'private' stamp: 'G.L.S. 5/24/2021 15:31:38' prior: 50872790!
oldestParent
	(parents isEmpty) ifTrue:[^OrderedCollection new add: self].
	^parents collect: [:aParent | aParent oldestParent].! !

portfolio := Portfolio createNew.
portfolio2 := Portfolio createNew.
portfolio3 := Portfolio createNew.
portfolio4 := Portfolio createNew.
portfolio5 := Portfolio createNew.!

portfolio addPortfolioElement: portfolio4.
portfolio2 addPortfolioElement: portfolio4.
portfolio3 addPortfolioElement: portfolio4.
portfolio4 addPortfolioElement: portfolio5.!

portfolio := Portfolio createNew.
portfolio2 := Portfolio createNew.
portfolio3 := Portfolio createNew.
portfolio4 := Portfolio createNew.
portfolio5 := Portfolio createNew.!

portfolio addPortfolioElement: portfolio4.
portfolio2 addPortfolioElement: portfolio4.
portfolio3 addPortfolioElement: portfolio4.
portfolio4 addPortfolioElement: portfolio5.!

portfolio4!

self parents!

self oldestParent !
!Portfolio methodsFor: 'private' stamp: 'G.L.S. 5/24/2021 15:34:17' prior: 50872807!
oldestParent
	(parents isEmpty) ifTrue:[^((OrderedCollection new) add: self)].
	^parents collect: [:aParent | aParent oldestParent].! !

portfolio := Portfolio createNew.
portfolio2 := Portfolio createNew.
portfolio3 := Portfolio createNew.
portfolio4 := Portfolio createNew.
portfolio5 := Portfolio createNew.!

((OrderedCollection new) add: self)!
!Portfolio methodsFor: 'private' stamp: 'G.L.S. 5/24/2021 15:36:26' prior: 50872838!
oldestParent
	|noParentsCollection|
	
	noParentsCollection := OrderedCollection new.
	
	(parents isEmpty) ifTrue:[
		noParentsCollection add:self.
		^noParentsCollection].
	^parents collect: [:aParent | aParent oldestParent].! !

portfolio := Portfolio createNew.
portfolio2 := Portfolio createNew.
portfolio3 := Portfolio createNew.
portfolio4 := Portfolio createNew.
portfolio5 := Portfolio createNew.!

portfolio addPortfolioElement: portfolio4.
portfolio2 addPortfolioElement: portfolio4.
portfolio3 addPortfolioElement: portfolio4.
portfolio4 addPortfolioElement: portfolio5.!

portfolio addPortfolioElement: portfolio4.
portfolio2 addPortfolioElement: portfolio4.
portfolio3 addPortfolioElement: portfolio4.!

portfolio := Portfolio createNew.
portfolio2 := Portfolio createNew.
portfolio3 := Portfolio createNew.
portfolio4 := Portfolio createNew.
portfolio5 := Portfolio createNew.!

portfolio := Portfolio createNew.
portfolio2 := Portfolio createNew.
portfolio3 := Portfolio createNew.
portfolio4 := Portfolio createNew.
portfolio5 := Portfolio createNew.!

portfolio addPortfolioElement: portfolio4.
portfolio2 addPortfolioElement: portfolio4.
portfolio3 addPortfolioElement: portfolio4.!
!Portfolio methodsFor: 'private' stamp: 'G.L.S. 5/24/2021 15:40:44' prior: 50872852!
oldestParent
	|noParentsCollection parentsCollection|
	
	noParentsCollection := OrderedCollection new.
	
	(parents isEmpty) ifTrue:[
		noParentsCollection add:self.
		^noParentsCollection].
	
	parentsCollection := OrderedCollection new.
	
	parentsCollection addAll: (parents collect: [:aParent | aParent oldestParent]).
	
	^parentsCollection ! !
!Portfolio methodsFor: 'private' stamp: 'G.L.S. 5/24/2021 15:41:33' prior: 50872893!
oldestParent
	|noParentsCollection parentsCollection|
	
	noParentsCollection := OrderedCollection new.
	
	(parents isEmpty) ifTrue:[
		noParentsCollection add:self.
		^noParentsCollection].
	
	parentsCollection := OrderedCollection new.
	
	(parents collect: [:aParent | aParent oldestParent] )do: [
		:aCollection |
		parentsCollection addAll: aCollection.
		].
	
	^parentsCollection ! !

portfolio4 addPortfolioElement: portfolio5.!

portfolio := Portfolio createNew.
portfolio2 := Portfolio createNew.
portfolio3 := Portfolio createNew.
portfolio4 := Portfolio createNew.
portfolio5 := Portfolio createNew.!

portfolio addPortfolioElement: portfolio4.
portfolio2 addPortfolioElement: portfolio4.
portfolio3 addPortfolioElement: portfolio4.
portfolio4 addPortfolioElement: portfolio5.
!

portfolio5 oldestParent .!

(portfolio5 oldestParent) includes: portfolio3.!

(portfolio5 oldestParent) includes: portfolio2.!

(portfolio5 oldestParent) includes: portfolio. !

(portfolio5 oldestParent) includes: portfolio4. !

portfolio5 oldestParent!

portfolio5 oldestParent!

portfolio := Portfolio createNew.
portfolio2 := Portfolio createNew.
portfolio3 := Portfolio createNew.
portfolio4 := Portfolio createNew.
portfolio5 := Portfolio createNew.!

portfolio addPortfolioElement: portfolio4.
portfolio2 addPortfolioElement: portfolio4.
portfolio3 addPortfolioElement: portfolio5.
portfolio4 addPortfolioElement: portfolio5.!

(portfolio5 oldestParent)!
!Portfolio methodsFor: 'private' stamp: 'G.L.S. 5/24/2021 15:44:36' prior: 50872907!
oldestParent
	|noParentsCollection parentsCollection|
	
	noParentsCollection := OrderedCollection new.
	
	(parents isEmpty) ifTrue:[
		noParentsCollection add:self.
		^noParentsCollection].
	
	parentsCollection := OrderedCollection new.
	
	(parents collect: [:aParent | aParent oldestParent] )do: [
		:aCollection |
		parentsCollection addAll: aCollection.
		].
	
	^parentsCollection.! !

!testRun: #PortfolioTest #test15 stamp: 'G.L.S. 5/24/2021 15:44:45'!
PASSED!

portfolio := Portfolio createNew.
portfolio2 := Portfolio createNew.
portfolio3 := Portfolio createNew.
portfolio4 := Portfolio createNew.
portfolio5 := Portfolio createNew.!

portfolio addPortfolioElement: portfolio4.
portfolio2 addPortfolioElement: portfolio4.
portfolio3 addPortfolioElement: portfolio2.
portfolio4 addPortfolioElement: portfolio5.
!

(portfolio5 oldestParent)!

(portfolio5 oldestParent) includes: portfolio3 !

(portfolio5 oldestParent) includes: portfolio2!

(portfolio5 oldestParent) includes: portfolio!
!Behavior method!
createNew
	^ [
	([
	(Portfolio
		cover: (14 to: 22)
		declaredAt: (14 to: 22)) new ] valueCoveringAll:
		{24 to: 26}) initialize ] valueCoveringAll:
		{28 to: 37}.! !
!Behavior method!
initialize
	(portfolioElements _ [
	(OrderedCollection
		cover: (34 to: 50)
		declaredAt: (34 to: 50)) new ] valueCoveringAll:
		{52 to: 54})
		cover: (13 to: 29)
		declaredAt: (13 to: 29).
	(parents _ [
	(OrderedCollection
		cover: (69 to: 85)
		declaredAt: (34 to: 50)) new ] valueCoveringAll:
		{87 to: 89})
		cover: (58 to: 64)
		declaredAt: (58 to: 64).! !
!Behavior method!
balance
	^ [
	(portfolioElements
		cover: (11 to: 27)
		declaredAt: (11 to: 27))
		sum: [ :aPortfolioElement |
			[
			(aPortfolioElement
				cover: (56 to: 72)
				declaredAt: (36 to: 52)) balance ] valueCoveringAll:
				{74 to: 80} ]
		ifEmpty: [
			0 coverAll:
				{93 to: 93} ]] valueCoveringAll:
		{29 to: 32. 83 to: 90}.! !

!testRun: #PortfolioTest #test01BalanceOfEmptyPortfolioEquals0 stamp: 'G.L.S. 5/24/2021 15:53:09'!
PASSED!
!Behavior method!
initialize
	(transactions _ [
	(OrderedCollection
		cover: (30 to: 46)
		declaredAt: (30 to: 46)) new ] valueCoveringAll:
		{48 to: 50})
		cover: (14 to: 25)
		declaredAt: (14 to: 25).! !
!Behavior method!
register: aValue on: account
	| transaction |
	(transaction _ [
	(self coverAll:
		{66 to: 69}) for:
		(aValue
			cover: (76 to: 81)
			declaredAt: (11 to: 16)) ] valueCoveringAll:
		{71 to: 74})
		cover: (51 to: 61)
		declaredAt: (34 to: 44).
	[
	(account
		cover: (85 to: 91)
		declaredAt: (22 to: 28)) register:
		(transaction
			cover: (103 to: 113)
			declaredAt: (34 to: 44)) ] valueCoveringAll:
		{93 to: 101}.
	^ transaction
		cover: (122 to: 132)
		declaredAt: (34 to: 44).! !
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
register: aTransaction
	[
	(transactions
		cover: (26 to: 37)
		declaredAt: (26 to: 37)) add:
		(aTransaction
			cover: (44 to: 55)
			declaredAt: (11 to: 22)) ] valueCoveringAll:
		{39 to: 42}.! !
!Behavior method!
addPortfolioElement: aNewPortfolioElement
	| roots |
	(roots _ [
	(self coverAll:
		{64 to: 67}) oldestParent ] valueCoveringAll:
		{69 to: 80})
		cover: (55 to: 59)
		declaredAt: (45 to: 49).
	[
	([
	(roots
		cover: (87 to: 91)
		declaredAt: (45 to: 49)) includes:
		(aNewPortfolioElement
			cover: (103 to: 122)
			declaredAt: (22 to: 41)) ] valueCoveringAll:
		{93 to: 101}) ifTrue: [
		[
		(self coverAll:
			{134 to: 137}) error:
			([
			([
			(self coverAll:
				{146 to: 149}) class ] valueCoveringAll:
				{151 to: 155}) PortfolioAlreadyExistsError ] valueCoveringAll:
				{157 to: 183}) ] valueCoveringAll:
			{139 to: 144} ]] valueCoveringAll:
		{125 to: 131}.
	[
	(roots
		cover: (188 to: 192)
		declaredAt: (45 to: 49)) do: [ :root |
		[
		([
		([
		(root
			cover: (208 to: 211)
			declaredAt: (200 to: 203)) allElements ] valueCoveringAll:
			{213 to: 223}) anySatisfy: [ :aPortfolioElement |
			[
			(aNewPortfolioElement
				cover: (259 to: 278)
				declaredAt: (22 to: 41)) hasOrIs:
				(aPortfolioElement
					cover: (289 to: 305)
					declaredAt: (239 to: 255)) ] valueCoveringAll:
				{280 to: 287} ]] valueCoveringAll:
			{225 to: 235}) ifTrue: [
			[
			(self coverAll:
				{318 to: 321}) error:
				([
				([
				(self coverAll:
					{330 to: 333}) class ] valueCoveringAll:
					{335 to: 339}) AccountAlreadyExistsError ] valueCoveringAll:
					{341 to: 365}) ] valueCoveringAll:
				{323 to: 328} ]] valueCoveringAll:
			{309 to: 315} ]] valueCoveringAll:
		{194 to: 196}.
	[
	(aNewPortfolioElement
		cover: (374 to: 393)
		declaredAt: (22 to: 41)) addTo:
		(self coverAll:
			{402 to: 405}) ] valueCoveringAll:
		{395 to: 400}.! !
!Behavior method!
oldestParent
	| noParentsCollection parentsCollection |
	(noParentsCollection _ [
	(OrderedCollection
		cover: (81 to: 97)
		declaredAt: (81 to: 97)) new ] valueCoveringAll:
		{99 to: 101})
		cover: (58 to: 76)
		declaredAt: (16 to: 34).
	[
	([
	(parents
		cover: (108 to: 114)
		declaredAt: (108 to: 114)) isEmpty ] valueCoveringAll:
		{116 to: 122}) ifTrue: [
		[
		(noParentsCollection
			cover: (136 to: 154)
			declaredAt: (16 to: 34)) add:
			(self coverAll:
				{160 to: 163}) ] valueCoveringAll:
			{156 to: 159}.
		^ noParentsCollection
			cover: (169 to: 187)
			declaredAt: (16 to: 34) ]] valueCoveringAll:
		{125 to: 131}.
	(parentsCollection _ [
	(OrderedCollection
		cover: (215 to: 231)
		declaredAt: (81 to: 97)) new ] valueCoveringAll:
		{233 to: 235})
		cover: (194 to: 210)
		declaredAt: (36 to: 52).
	[
	([
	(parents
		cover: (242 to: 248)
		declaredAt: (108 to: 114)) collect: [ :aParent |
		[
		(aParent
			cover: (271 to: 277)
			declaredAt: (261 to: 267)) oldestParent ] valueCoveringAll:
			{279 to: 290} ]] valueCoveringAll:
		{250 to: 257}) do: [ :aCollection |
		[
		(parentsCollection
			cover: (319 to: 335)
			declaredAt: (36 to: 52)) addAll:
			(aCollection
				cover: (345 to: 355)
				declaredAt: (303 to: 313)) ] valueCoveringAll:
			{337 to: 343} ]] valueCoveringAll:
		{294 to: 296}.
	^ parentsCollection
		cover: (367 to: 383)
		declaredAt: (36 to: 52).! !
!Behavior method!
allElements
	| totalAccounts |
	(totalAccounts _ [
	(OrderedCollection
		cover: (52 to: 68)
		declaredAt: (52 to: 68)) new ] valueCoveringAll:
		{70 to: 72})
		cover: (35 to: 47)
		declaredAt: (17 to: 29).
	[
	(totalAccounts
		cover: (76 to: 88)
		declaredAt: (17 to: 29)) addAll:
		(portfolioElements
			cover: (98 to: 114)
			declaredAt: (98 to: 114)) ] valueCoveringAll:
		{90 to: 96}.
	[
	([
	(self coverAll:
		{120 to: 123}) portfolios ] valueCoveringAll:
		{125 to: 134}) do: [ :aPortfolio |
		[
		(totalAccounts
			cover: (155 to: 167)
			declaredAt: (17 to: 29)) addAll:
			([
			(aPortfolio
				cover: (177 to: 186)
				declaredAt: (142 to: 151)) allElements ] valueCoveringAll:
				{188 to: 198}) ] valueCoveringAll:
			{169 to: 175} ]] valueCoveringAll:
		{136 to: 138}.
	^ totalAccounts
		cover: (206 to: 218)
		declaredAt: (17 to: 29).! !
!Behavior method!
portfolios
	^ [
	(portfolioElements
		cover: (15 to: 31)
		declaredAt: (15 to: 31)) select: [ :aPortfolioElement |
		[
		([
		(aPortfolioElement
			cover: (62 to: 78)
			declaredAt: (42 to: 58)) class ] valueCoveringAll:
			{80 to: 84}) =
			(Portfolio
				cover: (88 to: 96)
				declaredAt: (88 to: 96)) ] valueCoveringAll:
			{86 to: 86} ]] valueCoveringAll:
		{33 to: 39}.! !
!Behavior method!
addTo: aPortfolio
	[
	(aPortfolio
		cover: (20 to: 29)
		declaredAt: (8 to: 17)) addAccount:
		(self coverAll:
			{43 to: 46}) ] valueCoveringAll:
		{31 to: 41}.! !
!Behavior method!
addAccount: anAccount
	self.
	[
	(portfolioElements
		cover: (25 to: 41)
		declaredAt: (25 to: 41)) add:
		(anAccount
			cover: (48 to: 56)
			declaredAt: (13 to: 21)) ] valueCoveringAll:
		{43 to: 46}.! !
!Behavior method!
balance
	| total |
	(total _ 0 coverAll:
		{32 to: 32})
		cover: (23 to: 27)
		declaredAt: (13 to: 17).
	[
	(transactions
		cover: (38 to: 49)
		declaredAt: (38 to: 49)) do: [ :aTransaction |
		(total _ [
		(aTransaction
			cover: (81 to: 92)
			declaredAt: (57 to: 68)) performOperationOnBalance:
			(total
				cover: (72 to: 76)
				declaredAt: (13 to: 17)) ] valueCoveringAll:
			{94 to: 119})
			cover: (121 to: 125)
			declaredAt: (13 to: 17) ]] valueCoveringAll:
		{51 to: 53}.
	^ total
		cover: (133 to: 137)
		declaredAt: (13 to: 17).! !
!Behavior method!
performOperationOnBalance: aTotal
	^ [
	(aTotal
		cover: (39 to: 44)
		declaredAt: (28 to: 33)) +
		(value
			cover: (48 to: 52)
			declaredAt: (48 to: 52)) ] valueCoveringAll:
		{46 to: 46}.! !

!testRun: #PortfolioTest #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance stamp: 'G.L.S. 5/24/2021 15:53:10'!
PASSED!
!Behavior method!
for: aValue
	^ [
	([
	(self coverAll:
		{17 to: 20}) new ] valueCoveringAll:
		{22 to: 24}) initializeFor:
		(aValue
			cover: (41 to: 46)
			declaredAt: (6 to: 11)) ] valueCoveringAll:
		{26 to: 39}.! !
!Behavior method!
initializeFor: aValue
	(value _ aValue
		cover: (34 to: 39)
		declaredAt: (16 to: 21))
		cover: (25 to: 29)
		declaredAt: (25 to: 29).! !
!Behavior method!
hasOrIs: aReceptiveAccount
	^ [
	(self coverAll:
		{30 to: 33}) =
		(aReceptiveAccount
			cover: (37 to: 53)
			declaredAt: (10 to: 26)) ] valueCoveringAll:
		{35 to: 35}.! !
!Behavior method!
performOperationOnBalance: aTotal
	^ [
	(aTotal
		cover: (39 to: 44)
		declaredAt: (28 to: 33)) -
		(value
			cover: (48 to: 52)
			declaredAt: (48 to: 52)) ] valueCoveringAll:
		{46 to: 46}.! !

!testRun: #PortfolioTest #test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts stamp: 'G.L.S. 5/24/2021 15:53:10'!
PASSED!
!Behavior method!
transactions
	| totalTransactions |
	(totalTransactions _ [
	(OrderedCollection
		cover: (59 to: 75)
		declaredAt: (59 to: 75)) new ] valueCoveringAll:
		{77 to: 79})
		cover: (38 to: 54)
		declaredAt: (16 to: 32).
	[
	(portfolioElements
		cover: (85 to: 101)
		declaredAt: (85 to: 101)) do: [ :anAccount |
		[
		(totalTransactions
			cover: (121 to: 137)
			declaredAt: (16 to: 32)) addAll:
			([
			(anAccount
				cover: (147 to: 155)
				declaredAt: (109 to: 117)) transactions ] valueCoveringAll:
				{157 to: 168}) ] valueCoveringAll:
			{139 to: 145} ]] valueCoveringAll:
		{103 to: 105}.
	^ totalTransactions
		cover: (176 to: 192)
		declaredAt: (16 to: 32).! !

!testRun: #PortfolioTest #test04EmptyPortfolioTransactionsAreAnEmptyCollection stamp: 'G.L.S. 5/24/2021 15:53:10'!
PASSED!
!Behavior method!
transactions
	^ [
	(transactions
		cover: (19 to: 30)
		declaredAt: (19 to: 30)) copy ] valueCoveringAll:
		{32 to: 35}.! !

!testRun: #PortfolioTest #test05TransactionsOfAPortfolioWithOneAccountEqualsTheAccountTransactions stamp: 'G.L.S. 5/24/2021 15:53:10'!
PASSED!
!Behavior method!
hasRegistered: aTransaction
	^ [
	(portfolioElements
		cover: (32 to: 48)
		declaredAt: (32 to: 48)) anySatisfy: [ :aPortfolioElement |
		[
		(aPortfolioElement
			cover: (84 to: 100)
			declaredAt: (64 to: 80)) hasRegistered:
			(aTransaction
				cover: (117 to: 128)
				declaredAt: (16 to: 27)) ] valueCoveringAll:
			{102 to: 115} ]] valueCoveringAll:
		{50 to: 60}.! !
!Behavior method!
hasRegistered: aTransaction
	^ [
	(transactions
		cover: (33 to: 44)
		declaredAt: (33 to: 44)) includes:
		(aTransaction
			cover: (56 to: 67)
			declaredAt: (16 to: 27)) ] valueCoveringAll:
		{46 to: 54}.! !

!testRun: #PortfolioTest #test06hasRegisteredOnAPortfolioWithAnAccountOnAnExistingTransactionReturnsTrue stamp: 'G.L.S. 5/24/2021 15:53:10'!
PASSED!

!testRun: #PortfolioTest #test07hasRegisteredDoesNotReturnTrueOnATransactionOfAnAccountNotInsideThePortfolio stamp: 'G.L.S. 5/24/2021 15:53:10'!
PASSED!
!Behavior method!
AccountAlreadyExistsError
	^ 'La cuenta ya existe!!!!!!' coverAll:
		{29 to: 52}.! !

!testRun: #PortfolioTest #test08PortfolioCantHaveMultiplesOfTheSameAccount stamp: 'G.L.S. 5/24/2021 15:53:10'!
PASSED!
!Behavior method!
hasOrIs: aNewPortfolioElement
	[
	([
	(self coverAll:
		{35 to: 38}) =
		(aNewPortfolioElement
			cover: (42 to: 61)
			declaredAt: (10 to: 29)) ] valueCoveringAll:
		{40 to: 40}) ifTrue: [
		[
		(self coverAll:
			{73 to: 76}) error:
			([
			([
			(self coverAll:
				{85 to: 88}) class ] valueCoveringAll:
				{90 to: 94}) PortfolioAlreadyExistsError ] valueCoveringAll:
				{96 to: 122}) ] valueCoveringAll:
			{78 to: 83} ]] valueCoveringAll:
		{64 to: 70}.
	^ [
	(portfolioElements
		cover: (130 to: 146)
		declaredAt: (130 to: 146)) anySatisfy: [ :aPortfolioElement |
		[
		(aPortfolioElement
			cover: (182 to: 198)
			declaredAt: (162 to: 178)) hasOrIs:
			(aNewPortfolioElement
				cover: (209 to: 228)
				declaredAt: (10 to: 29)) ] valueCoveringAll:
			{200 to: 207} ]] valueCoveringAll:
		{148 to: 158}.! !

!testRun: #PortfolioTest #test09PortfolioCantHaveMultipleOfTheSameAccountByAddingAnotherPortfolioWithTheAccounts stamp: 'G.L.S. 5/24/2021 15:53:10'!
PASSED!
!Behavior method!
addTo: aPortfolio
	self coverAll:
		{46 to: 49}.
	[
	(aPortfolio
		cover: (21 to: 30)
		declaredAt: (8 to: 17)) addPortfolio: self ] valueCoveringAll:
		{32 to: 44}.! !
!Behavior method!
addPortfolio: aPortfolio
	self coverAll:
		{51 to: 54}.
	[
	(aPortfolio
		cover: (29 to: 38)
		declaredAt: (16 to: 25)) addParent: self ] valueCoveringAll:
		{40 to: 49}.
	[
	(portfolioElements
		cover: (58 to: 74)
		declaredAt: (58 to: 74)) add:
		(aPortfolio
			cover: (81 to: 90)
			declaredAt: (16 to: 25)) ] valueCoveringAll:
		{76 to: 79}.! !
!Behavior method!
addParent: aPortfolio
	[
	(parents
		cover: (24 to: 30)
		declaredAt: (24 to: 30)) add:
		(aPortfolio
			cover: (37 to: 46)
			declaredAt: (12 to: 21)) ] valueCoveringAll:
		{32 to: 35}.! !

!testRun: #PortfolioTest #test10PortfolioCanHaveAnotherPortfolioWithDifferentAccounts stamp: 'G.L.S. 5/24/2021 15:53:10'!
PASSED!
!Behavior method!
PortfolioAlreadyExistsError
	^ 'Ya existe este portfolio' coverAll:
		{31 to: 56}.! !

!testRun: #PortfolioTest #test11PortfolioCannotContainItself stamp: 'G.L.S. 5/24/2021 15:53:10'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCannotContainTheSamePortfolioInMultipleLevels stamp: 'G.L.S. 5/24/2021 15:53:10'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCannotHaveAPortfolioContainedInAHigherLevel stamp: 'G.L.S. 5/24/2021 15:53:10'!
PASSED!

!testRun: #PortfolioTest #test14PortfoliosCannotContainEachOther stamp: 'G.L.S. 5/24/2021 15:53:10'!
PASSED!

!testRun: #PortfolioTest #test15 stamp: 'G.L.S. 5/24/2021 15:53:10'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 16:01:29' prior: 50872527!
test15

	|portfolio portfolio2 portfolio3 portfolio4 account|
	
	portfolio  := Portfolio new.
	portfolio2  := Portfolio new.
	portfolio3  := Portfolio new.
	portfolio4  := Portfolio new	.
	
	account := ReceptiveAccount  new.
	
	self should: [
			portfolio3 addPortfolioElement: portfolio4.
	
			portfolio addPortfolioElement: portfolio3.
			portfolio2 addPortfolioElement: portfolio3.
	
			portfolio addPortfolioElement: account.
			portfolio3 addPortfolioElement: account.
			]
		raise:  Error
		withExceptionDo: [:anError |
			self assert: anError messageText  = Portfolio AccountAlreadyExistsError.
			].
	 
! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 16:02:51'!
test15PortfolioCannotContainACopyOfTheSamePortfolioInAHigherLevelWithMultipleParents

	|portfolio portfolio2 portfolio3 portfolio4 account|
	
	portfolio  := Portfolio new.
	portfolio2  := Portfolio new.
	portfolio3  := Portfolio new.
	portfolio4  := Portfolio new	.
	
	account := ReceptiveAccount  new.
	
	self should: [
			portfolio3 addPortfolioElement: portfolio4.
	
			portfolio addPortfolioElement: portfolio3.
			portfolio2 addPortfolioElement: portfolio3.
	
			portfolio addPortfolioElement: account.
			portfolio3 addPortfolioElement: account.
			]
		raise:  Error
		withExceptionDo: [:anError |
			self assert: anError messageText  = Portfolio AccountAlreadyExistsError.
			].
	 
! !

!methodRemoval: PortfolioTest #test15 stamp: 'G.L.S. 5/24/2021 16:02:51'!
test15

	|portfolio portfolio2 portfolio3 portfolio4 account|
	
	portfolio  := Portfolio new.
	portfolio2  := Portfolio new.
	portfolio3  := Portfolio new.
	portfolio4  := Portfolio new	.
	
	account := ReceptiveAccount  new.
	
	self should: [
			portfolio3 addPortfolioElement: portfolio4.
	
			portfolio addPortfolioElement: portfolio3.
			portfolio2 addPortfolioElement: portfolio3.
	
			portfolio addPortfolioElement: account.
			portfolio3 addPortfolioElement: account.
			]
		raise:  Error
		withExceptionDo: [:anError |
			self assert: anError messageText  = Portfolio AccountAlreadyExistsError.
			].
	 
!

!testRun: #PortfolioTest #test01BalanceOfEmptyPortfolioEquals0 stamp: 'G.L.S. 5/24/2021 16:08:15'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance stamp: 'G.L.S. 5/24/2021 16:08:15'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts stamp: 'G.L.S. 5/24/2021 16:08:15'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioTransactionsAreAnEmptyCollection stamp: 'G.L.S. 5/24/2021 16:08:15'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfAPortfolioWithOneAccountEqualsTheAccountTransactions stamp: 'G.L.S. 5/24/2021 16:08:15'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOnAPortfolioWithAnAccountOnAnExistingTransactionReturnsTrue stamp: 'G.L.S. 5/24/2021 16:08:15'!
PASSED!

!testRun: #PortfolioTest #test07hasRegisteredDoesNotReturnTrueOnATransactionOfAnAccountNotInsideThePortfolio stamp: 'G.L.S. 5/24/2021 16:08:15'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCantHaveMultiplesOfTheSameAccount stamp: 'G.L.S. 5/24/2021 16:08:15'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantHaveMultipleOfTheSameAccountByAddingAnotherPortfolioWithTheAccounts stamp: 'G.L.S. 5/24/2021 16:08:15'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanHaveAnotherPortfolioWithDifferentAccounts stamp: 'G.L.S. 5/24/2021 16:08:15'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCannotContainItself stamp: 'G.L.S. 5/24/2021 16:08:15'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCannotContainTheSamePortfolioInMultipleLevels stamp: 'G.L.S. 5/24/2021 16:08:15'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCannotHaveAPortfolioContainedInAHigherLevel stamp: 'G.L.S. 5/24/2021 16:08:15'!
PASSED!

!testRun: #PortfolioTest #test14PortfoliosCannotContainEachOther stamp: 'G.L.S. 5/24/2021 16:08:15'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCannotContainACopyOfTheSamePortfolioInAHigherLevelWithMultipleParents stamp: 'G.L.S. 5/24/2021 16:08:15'!
PASSED!

portfolio := Portfolio createNew.
portfolio2 := Portfolio createNew.
portfolio3 := Portfolio createNew.
portfolio4 := Portfolio createNew.
portfolio5 := Portfolio createNew.!

portfolio addPortfolioElement: portfolio4.
portfolio2 addPortfolioElement: portfolio4.
portfolio3 addPortfolioElement: portfolio2.
portfolio4 addPortfolioElement: portfolio5.!

pepe := ReceptiveAccount  new.
Withdraw register: 100 on: pepe.!

portfolio5 addPortfolioElement: pepe.!

portfolio5 balance.!

portfolio4 balance.!

portfolio2 balance.!

portfolio balance.!

portfolio3 balance.!

portfolio3 transactions.!

{23. 45. 56.}!

{150 = 12} !

[{150 = 12}] value.!

{valor}!
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 16:40:30' prior: 50868102!
test09PortfolioCantHaveMultipleOfTheSameAccountByAddingAnotherPortfolioWithTheAccounts

	|portfolio portfolio2 account|
	
	portfolio := Portfolio createNew.
	portfolio2 := Portfolio createNew.
	
	account := ReceptiveAccount new.
	
	self should: [
			portfolio2 addPortfolioElement: account.
			portfolio addPortfolioElement: account.
			portfolio addPortfolioElement: portfolio2.
			] 
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText  = Portfolio AccountAlreadyExistsError.
			].! !

!testRun: #PortfolioTest #test09PortfolioCantHaveMultipleOfTheSameAccountByAddingAnotherPortfolioWithTheAccounts stamp: 'G.L.S. 5/24/2021 16:40:31'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfEmptyPortfolioEquals0 stamp: 'G.L.S. 5/24/2021 16:40:31'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance stamp: 'G.L.S. 5/24/2021 16:40:31'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts stamp: 'G.L.S. 5/24/2021 16:40:31'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioTransactionsAreAnEmptyCollection stamp: 'G.L.S. 5/24/2021 16:40:31'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfAPortfolioWithOneAccountEqualsTheAccountTransactions stamp: 'G.L.S. 5/24/2021 16:40:31'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOnAPortfolioWithAnAccountOnAnExistingTransactionReturnsTrue stamp: 'G.L.S. 5/24/2021 16:40:31'!
PASSED!

!testRun: #PortfolioTest #test07hasRegisteredDoesNotReturnTrueOnATransactionOfAnAccountNotInsideThePortfolio stamp: 'G.L.S. 5/24/2021 16:40:31'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCantHaveMultiplesOfTheSameAccount stamp: 'G.L.S. 5/24/2021 16:40:31'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantHaveMultipleOfTheSameAccountByAddingAnotherPortfolioWithTheAccounts stamp: 'G.L.S. 5/24/2021 16:40:31'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanHaveAnotherPortfolioWithDifferentAccounts stamp: 'G.L.S. 5/24/2021 16:40:31'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCannotContainItself stamp: 'G.L.S. 5/24/2021 16:40:31'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCannotContainTheSamePortfolioInMultipleLevels stamp: 'G.L.S. 5/24/2021 16:40:31'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCannotHaveAPortfolioContainedInAHigherLevel stamp: 'G.L.S. 5/24/2021 16:40:31'!
PASSED!

!testRun: #PortfolioTest #test14PortfoliosCannotContainEachOther stamp: 'G.L.S. 5/24/2021 16:40:31'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCannotContainACopyOfTheSamePortfolioInAHigherLevelWithMultipleParents stamp: 'G.L.S. 5/24/2021 16:40:31'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 16:41:51' prior: 50868174!
test10PortfolioCanHaveAnotherPortfolioWithDifferentAccounts

	|portfolio portfolio2 account account2 errorHappened|
	
	errorHappened := #No.
	
	portfolio := Portfolio createNew.
	portfolio2 := Portfolio createNew.
	
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	[	portfolio2 addPortfolioElement: account.
		portfolio addPortfolioElement: account2.
		portfolio addPortfolioElement: portfolio2.]
		on: Error
		do: [:anError|
			errorHappened := #Si.
			].
	
	self assert: #No equals: errorHappened.
! !

!testRun: #PortfolioTest #test10PortfolioCanHaveAnotherPortfolioWithDifferentAccounts stamp: 'G.L.S. 5/24/2021 16:41:57'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfEmptyPortfolioEquals0 stamp: 'G.L.S. 5/24/2021 16:41:57'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance stamp: 'G.L.S. 5/24/2021 16:41:57'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts stamp: 'G.L.S. 5/24/2021 16:41:57'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioTransactionsAreAnEmptyCollection stamp: 'G.L.S. 5/24/2021 16:41:57'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfAPortfolioWithOneAccountEqualsTheAccountTransactions stamp: 'G.L.S. 5/24/2021 16:41:57'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOnAPortfolioWithAnAccountOnAnExistingTransactionReturnsTrue stamp: 'G.L.S. 5/24/2021 16:41:57'!
PASSED!

!testRun: #PortfolioTest #test07hasRegisteredDoesNotReturnTrueOnATransactionOfAnAccountNotInsideThePortfolio stamp: 'G.L.S. 5/24/2021 16:41:57'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCantHaveMultiplesOfTheSameAccount stamp: 'G.L.S. 5/24/2021 16:41:57'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantHaveMultipleOfTheSameAccountByAddingAnotherPortfolioWithTheAccounts stamp: 'G.L.S. 5/24/2021 16:41:57'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanHaveAnotherPortfolioWithDifferentAccounts stamp: 'G.L.S. 5/24/2021 16:41:57'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCannotContainItself stamp: 'G.L.S. 5/24/2021 16:41:57'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCannotContainTheSamePortfolioInMultipleLevels stamp: 'G.L.S. 5/24/2021 16:41:57'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCannotHaveAPortfolioContainedInAHigherLevel stamp: 'G.L.S. 5/24/2021 16:41:57'!
PASSED!

!testRun: #PortfolioTest #test14PortfoliosCannotContainEachOther stamp: 'G.L.S. 5/24/2021 16:41:57'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCannotContainACopyOfTheSamePortfolioInAHigherLevelWithMultipleParents stamp: 'G.L.S. 5/24/2021 16:41:57'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 16:47:14' prior: 50873452!
test15PortfolioCannotContainACopyOfTheSamePortfolioInAHigherLevelWithMultipleParents

	|portfolio portfolio2 portfolio3 portfolio4 account|
	
	portfolio  := Portfolio new.
	portfolio2  := Portfolio new.
	portfolio3  := Portfolio new.
	portfolio4  := Portfolio new	.
	
	account := ReceptiveAccount  new.
	
	self should: [
			portfolio3 addPortfolioElement: portfolio4.
			portfolio addPortfolioElement: portfolio3.
			portfolio2 addPortfolioElement: portfolio3.
			portfolio addPortfolioElement: account.
			portfolio3 addPortfolioElement: account.
			]
		raise:  Error
		withExceptionDo: [:anError |
			self assert: anError messageText  = Portfolio AccountAlreadyExistsError.
			].
	 
! !
!PortfolioTest methodsFor: 'setUp/tearDown' stamp: 'G.L.S. 5/24/2021 16:49:48' overrides: 16927572!
setUp! !

TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio portfolio2 portfolio3 portfolio4 account account2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio1 portfolio2 portfolio3 portfolio4 account account2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio1 portfolio2 portfolio3 portfolio4 account1 account2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 16:53:27' prior: 50865724!
test01BalanceOfEmptyPortfolioEquals0

	|portfolio|
	
	portfolio := Portfolio createNew.
	
	self assert: 0 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 16:53:46' prior: 50873802!
test01BalanceOfEmptyPortfolioEquals0

	|asd|
	
	asd := Portfolio createNew.
	
	self assert: 0 equals: asd balance.! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 16:54:01' prior: 50873810!
test01BalanceOfEmptyPortfolioEquals0

	|portfolio|
	
	portfolio := Portfolio createNew.
	
	self assert: 0 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 16:54:18' prior: 50873817!
test01BalanceOfEmptyPortfolioEquals0

	"|portfolio|
	
	portfolio := Portfolio createNew.
	
	self assert: 0 equals: portfolio balance."! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 16:54:23' prior: 50865712!
test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance

	"|portfolio account|
	
	portfolio := Portfolio createNew.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	portfolio addPortfolioElement: account.
	
	self assert: 100 equals: portfolio balance."! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 16:54:29' prior: 50865695!
test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts

	"|portfolio account1 account2|
	
	portfolio := Portfolio createNew.
	
	account1 := ReceptiveAccount  new.
	Deposit register: 200 on: account1.
	
	account2 := ReceptiveAccount  new.
	Withdraw register: 50 on: account2.
	
	portfolio addPortfolioElement: account1.
	portfolio addPortfolioElement: account2.
	
	self assert: 150 equals: portfolio balance."! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 16:54:33' prior: 50865686!
test04EmptyPortfolioTransactionsAreAnEmptyCollection

	"|portfolio|
	
	portfolio := Portfolio createNew.
	
	self assert: OrderedCollection new equals: portfolio transactions."! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 16:54:39' prior: 50865673!
test05TransactionsOfAPortfolioWithOneAccountEqualsTheAccountTransactions

	"|portfolio account|
	
	portfolio := Portfolio createNew.
	
	account := ReceptiveAccount  new.
	Deposit register: 100 on: account.
	
	portfolio addPortfolioElement: account.
	
	self assert: account transactions equals: portfolio transactions."! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 16:54:43' prior: 50865659!
test06hasRegisteredOnAPortfolioWithAnAccountOnAnExistingTransactionReturnsTrue

	"|portfolio account deposit|
	
	portfolio := Portfolio createNew.
	
	account := ReceptiveAccount  new.
	deposit := Deposit register: 100 on: account.
	
	portfolio addPortfolioElement: account.
	
	self assert: (portfolio hasRegistered: deposit)."! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 16:54:48' prior: 50865566!
test07hasRegisteredDoesNotReturnTrueOnATransactionOfAnAccountNotInsideThePortfolio

	"|portfolio account account2 deposit|
	
	portfolio := Portfolio createNew.
	
	account := ReceptiveAccount  new.
	account2 := ReceptiveAccount  new.
	deposit := Deposit register: 100 on: account2.
	
	portfolio addPortfolioElement: account.
	
	self deny: (portfolio hasRegistered: deposit)."! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 16:54:53' prior: 50868074!
test08PortfolioCantHaveMultiplesOfTheSameAccount

	"|portfolio account|
	
	portfolio := Portfolio createNew.
	
	account := ReceptiveAccount  new.
	
	self should: [
			portfolio addPortfolioElement: account.
			portfolio addPortfolioElement: account.
			] 
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText  = Portfolio AccountAlreadyExistsError.
			]."! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 16:54:58' prior: 50873582!
test09PortfolioCantHaveMultipleOfTheSameAccountByAddingAnotherPortfolioWithTheAccounts

	"|portfolio portfolio2 account|
	
	portfolio := Portfolio createNew.
	portfolio2 := Portfolio createNew.
	
	account := ReceptiveAccount new.
	
	self should: [
			portfolio2 addPortfolioElement: account.
			portfolio addPortfolioElement: account.
			portfolio addPortfolioElement: portfolio2.
			] 
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText  = Portfolio AccountAlreadyExistsError.
			]."! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 16:55:04' prior: 50873669!
test10PortfolioCanHaveAnotherPortfolioWithDifferentAccounts

	"|portfolio portfolio2 account account2 errorHappened|
	
	errorHappened := #No.
	
	portfolio := Portfolio createNew.
	portfolio2 := Portfolio createNew.
	
	account := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	
	[	portfolio2 addPortfolioElement: account.
		portfolio addPortfolioElement: account2.
		portfolio addPortfolioElement: portfolio2.]
		on: Error
		do: [:anError|
			errorHappened := #Si.
			].
	
	self assert: #No equals: errorHappened."
! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 16:55:10' prior: 50871300!
test11PortfolioCannotContainItself

	"|portfolio|
	
	portfolio  := Portfolio new.
	
	self should: [portfolio addPortfolioElement: portfolio] 
		raise:  Error
		withExceptionDo: [:anError |
			self assert: anError messageText  = Portfolio PortfolioAlreadyExistsError.
			]."
	 
! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 16:55:47' prior: 50871322!
test12PortfolioCannotContainTheSamePortfolioInMultipleLevels

	"|portfolio portfolio2 portfolio3|
	
	portfolio  := Portfolio new.
	portfolio2  := Portfolio new.	
	portfolio3  := Portfolio new.
	
	self should: [
			portfolio addPortfolioElement: portfolio2.
			portfolio2 addPortfolioElement: portfolio3.
			portfolio2 addPortfolioElement: portfolio3.
			] 
		raise:  Error
		withExceptionDo: [:anError |
			self assert: anError messageText  = Portfolio PortfolioAlreadyExistsError.
			]."
	 
! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 16:55:51' prior: 50871612!
test13PortfolioCannotHaveAPortfolioContainedInAHigherLevel

	"|portfolio portfolio2 portfolio3|
	
	portfolio  := Portfolio new.
	portfolio2  := Portfolio new.	
	portfolio3  := Portfolio new.
	
	self should: [
			portfolio addPortfolioElement: portfolio3.
			portfolio addPortfolioElement: portfolio2.
			portfolio2 addPortfolioElement: portfolio3.
			] 
		raise:  Error
		withExceptionDo: [:anError |
			self assert: anError messageText  = Portfolio PortfolioAlreadyExistsError.
			]."
	 
! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 16:55:55' prior: 50871650!
test14PortfoliosCannotContainEachOther

	"|portfolio portfolio2|
	
	portfolio  := Portfolio new.
	portfolio2  := Portfolio new.	
	
	self should: [
			portfolio addPortfolioElement: portfolio2.
			portfolio2 addPortfolioElement: portfolio.
			] 
		raise:  Error
		withExceptionDo: [:anError |
			self assert: anError messageText  = Portfolio PortfolioAlreadyExistsError.
			]."
	 
! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 16:56:00' prior: 50873755!
test15PortfolioCannotContainACopyOfTheSamePortfolioInAHigherLevelWithMultipleParents

	"|portfolio portfolio2 portfolio3 portfolio4 account|
	
	portfolio  := Portfolio new.
	portfolio2  := Portfolio new.
	portfolio3  := Portfolio new.
	portfolio4  := Portfolio new	.
	
	account := ReceptiveAccount  new.
	
	self should: [
			portfolio3 addPortfolioElement: portfolio4.
			portfolio addPortfolioElement: portfolio3.
			portfolio2 addPortfolioElement: portfolio3.
			portfolio addPortfolioElement: account.
			portfolio3 addPortfolioElement: account.
			]
		raise:  Error
		withExceptionDo: [:anError |
			self assert: anError messageText  = Portfolio AccountAlreadyExistsError.
			]."
	 
! !

TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio portfolio2 portfolio3 portfolio4 account account2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #PortfolioTest category: 'Portfolio-Ejercicio' stamp: 'G.L.S. 5/24/2021 16:56:23'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: 'portfolio portfolio2 portfolio3 portfolio4 account account2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!PortfolioTest methodsFor: 'setUp/tearDown' stamp: 'G.L.S. 5/24/2021 16:57:25' prior: 50873780 overrides: 16927572!
setUp

portfolio  _ Portfolio new.
portfolio2  _ Portfolio new.
portfolio3  _ Portfolio new.
portfolio4  _ Portfolio new.

account _ ReceptiveAccount new.
account2 _ ReceptiveAccount new.! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 16:57:37' prior: 50873825!
test01BalanceOfEmptyPortfolioEquals0

	self assert: 0 equals: portfolio balance.! !

!testRun: #PortfolioTest #test01BalanceOfEmptyPortfolioEquals0 stamp: 'G.L.S. 5/24/2021 16:57:40'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfEmptyPortfolioEquals0 stamp: 'G.L.S. 5/24/2021 16:57:40'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance stamp: 'G.L.S. 5/24/2021 16:57:40'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts stamp: 'G.L.S. 5/24/2021 16:57:40'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioTransactionsAreAnEmptyCollection stamp: 'G.L.S. 5/24/2021 16:57:40'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfAPortfolioWithOneAccountEqualsTheAccountTransactions stamp: 'G.L.S. 5/24/2021 16:57:40'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOnAPortfolioWithAnAccountOnAnExistingTransactionReturnsTrue stamp: 'G.L.S. 5/24/2021 16:57:40'!
PASSED!

!testRun: #PortfolioTest #test07hasRegisteredDoesNotReturnTrueOnATransactionOfAnAccountNotInsideThePortfolio stamp: 'G.L.S. 5/24/2021 16:57:40'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCantHaveMultiplesOfTheSameAccount stamp: 'G.L.S. 5/24/2021 16:57:40'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantHaveMultipleOfTheSameAccountByAddingAnotherPortfolioWithTheAccounts stamp: 'G.L.S. 5/24/2021 16:57:40'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanHaveAnotherPortfolioWithDifferentAccounts stamp: 'G.L.S. 5/24/2021 16:57:40'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCannotContainItself stamp: 'G.L.S. 5/24/2021 16:57:40'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCannotContainTheSamePortfolioInMultipleLevels stamp: 'G.L.S. 5/24/2021 16:57:40'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCannotHaveAPortfolioContainedInAHigherLevel stamp: 'G.L.S. 5/24/2021 16:57:40'!
PASSED!

!testRun: #PortfolioTest #test14PortfoliosCannotContainEachOther stamp: 'G.L.S. 5/24/2021 16:57:40'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCannotContainACopyOfTheSamePortfolioInAHigherLevelWithMultipleParents stamp: 'G.L.S. 5/24/2021 16:57:40'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 16:57:55' prior: 50873833!
test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance

	Deposit register: 100 on: account.
	
	portfolio addPortfolioElement: account.
	
	self assert: 100 equals: portfolio balance.! !

!testRun: #PortfolioTest #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance stamp: 'G.L.S. 5/24/2021 16:57:57'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfEmptyPortfolioEquals0 stamp: 'G.L.S. 5/24/2021 16:57:57'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance stamp: 'G.L.S. 5/24/2021 16:57:57'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts stamp: 'G.L.S. 5/24/2021 16:57:57'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioTransactionsAreAnEmptyCollection stamp: 'G.L.S. 5/24/2021 16:57:57'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfAPortfolioWithOneAccountEqualsTheAccountTransactions stamp: 'G.L.S. 5/24/2021 16:57:57'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOnAPortfolioWithAnAccountOnAnExistingTransactionReturnsTrue stamp: 'G.L.S. 5/24/2021 16:57:57'!
PASSED!

!testRun: #PortfolioTest #test07hasRegisteredDoesNotReturnTrueOnATransactionOfAnAccountNotInsideThePortfolio stamp: 'G.L.S. 5/24/2021 16:57:57'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCantHaveMultiplesOfTheSameAccount stamp: 'G.L.S. 5/24/2021 16:57:57'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantHaveMultipleOfTheSameAccountByAddingAnotherPortfolioWithTheAccounts stamp: 'G.L.S. 5/24/2021 16:57:57'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanHaveAnotherPortfolioWithDifferentAccounts stamp: 'G.L.S. 5/24/2021 16:57:57'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCannotContainItself stamp: 'G.L.S. 5/24/2021 16:57:57'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCannotContainTheSamePortfolioInMultipleLevels stamp: 'G.L.S. 5/24/2021 16:57:57'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCannotHaveAPortfolioContainedInAHigherLevel stamp: 'G.L.S. 5/24/2021 16:57:57'!
PASSED!

!testRun: #PortfolioTest #test14PortfoliosCannotContainEachOther stamp: 'G.L.S. 5/24/2021 16:57:57'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCannotContainACopyOfTheSamePortfolioInAHigherLevelWithMultipleParents stamp: 'G.L.S. 5/24/2021 16:57:57'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 16:58:16' prior: 50873845!
test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts

	Deposit register: 200 on: account.
	Withdraw register: 50 on: account2.
	
	portfolio addPortfolioElement: account.
	portfolio addPortfolioElement: account2.
	
	self assert: 150 equals: portfolio balance.! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 16:58:24' prior: 50873862!
test04EmptyPortfolioTransactionsAreAnEmptyCollection
	
	self assert: OrderedCollection new equals: portfolio transactions.! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 16:58:40' prior: 50873871!
test05TransactionsOfAPortfolioWithOneAccountEqualsTheAccountTransactions

	Deposit register: 100 on: account.
	portfolio addPortfolioElement: account.
	
	self assert: account transactions equals: portfolio transactions.! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 16:59:07' prior: 50873884!
test06hasRegisteredOnAPortfolioWithAnAccountOnAnExistingTransactionReturnsTrue

	|deposit|
	
	deposit := Deposit register: 100 on: account.
	portfolio addPortfolioElement: account.
	
	self assert: (portfolio hasRegistered: deposit).! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 16:59:21' prior: 50873898!
test07hasRegisteredDoesNotReturnTrueOnATransactionOfAnAccountNotInsideThePortfolio

	|deposit|

	deposit := Deposit register: 100 on: account2.
	
	portfolio addPortfolioElement: account.
	
	self deny: (portfolio hasRegistered: deposit).! !

!testRun: #PortfolioTest #test07hasRegisteredDoesNotReturnTrueOnATransactionOfAnAccountNotInsideThePortfolio stamp: 'G.L.S. 5/24/2021 16:59:21'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfEmptyPortfolioEquals0 stamp: 'G.L.S. 5/24/2021 16:59:21'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance stamp: 'G.L.S. 5/24/2021 16:59:21'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts stamp: 'G.L.S. 5/24/2021 16:59:21'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioTransactionsAreAnEmptyCollection stamp: 'G.L.S. 5/24/2021 16:59:21'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfAPortfolioWithOneAccountEqualsTheAccountTransactions stamp: 'G.L.S. 5/24/2021 16:59:21'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOnAPortfolioWithAnAccountOnAnExistingTransactionReturnsTrue stamp: 'G.L.S. 5/24/2021 16:59:21'!
PASSED!

!testRun: #PortfolioTest #test07hasRegisteredDoesNotReturnTrueOnATransactionOfAnAccountNotInsideThePortfolio stamp: 'G.L.S. 5/24/2021 16:59:21'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCantHaveMultiplesOfTheSameAccount stamp: 'G.L.S. 5/24/2021 16:59:21'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantHaveMultipleOfTheSameAccountByAddingAnotherPortfolioWithTheAccounts stamp: 'G.L.S. 5/24/2021 16:59:21'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanHaveAnotherPortfolioWithDifferentAccounts stamp: 'G.L.S. 5/24/2021 16:59:21'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCannotContainItself stamp: 'G.L.S. 5/24/2021 16:59:21'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCannotContainTheSamePortfolioInMultipleLevels stamp: 'G.L.S. 5/24/2021 16:59:21'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCannotHaveAPortfolioContainedInAHigherLevel stamp: 'G.L.S. 5/24/2021 16:59:21'!
PASSED!

!testRun: #PortfolioTest #test14PortfoliosCannotContainEachOther stamp: 'G.L.S. 5/24/2021 16:59:21'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCannotContainACopyOfTheSamePortfolioInAHigherLevelWithMultipleParents stamp: 'G.L.S. 5/24/2021 16:59:21'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 16:59:33' prior: 50873913!
test08PortfolioCantHaveMultiplesOfTheSameAccount
	
	self should: [
			portfolio addPortfolioElement: account.
			portfolio addPortfolioElement: account.
			] 
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText  = Portfolio AccountAlreadyExistsError.
			].! !

!testRun: #PortfolioTest #test08PortfolioCantHaveMultiplesOfTheSameAccount stamp: 'G.L.S. 5/24/2021 16:59:34'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfEmptyPortfolioEquals0 stamp: 'G.L.S. 5/24/2021 16:59:34'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance stamp: 'G.L.S. 5/24/2021 16:59:34'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts stamp: 'G.L.S. 5/24/2021 16:59:34'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioTransactionsAreAnEmptyCollection stamp: 'G.L.S. 5/24/2021 16:59:34'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfAPortfolioWithOneAccountEqualsTheAccountTransactions stamp: 'G.L.S. 5/24/2021 16:59:34'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOnAPortfolioWithAnAccountOnAnExistingTransactionReturnsTrue stamp: 'G.L.S. 5/24/2021 16:59:34'!
PASSED!

!testRun: #PortfolioTest #test07hasRegisteredDoesNotReturnTrueOnATransactionOfAnAccountNotInsideThePortfolio stamp: 'G.L.S. 5/24/2021 16:59:34'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCantHaveMultiplesOfTheSameAccount stamp: 'G.L.S. 5/24/2021 16:59:34'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantHaveMultipleOfTheSameAccountByAddingAnotherPortfolioWithTheAccounts stamp: 'G.L.S. 5/24/2021 16:59:34'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanHaveAnotherPortfolioWithDifferentAccounts stamp: 'G.L.S. 5/24/2021 16:59:34'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCannotContainItself stamp: 'G.L.S. 5/24/2021 16:59:34'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCannotContainTheSamePortfolioInMultipleLevels stamp: 'G.L.S. 5/24/2021 16:59:34'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCannotHaveAPortfolioContainedInAHigherLevel stamp: 'G.L.S. 5/24/2021 16:59:34'!
PASSED!

!testRun: #PortfolioTest #test14PortfoliosCannotContainEachOther stamp: 'G.L.S. 5/24/2021 16:59:34'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCannotContainACopyOfTheSamePortfolioInAHigherLevelWithMultipleParents stamp: 'G.L.S. 5/24/2021 16:59:34'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 16:59:48' prior: 50873928!
test09PortfolioCantHaveMultipleOfTheSameAccountByAddingAnotherPortfolioWithTheAccounts
	
	self should: [
			portfolio2 addPortfolioElement: account.
			portfolio addPortfolioElement: account.
			portfolio addPortfolioElement: portfolio2.
			] 
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText  = Portfolio AccountAlreadyExistsError.
			].! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 17:00:07' prior: 50873947!
test10PortfolioCanHaveAnotherPortfolioWithDifferentAccounts

	|errorHappened|
	
	errorHappened := #No.
	
	[	portfolio2 addPortfolioElement: account.
		portfolio addPortfolioElement: account2.
		portfolio addPortfolioElement: portfolio2.]
		on: Error
		do: [:anError|
			errorHappened := #Si.
			].
	
	self assert: #No equals: errorHappened.
! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 17:00:16' prior: 50873967!
test11PortfolioCannotContainItself

	self should: [portfolio addPortfolioElement: portfolio] 
		raise:  Error
		withExceptionDo: [:anError |
			self assert: anError messageText  = Portfolio PortfolioAlreadyExistsError.
			].
	 
! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 17:00:25' prior: 50873979!
test12PortfolioCannotContainTheSamePortfolioInMultipleLevels
	
	self should: [
			portfolio addPortfolioElement: portfolio2.
			portfolio2 addPortfolioElement: portfolio3.
			portfolio2 addPortfolioElement: portfolio3.
			] 
		raise:  Error
		withExceptionDo: [:anError |
			self assert: anError messageText  = Portfolio PortfolioAlreadyExistsError.
			].
	 
! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 17:00:33' prior: 50873998!
test13PortfolioCannotHaveAPortfolioContainedInAHigherLevel

	self should: [
			portfolio addPortfolioElement: portfolio3.
			portfolio addPortfolioElement: portfolio2.
			portfolio2 addPortfolioElement: portfolio3.
			] 
		raise:  Error
		withExceptionDo: [:anError |
			self assert: anError messageText  = Portfolio PortfolioAlreadyExistsError.
			].
	 
! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 17:00:42' prior: 50874017!
test14PortfoliosCannotContainEachOther
	
	self should: [
			portfolio addPortfolioElement: portfolio2.
			portfolio2 addPortfolioElement: portfolio.
			] 
		raise:  Error
		withExceptionDo: [:anError |
			self assert: anError messageText  = Portfolio PortfolioAlreadyExistsError.
			].
	 
! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 17:00:55' prior: 50874032!
test15PortfolioCannotContainACopyOfTheSamePortfolioInAHigherLevelWithMultipleParents
	
	self should: [
			portfolio3 addPortfolioElement: portfolio4.
			portfolio addPortfolioElement: portfolio3.
			portfolio2 addPortfolioElement: portfolio3.
			portfolio addPortfolioElement: account.
			portfolio3 addPortfolioElement: account.
			]
		raise:  Error
		withExceptionDo: [:anError |
			self assert: anError messageText  = Portfolio AccountAlreadyExistsError.
			].
	 
! !

!testRun: #PortfolioTest #test15PortfolioCannotContainACopyOfTheSamePortfolioInAHigherLevelWithMultipleParents stamp: 'G.L.S. 5/24/2021 17:00:59'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfEmptyPortfolioEquals0 stamp: 'G.L.S. 5/24/2021 17:00:59'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance stamp: 'G.L.S. 5/24/2021 17:00:59'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts stamp: 'G.L.S. 5/24/2021 17:00:59'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioTransactionsAreAnEmptyCollection stamp: 'G.L.S. 5/24/2021 17:00:59'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfAPortfolioWithOneAccountEqualsTheAccountTransactions stamp: 'G.L.S. 5/24/2021 17:00:59'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOnAPortfolioWithAnAccountOnAnExistingTransactionReturnsTrue stamp: 'G.L.S. 5/24/2021 17:00:59'!
PASSED!

!testRun: #PortfolioTest #test07hasRegisteredDoesNotReturnTrueOnATransactionOfAnAccountNotInsideThePortfolio stamp: 'G.L.S. 5/24/2021 17:00:59'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCantHaveMultiplesOfTheSameAccount stamp: 'G.L.S. 5/24/2021 17:00:59'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantHaveMultipleOfTheSameAccountByAddingAnotherPortfolioWithTheAccounts stamp: 'G.L.S. 5/24/2021 17:00:59'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanHaveAnotherPortfolioWithDifferentAccounts stamp: 'G.L.S. 5/24/2021 17:00:59'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCannotContainItself stamp: 'G.L.S. 5/24/2021 17:00:59'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCannotContainTheSamePortfolioInMultipleLevels stamp: 'G.L.S. 5/24/2021 17:00:59'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCannotHaveAPortfolioContainedInAHigherLevel stamp: 'G.L.S. 5/24/2021 17:00:59'!
PASSED!

!testRun: #PortfolioTest #test14PortfoliosCannotContainEachOther stamp: 'G.L.S. 5/24/2021 17:00:59'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCannotContainACopyOfTheSamePortfolioInAHigherLevelWithMultipleParents stamp: 'G.L.S. 5/24/2021 17:00:59'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 17:03:23'!
testPorfolioAlreadyExistsFor: aBlock
	
	self should: aBlock
		raise:  Error
		withExceptionDo: [:anError |
			self assert: anError messageText  = Portfolio PortfolioAlreadyExistsError.
			].
	 
! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 17:03:53' prior: 50874456!
test11PortfolioCannotContainItself

	self testPorfolioAlreadyExistsFor: [portfolio addPortfolioElement: portfolio].
	 
! !

!testRun: #PortfolioTest #test11PortfolioCannotContainItself stamp: 'G.L.S. 5/24/2021 17:03:54'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfEmptyPortfolioEquals0 stamp: 'G.L.S. 5/24/2021 17:03:54'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance stamp: 'G.L.S. 5/24/2021 17:03:54'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts stamp: 'G.L.S. 5/24/2021 17:03:54'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioTransactionsAreAnEmptyCollection stamp: 'G.L.S. 5/24/2021 17:03:54'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfAPortfolioWithOneAccountEqualsTheAccountTransactions stamp: 'G.L.S. 5/24/2021 17:03:54'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOnAPortfolioWithAnAccountOnAnExistingTransactionReturnsTrue stamp: 'G.L.S. 5/24/2021 17:03:54'!
PASSED!

!testRun: #PortfolioTest #test07hasRegisteredDoesNotReturnTrueOnATransactionOfAnAccountNotInsideThePortfolio stamp: 'G.L.S. 5/24/2021 17:03:54'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCantHaveMultiplesOfTheSameAccount stamp: 'G.L.S. 5/24/2021 17:03:54'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantHaveMultipleOfTheSameAccountByAddingAnotherPortfolioWithTheAccounts stamp: 'G.L.S. 5/24/2021 17:03:54'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanHaveAnotherPortfolioWithDifferentAccounts stamp: 'G.L.S. 5/24/2021 17:03:54'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCannotContainItself stamp: 'G.L.S. 5/24/2021 17:03:54'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCannotContainTheSamePortfolioInMultipleLevels stamp: 'G.L.S. 5/24/2021 17:03:54'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCannotHaveAPortfolioContainedInAHigherLevel stamp: 'G.L.S. 5/24/2021 17:03:54'!
PASSED!

!testRun: #PortfolioTest #test14PortfoliosCannotContainEachOther stamp: 'G.L.S. 5/24/2021 17:03:54'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCannotContainACopyOfTheSamePortfolioInAHigherLevelWithMultipleParents stamp: 'G.L.S. 5/24/2021 17:03:54'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 17:04:20' prior: 50874467!
test12PortfolioCannotContainTheSamePortfolioInMultipleLevels
	
	self testPorfolioAlreadyExistsFor: [
			portfolio addPortfolioElement: portfolio2.
			portfolio2 addPortfolioElement: portfolio3.
			portfolio2 addPortfolioElement: portfolio3.
			].
	 
! !

!testRun: #PortfolioTest #test12PortfolioCannotContainTheSamePortfolioInMultipleLevels stamp: 'G.L.S. 5/24/2021 17:04:26'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 17:05:08' prior: 50874482!
test13PortfolioCannotHaveAPortfolioContainedInAHigherLevel

	self testPorfolioAlreadyExistsFor: [
			portfolio addPortfolioElement: portfolio3.
			portfolio addPortfolioElement: portfolio2.
			portfolio2 addPortfolioElement: portfolio3.
			].
	 
! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 17:05:25' prior: 50874496!
test14PortfoliosCannotContainEachOther
	
	self testPorfolioAlreadyExistsFor: [
			portfolio addPortfolioElement: portfolio2.
			portfolio2 addPortfolioElement: portfolio.
			].
	 
! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 17:06:16'!
testAccountAlreadyExistsFor: aBlock
	
	self should: aBlock
		raise: Error
		withExceptionDo: [:anError|
			self assert: anError messageText  = Portfolio AccountAlreadyExistsError.
			].! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 17:06:39' prior: 50874508!
test15PortfolioCannotContainACopyOfTheSamePortfolioInAHigherLevelWithMultipleParents
	
	self testAccountAlreadyExistsFor:[
			portfolio3 addPortfolioElement: portfolio4.
			portfolio addPortfolioElement: portfolio3.
			portfolio2 addPortfolioElement: portfolio3.
			portfolio addPortfolioElement: account.
			portfolio3 addPortfolioElement: account.
			].
	 
! !

!testRun: #PortfolioTest #test15PortfolioCannotContainACopyOfTheSamePortfolioInAHigherLevelWithMultipleParents stamp: 'G.L.S. 5/24/2021 17:06:40'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfEmptyPortfolioEquals0 stamp: 'G.L.S. 5/24/2021 17:06:40'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance stamp: 'G.L.S. 5/24/2021 17:06:40'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts stamp: 'G.L.S. 5/24/2021 17:06:40'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioTransactionsAreAnEmptyCollection stamp: 'G.L.S. 5/24/2021 17:06:40'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfAPortfolioWithOneAccountEqualsTheAccountTransactions stamp: 'G.L.S. 5/24/2021 17:06:40'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOnAPortfolioWithAnAccountOnAnExistingTransactionReturnsTrue stamp: 'G.L.S. 5/24/2021 17:06:40'!
PASSED!

!testRun: #PortfolioTest #test07hasRegisteredDoesNotReturnTrueOnATransactionOfAnAccountNotInsideThePortfolio stamp: 'G.L.S. 5/24/2021 17:06:40'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCantHaveMultiplesOfTheSameAccount stamp: 'G.L.S. 5/24/2021 17:06:40'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantHaveMultipleOfTheSameAccountByAddingAnotherPortfolioWithTheAccounts stamp: 'G.L.S. 5/24/2021 17:06:40'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanHaveAnotherPortfolioWithDifferentAccounts stamp: 'G.L.S. 5/24/2021 17:06:40'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCannotContainItself stamp: 'G.L.S. 5/24/2021 17:06:40'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCannotContainTheSamePortfolioInMultipleLevels stamp: 'G.L.S. 5/24/2021 17:06:40'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCannotHaveAPortfolioContainedInAHigherLevel stamp: 'G.L.S. 5/24/2021 17:06:40'!
PASSED!

!testRun: #PortfolioTest #test14PortfoliosCannotContainEachOther stamp: 'G.L.S. 5/24/2021 17:06:40'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCannotContainACopyOfTheSamePortfolioInAHigherLevelWithMultipleParents stamp: 'G.L.S. 5/24/2021 17:06:40'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 17:07:01' prior: 50874427!
test09PortfolioCantHaveMultipleOfTheSameAccountByAddingAnotherPortfolioWithTheAccounts
	
	self testAccountAlreadyExistsFor: [
			portfolio2 addPortfolioElement: account.
			portfolio addPortfolioElement: account.
			portfolio addPortfolioElement: portfolio2.
			].! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 17:07:34' prior: 50874348!
test08PortfolioCantHaveMultiplesOfTheSameAccount
	
	self testAccountAlreadyExistsFor: [
			portfolio addPortfolioElement: account.
			portfolio addPortfolioElement: account.
			].! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 17:07:51' prior: 50874710!
testAccountAlreadyExistsFor: aBlock
	
	self should: aBlock
		raise: Error
		withExceptionDo: [:anError |
			self assert: anError messageText  = Portfolio AccountAlreadyExistsError.
			].! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 17:07:56' prior: 50874593!
testPorfolioAlreadyExistsFor: aBlock
	
	self should: aBlock
		raise: Error
		withExceptionDo: [:anError |
			self assert: anError messageText  = Portfolio PortfolioAlreadyExistsError.
			].
	 
! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 17:08:40'!
testPorfolioErrorFor: aBlock expected: anErrorMessage
	
	self should: aBlock
		raise: Error
		withExceptionDo: [:anError |
			self assert: anError messageText  = anErrorMessage.
			].
	 
! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 17:09:10' prior: 50874822!
testAccountAlreadyExistsFor: aBlock
	
	self testPorfolioErrorFor: aBlock expected: Portfolio AccountAlreadyExistsError.! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 17:09:23'!
testPorfolioErrorFor: aBlock expecting: anErrorMessage
	
	self should: aBlock
		raise: Error
		withExceptionDo: [:anError |
			self assert: anError messageText  = anErrorMessage.
			].
	 
! !
!PortfolioTest methodsFor: 'as yet unclassified' stamp: 'G.L.S. 5/24/2021 17:09:23' prior: 50874849!
testAccountAlreadyExistsFor: aBlock
	
	self testPorfolioErrorFor: aBlock expecting: Portfolio AccountAlreadyExistsError.! !

!methodRemoval: PortfolioTest #testPorfolioErrorFor:expected: stamp: 'G.L.S. 5/24/2021 17:09:23'!
testPorfolioErrorFor: aBlock expected: anErrorMessage
	
	self should: aBlock
		raise: Error
		withExceptionDo: [:anError |
			self assert: anError messageText  = anErrorMessage.
			].
	 
!
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 17:09:47' prior: 50874831!
testPorfolioAlreadyExistsFor: aBlock
	
	self testPorfolioErrorFor: aBlock expecting: Portfolio PortfolioAlreadyExistsError.
	 
! !

!testRun: #PortfolioTest #test01BalanceOfEmptyPortfolioEquals0 stamp: 'G.L.S. 5/24/2021 17:09:54'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance stamp: 'G.L.S. 5/24/2021 17:09:54'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts stamp: 'G.L.S. 5/24/2021 17:09:54'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioTransactionsAreAnEmptyCollection stamp: 'G.L.S. 5/24/2021 17:09:54'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfAPortfolioWithOneAccountEqualsTheAccountTransactions stamp: 'G.L.S. 5/24/2021 17:09:54'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOnAPortfolioWithAnAccountOnAnExistingTransactionReturnsTrue stamp: 'G.L.S. 5/24/2021 17:09:54'!
PASSED!

!testRun: #PortfolioTest #test07hasRegisteredDoesNotReturnTrueOnATransactionOfAnAccountNotInsideThePortfolio stamp: 'G.L.S. 5/24/2021 17:09:54'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCantHaveMultiplesOfTheSameAccount stamp: 'G.L.S. 5/24/2021 17:09:54'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantHaveMultipleOfTheSameAccountByAddingAnotherPortfolioWithTheAccounts stamp: 'G.L.S. 5/24/2021 17:09:54'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanHaveAnotherPortfolioWithDifferentAccounts stamp: 'G.L.S. 5/24/2021 17:09:54'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCannotContainItself stamp: 'G.L.S. 5/24/2021 17:09:54'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCannotContainTheSamePortfolioInMultipleLevels stamp: 'G.L.S. 5/24/2021 17:09:54'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCannotHaveAPortfolioContainedInAHigherLevel stamp: 'G.L.S. 5/24/2021 17:09:54'!
PASSED!

!testRun: #PortfolioTest #test14PortfoliosCannotContainEachOther stamp: 'G.L.S. 5/24/2021 17:09:54'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCannotContainACopyOfTheSamePortfolioInAHigherLevelWithMultipleParents stamp: 'G.L.S. 5/24/2021 17:09:54'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 17:15:32' prior: 50874270!
test07hasRegisteredDoesNotReturnTrueOnATransactionOfAnAccountNotInsideThePortfolio

	|deposit|

	deposit := Deposit register: 100 on: account2.
	portfolio addPortfolioElement: account.
	
	self deny: (portfolio hasRegistered: deposit).! !

portfolio := Portfolio createNew.
portfolio2 := Portfolio createNew.
portfolio3 := Portfolio createNew.
portfolio4 := Portfolio createNew.
portfolio5 := Portfolio createNew.!

portfolio addPortfolioElement: portfolio4.
portfolio2 addPortfolioElement: portfolio4.
portfolio3 addPortfolioElement: portfolio2.
portfolio4 addPortfolioElement: portfolio5.!

pepe := ReceptiveAccount  new.
Withdraw register: 100 on: pepe.

pepe2 := ReceptiveAccount  new.
Withdraw register: 100 on: pepe.

pepe3 := ReceptiveAccount  new.
Withdraw register: 100 on: pepe.!

portfolio5 addPortfolioElement: pepe.
portfolio5 addPortfolioElement: pepe2.
portfolio5 addPortfolioElement: pepe3.!

portfolio3 transactions.!

portfolio3 balance!

portfolio3 transactions !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 17:21:13'!
testBalanceOfAPortfolioWithTransactions: aBlockWithTransactions ElementsToAdd: anArrayOfPortfolioElements EqualsATotalOf: aTotalToCompare 

	aBlockWithTransactions value.
	anArrayOfPortfolioElements do: [:aPortfolioElement | portfolio addPortfolioElement: aPortfolioElement.].
	
	self assert: aTotalToCompare equals: portfolio balance.! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 17:21:45' prior: 50874082!
test01BalanceOfEmptyPortfolioEquals0

	"self assert: 0 equals: portfolio balance."
	self testBalanceOfAPortfolioWithTransactions: [] ElementsToAdd: {} EqualsATotalOf: 0. ! !

!testRun: #PortfolioTest #test01BalanceOfEmptyPortfolioEquals0 stamp: 'G.L.S. 5/24/2021 17:21:48'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfEmptyPortfolioEquals0 stamp: 'G.L.S. 5/24/2021 17:21:48'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance stamp: 'G.L.S. 5/24/2021 17:21:48'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts stamp: 'G.L.S. 5/24/2021 17:21:48'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioTransactionsAreAnEmptyCollection stamp: 'G.L.S. 5/24/2021 17:21:48'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfAPortfolioWithOneAccountEqualsTheAccountTransactions stamp: 'G.L.S. 5/24/2021 17:21:48'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOnAPortfolioWithAnAccountOnAnExistingTransactionReturnsTrue stamp: 'G.L.S. 5/24/2021 17:21:48'!
PASSED!

!testRun: #PortfolioTest #test07hasRegisteredDoesNotReturnTrueOnATransactionOfAnAccountNotInsideThePortfolio stamp: 'G.L.S. 5/24/2021 17:21:48'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCantHaveMultiplesOfTheSameAccount stamp: 'G.L.S. 5/24/2021 17:21:48'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantHaveMultipleOfTheSameAccountByAddingAnotherPortfolioWithTheAccounts stamp: 'G.L.S. 5/24/2021 17:21:48'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanHaveAnotherPortfolioWithDifferentAccounts stamp: 'G.L.S. 5/24/2021 17:21:48'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCannotContainItself stamp: 'G.L.S. 5/24/2021 17:21:48'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCannotContainTheSamePortfolioInMultipleLevels stamp: 'G.L.S. 5/24/2021 17:21:48'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCannotHaveAPortfolioContainedInAHigherLevel stamp: 'G.L.S. 5/24/2021 17:21:48'!
PASSED!

!testRun: #PortfolioTest #test14PortfoliosCannotContainEachOther stamp: 'G.L.S. 5/24/2021 17:21:48'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCannotContainACopyOfTheSamePortfolioInAHigherLevelWithMultipleParents stamp: 'G.L.S. 5/24/2021 17:21:48'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 17:21:55' prior: 50874999!
test01BalanceOfEmptyPortfolioEquals0

	self testBalanceOfAPortfolioWithTransactions: [] ElementsToAdd: {} EqualsATotalOf: 0. ! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 17:21:57' prior: 50875074!
test01BalanceOfEmptyPortfolioEquals0

	self testBalanceOfAPortfolioWithTransactions: [] ElementsToAdd: {} EqualsATotalOf: 0.! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 17:22:33' prior: 50874154!
test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance

	"Deposit register: 100 on: account.
	
	portfolio addPortfolioElement: account.
	
	self assert: 100 equals: portfolio balance."
	
	self testBalanceOfAPortfolioWithTransactions: [Deposit register: 100 on: account.] ElementsToAdd: {account}  EqualsATotalOf: 100. ! !

!testRun: #PortfolioTest #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance stamp: 'G.L.S. 5/24/2021 17:22:35'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfEmptyPortfolioEquals0 stamp: 'G.L.S. 5/24/2021 17:22:35'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance stamp: 'G.L.S. 5/24/2021 17:22:35'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts stamp: 'G.L.S. 5/24/2021 17:22:35'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioTransactionsAreAnEmptyCollection stamp: 'G.L.S. 5/24/2021 17:22:35'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfAPortfolioWithOneAccountEqualsTheAccountTransactions stamp: 'G.L.S. 5/24/2021 17:22:35'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOnAPortfolioWithAnAccountOnAnExistingTransactionReturnsTrue stamp: 'G.L.S. 5/24/2021 17:22:35'!
PASSED!

!testRun: #PortfolioTest #test07hasRegisteredDoesNotReturnTrueOnATransactionOfAnAccountNotInsideThePortfolio stamp: 'G.L.S. 5/24/2021 17:22:35'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCantHaveMultiplesOfTheSameAccount stamp: 'G.L.S. 5/24/2021 17:22:35'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantHaveMultipleOfTheSameAccountByAddingAnotherPortfolioWithTheAccounts stamp: 'G.L.S. 5/24/2021 17:22:35'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanHaveAnotherPortfolioWithDifferentAccounts stamp: 'G.L.S. 5/24/2021 17:22:35'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCannotContainItself stamp: 'G.L.S. 5/24/2021 17:22:35'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCannotContainTheSamePortfolioInMultipleLevels stamp: 'G.L.S. 5/24/2021 17:22:35'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCannotHaveAPortfolioContainedInAHigherLevel stamp: 'G.L.S. 5/24/2021 17:22:35'!
PASSED!

!testRun: #PortfolioTest #test14PortfoliosCannotContainEachOther stamp: 'G.L.S. 5/24/2021 17:22:35'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCannotContainACopyOfTheSamePortfolioInAHigherLevelWithMultipleParents stamp: 'G.L.S. 5/24/2021 17:22:35'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 17:22:42' prior: 50875088!
test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance
	
	self testBalanceOfAPortfolioWithTransactions: [Deposit register: 100 on: account.] ElementsToAdd: {account}  EqualsATotalOf: 100. ! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 17:24:56' prior: 50874230!
test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts

	"Deposit register: 200 on: account.
	Withdraw register: 50 on: account2.
	
	portfolio addPortfolioElement: account.
	portfolio addPortfolioElement: account2.
	
	self assert: 150 equals: portfolio balance."
	
	self testBalanceOfAPortfolioWithTransactions: [
		Deposit register: 200 on: account.
		Withdraw register: 50 on: account2.]  
		ElementsToAdd: {account. account2} EqualsATotalOf: 150.! !

!testRun: #PortfolioTest #test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts stamp: 'G.L.S. 5/24/2021 17:24:57'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfEmptyPortfolioEquals0 stamp: 'G.L.S. 5/24/2021 17:24:57'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance stamp: 'G.L.S. 5/24/2021 17:24:57'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts stamp: 'G.L.S. 5/24/2021 17:24:57'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioTransactionsAreAnEmptyCollection stamp: 'G.L.S. 5/24/2021 17:24:57'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfAPortfolioWithOneAccountEqualsTheAccountTransactions stamp: 'G.L.S. 5/24/2021 17:24:57'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOnAPortfolioWithAnAccountOnAnExistingTransactionReturnsTrue stamp: 'G.L.S. 5/24/2021 17:24:57'!
PASSED!

!testRun: #PortfolioTest #test07hasRegisteredDoesNotReturnTrueOnATransactionOfAnAccountNotInsideThePortfolio stamp: 'G.L.S. 5/24/2021 17:24:57'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCantHaveMultiplesOfTheSameAccount stamp: 'G.L.S. 5/24/2021 17:24:57'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantHaveMultipleOfTheSameAccountByAddingAnotherPortfolioWithTheAccounts stamp: 'G.L.S. 5/24/2021 17:24:57'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanHaveAnotherPortfolioWithDifferentAccounts stamp: 'G.L.S. 5/24/2021 17:24:57'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCannotContainItself stamp: 'G.L.S. 5/24/2021 17:24:57'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCannotContainTheSamePortfolioInMultipleLevels stamp: 'G.L.S. 5/24/2021 17:24:57'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCannotHaveAPortfolioContainedInAHigherLevel stamp: 'G.L.S. 5/24/2021 17:24:57'!
PASSED!

!testRun: #PortfolioTest #test14PortfoliosCannotContainEachOther stamp: 'G.L.S. 5/24/2021 17:24:57'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCannotContainACopyOfTheSamePortfolioInAHigherLevelWithMultipleParents stamp: 'G.L.S. 5/24/2021 17:24:57'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 17:25:02' prior: 50875177!
test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts
	
	self testBalanceOfAPortfolioWithTransactions: [
		Deposit register: 200 on: account.
		Withdraw register: 50 on: account2.]  
		ElementsToAdd: {account. account2} EqualsATotalOf: 150.! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 17:25:16' prior: 50875263!
test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts
	
	self testBalanceOfAPortfolioWithTransactions: [
		Deposit register: 200 on: account.
		Withdraw register: 50 on: account2.
		]  
		ElementsToAdd: {account. account2} EqualsATotalOf: 150.! !

!testRun: #PortfolioTest #test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts stamp: 'G.L.S. 5/24/2021 17:25:17'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfEmptyPortfolioEquals0 stamp: 'G.L.S. 5/24/2021 17:25:17'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance stamp: 'G.L.S. 5/24/2021 17:25:17'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts stamp: 'G.L.S. 5/24/2021 17:25:17'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioTransactionsAreAnEmptyCollection stamp: 'G.L.S. 5/24/2021 17:25:17'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfAPortfolioWithOneAccountEqualsTheAccountTransactions stamp: 'G.L.S. 5/24/2021 17:25:17'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOnAPortfolioWithAnAccountOnAnExistingTransactionReturnsTrue stamp: 'G.L.S. 5/24/2021 17:25:17'!
PASSED!

!testRun: #PortfolioTest #test07hasRegisteredDoesNotReturnTrueOnATransactionOfAnAccountNotInsideThePortfolio stamp: 'G.L.S. 5/24/2021 17:25:17'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCantHaveMultiplesOfTheSameAccount stamp: 'G.L.S. 5/24/2021 17:25:17'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantHaveMultipleOfTheSameAccountByAddingAnotherPortfolioWithTheAccounts stamp: 'G.L.S. 5/24/2021 17:25:17'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanHaveAnotherPortfolioWithDifferentAccounts stamp: 'G.L.S. 5/24/2021 17:25:17'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCannotContainItself stamp: 'G.L.S. 5/24/2021 17:25:17'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCannotContainTheSamePortfolioInMultipleLevels stamp: 'G.L.S. 5/24/2021 17:25:17'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCannotHaveAPortfolioContainedInAHigherLevel stamp: 'G.L.S. 5/24/2021 17:25:17'!
PASSED!

!testRun: #PortfolioTest #test14PortfoliosCannotContainEachOther stamp: 'G.L.S. 5/24/2021 17:25:17'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCannotContainACopyOfTheSamePortfolioInAHigherLevelWithMultipleParents stamp: 'G.L.S. 5/24/2021 17:25:17'!
PASSED!
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 17:36:03'!
testAPortfolioWithTransactions: aBlockWithTransactions ElementsToAdd: anArrayOfPortfolioElements hasRegistered: anArrayOfTransactionsToCheck hasNotRegistered: anArrayOfTransactionsToDeny 

	aBlockWithTransactions value.
	anArrayOfPortfolioElements do: [:aPortfolioElement | portfolio addPortfolioElement: aPortfolioElement.].
	
	anArrayOfTransactionsToCheck do: [:aTransaction | self assert: (portfolio hasRegistered: aTransaction)].
	anArrayOfTransactionsToDeny do: [:aTransaction | self deny: (portfolio hasRegistered: aTransaction)].! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 17:37:19' prior: 50874259!
test06hasRegisteredOnAPortfolioWithAnAccountOnAnExistingTransactionReturnsTrue

	|deposit|
	
	"portfolio addPortfolioElement: account.
	self assert: (portfolio hasRegistered: deposit)."
	
	self testAPortfolioWithTransactions: [deposit := Deposit register: 100 on: account.] 
		ElementsToAdd: {account} 
		hasRegistered: {deposit}  
		hasNotRegistered: {}. ! !

!testRun: #PortfolioTest #test06hasRegisteredOnAPortfolioWithAnAccountOnAnExistingTransactionReturnsTrue stamp: 'G.L.S. 5/24/2021 17:37:21'!
FAILURE!

!testRun: #PortfolioTest #test06hasRegisteredOnAPortfolioWithAnAccountOnAnExistingTransactionReturnsTrue stamp: 'G.L.S. 5/24/2021 17:38:07'!
ERROR!
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 17:38:24' prior: 50875374!
test06hasRegisteredOnAPortfolioWithAnAccountOnAnExistingTransactionReturnsTrue

	|deposit|
	
	"portfolio addPortfolioElement: account.
	self assert: (portfolio hasRegistered: deposit)."
	
	self testAPortfolioWithTransactions: [deposit := Deposit register: 100 on: account.] 
		ElementsToAdd: {account} 
		hasRegistered: {deposit}  
		hasNotRegistered: {}.! !
!PortfolioTest methodsFor: 'testing' stamp: 'G.L.S. 5/24/2021 17:39:39' prior: 50875398!
test06hasRegisteredOnAPortfolioWithAnAccountOnAnExistingTransactionReturnsTrue

	|deposit|
	deposit := Deposit register: 100 on: account.
	portfolio addPortfolioElement: account.
	
	self assert: (portfolio hasRegistered: deposit).! !

!methodRemoval: PortfolioTest #testAPortfolioWithTransactions:ElementsToAdd:hasRegistered:hasNotRegistered: stamp: 'G.L.S. 5/24/2021 17:39:45'!
testAPortfolioWithTransactions: aBlockWithTransactions ElementsToAdd: anArrayOfPortfolioElements hasRegistered: anArrayOfTransactionsToCheck hasNotRegistered: anArrayOfTransactionsToDeny 

	aBlockWithTransactions value.
	anArrayOfPortfolioElements do: [:aPortfolioElement | portfolio addPortfolioElement: aPortfolioElement.].
	
	anArrayOfTransactionsToCheck do: [:aTransaction | self assert: (portfolio hasRegistered: aTransaction)].
	anArrayOfTransactionsToDeny do: [:aTransaction | self deny: (portfolio hasRegistered: aTransaction)].!

!testRun: #PortfolioTest #test01BalanceOfEmptyPortfolioEquals0 stamp: 'G.L.S. 5/24/2021 17:39:48'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfAPortfolioWithAnAccountEqualsAccountBalance stamp: 'G.L.S. 5/24/2021 17:39:48'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfAPortfolioWithMultipleAccountsEqualsTheTotalBalanceOfTheAccounts stamp: 'G.L.S. 5/24/2021 17:39:48'!
PASSED!

!testRun: #PortfolioTest #test04EmptyPortfolioTransactionsAreAnEmptyCollection stamp: 'G.L.S. 5/24/2021 17:39:48'!
PASSED!

!testRun: #PortfolioTest #test05TransactionsOfAPortfolioWithOneAccountEqualsTheAccountTransactions stamp: 'G.L.S. 5/24/2021 17:39:48'!
PASSED!

!testRun: #PortfolioTest #test06hasRegisteredOnAPortfolioWithAnAccountOnAnExistingTransactionReturnsTrue stamp: 'G.L.S. 5/24/2021 17:39:48'!
PASSED!

!testRun: #PortfolioTest #test07hasRegisteredDoesNotReturnTrueOnATransactionOfAnAccountNotInsideThePortfolio stamp: 'G.L.S. 5/24/2021 17:39:48'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioCantHaveMultiplesOfTheSameAccount stamp: 'G.L.S. 5/24/2021 17:39:48'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioCantHaveMultipleOfTheSameAccountByAddingAnotherPortfolioWithTheAccounts stamp: 'G.L.S. 5/24/2021 17:39:48'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanHaveAnotherPortfolioWithDifferentAccounts stamp: 'G.L.S. 5/24/2021 17:39:48'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCannotContainItself stamp: 'G.L.S. 5/24/2021 17:39:48'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCannotContainTheSamePortfolioInMultipleLevels stamp: 'G.L.S. 5/24/2021 17:39:48'!
PASSED!

!testRun: #PortfolioTest #test13PortfolioCannotHaveAPortfolioContainedInAHigherLevel stamp: 'G.L.S. 5/24/2021 17:39:48'!
PASSED!

!testRun: #PortfolioTest #test14PortfoliosCannotContainEachOther stamp: 'G.L.S. 5/24/2021 17:39:48'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCannotContainACopyOfTheSamePortfolioInAHigherLevelWithMultipleParents stamp: 'G.L.S. 5/24/2021 17:39:48'!
PASSED!