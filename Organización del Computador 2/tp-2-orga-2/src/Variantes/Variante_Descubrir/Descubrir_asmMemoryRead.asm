global Descubrir_asm

section .rodata
ALIGN 16

invertirPixeles: db 0x0c,0x0d,0x0e,0x0f,0x08,0x09,0x0a,0x0b,0x04,0x05,0x06,0x07,0x00,0x01,0x02,0x03
andMask: db 0x03,0x03,0x03,0x00,0x03,0x03,0x03,0x00,0x03,0x03,0x03,0x00,0x03,0x03,0x03,0x00
test2GreyMask: db 0x00,0x00,0x00,0x80,0x04,0x04,0x04,0x80,0x08,0x08,0x08,0x80,0x0c,0x0c,0x0c,0x80
testGreyAndMask: db 0x00,0x00,0x00,0xff,0x00,0x00,0x00,0xff,0x00,0x00,0x00,0xff,0x00,0x00,0x00,0xff


maskDos: db 0x04,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x04,0x00,0x00,0x00
maskTres: db 0x08,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x08,0x00,0x00,0x00
maskCuatro: db 0x10,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x10,0x00,0x00,0x00
maskCinco: db 0x20,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x20,0x00,0x00,0x00
maskSeis: db 0x40,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x40,0x00,0x00,0x00
maskSiete: db 0x80,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x80,0x00,0x00,0x00

section .text
;void Descubrir_c(
; ;   uint8_t *src,
;    uint8_t *dst,
;    int width,
;    int height,
;    int src_row_size,
;    int dst_row_size)
;{
; rdi<- src 		rsi<-dst 			edx<-width 			ecx<- height
Descubrir_asm:
push rbp
mov rbp, rsp
push rbx
%define src rdi
%define dst rsi

mov r10, 0
mov r11d, edx 
imul r11d, ecx
shl r11d, 2


.ciclo:
cmp r10, r11
je .fin
			
movdqa xmm0, [src+r10] 					; xmm0 = |a3,r3,g3,b3|a2,r2,g2,b2|a1,r1,g1,b1|a0,r0,g0,b0| 4 dwords

mov rbx, r11
sub rbx, 16
sub rbx, r10

movdqa xmm1, [src+rbx]					; xmm1 = |a3,r3,g3,b3|a2,r2,g2,b2|a1,r1,g1,b1|a0,r0,g0,b0| 4 dwords

pshufb xmm1, [invertirPixeles]		; xmm1 = |a0,r0,g0,b0|a1,r1,g1,b1|a2,r2,g2,b2|a3,r3,g3,b3| 4 dwords

psrld xmm1, 2

pxor xmm1, xmm0
pand xmm1, [andMask]
pxor xmm2, xmm2

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

movdqa xmm4, xmm1
psrld xmm4, 15
pand xmm4, [maskDos] 	;bit 2, red1
por xmm2, xmm4

movdqa xmm4, xmm1
psrld xmm4, 6
pand xmm4, [maskTres] 	;bit 3, green1
por xmm2, xmm4

movdqa xmm4, xmm1
pslld xmm4, 3
pand xmm4, [maskCuatro] ;bit 4, blue1
por xmm2, xmm4

movdqa xmm4, xmm1
psrld xmm4, 11
pand xmm4, [maskCinco] 	;bit 5, red0
por xmm2, xmm4

movdqa xmm4, xmm1
psrld xmm4, 2
pand xmm4, [maskSeis] 	;bit 6, green0
por xmm2, xmm4

movdqa xmm4, xmm1
pslld xmm4, 7
pand xmm4, [maskSiete] 	;bit 7, blue0
por xmm2, xmm4


; xmm2 = |0|0|0|pg3|0|0|0|pg2|0|0|0|pg1|0|0|0|pg0|

pshufb xmm2, [test2GreyMask]
por xmm2, [testGreyAndMask]
movdqa [dst+r10], xmm2
add r10, 16
jmp .ciclo


.fin:
pop rbx
pop rbp
ret
